<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/blog/2022/08/03/hello-world/"/>
    <url>/blog/2022/08/03/hello-world/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid主题_config.yml</title>
    <link href="/blog/2022/08/03/hexo/hexo%20Fluid%20config/"/>
    <url>/blog/2022/08/03/hexo/hexo%20Fluid%20config/</url>
    
    <content type="html"><![CDATA[<h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">GitHub<code>_config.yml</code></a></li></ul><h3 id="Hexo-Fluid-主题的-config-yml内容"><a href="#Hexo-Fluid-主题的-config-yml内容" class="headerlink" title="Hexo Fluid 主题的 _config.yml内容"></a>Hexo Fluid 主题的 _config.yml内容</h3><p>版本：version：1.8.14</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># Hexo Theme Fluid</span><br><span class="hljs-comment"># Author: Fluid-dev</span><br><span class="hljs-comment"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span><br><span class="hljs-comment"># 你可以从指南中获得更详细的说明</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span><br><span class="hljs-comment"># You can get more detailed help from the guide</span><br><span class="hljs-comment">#---------------------------</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 全局</span><br><span class="hljs-comment"># Global</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 用于浏览器标签的图标</span><br><span class="hljs-comment"># Icon for browser tab</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/fluid.png</span><br><br><span class="hljs-comment"># 用于苹果设备的图标</span><br><span class="hljs-comment"># Icon for Apple touch</span><br><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/fluid.png</span><br><br><span class="hljs-comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><br><span class="hljs-comment"># Title separator in browser tab, eg: article - site</span><br><span class="hljs-attr">tab_title_separator:</span> <span class="hljs-string">&quot; - &quot;</span><br><br><span class="hljs-comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><br><span class="hljs-comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><br><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 代码块的增强配置</span><br><span class="hljs-comment"># Enhancements to code blocks</span><br><span class="hljs-attr">code:</span><br>  <span class="hljs-comment"># 是否开启复制代码的按钮</span><br>  <span class="hljs-comment"># Enable copy code button</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 代码语言</span><br>  <span class="hljs-comment"># Code language</span><br>  <span class="hljs-attr">language:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br><br>  <span class="hljs-comment"># 代码高亮</span><br>  <span class="hljs-comment"># Code highlight</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 代码块是否显示行号</span><br>    <span class="hljs-comment"># If true, the code block display line numbers</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span><br>    <span class="hljs-comment"># Highlight library</span><br>    <span class="hljs-comment"># Options: highlightjs | prismjs</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-comment"># 在链接中挑选 style 填入</span><br>      <span class="hljs-comment"># Select a style in the link</span><br>      <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github gist&quot;</span><br>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span><br><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span><br>      <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span><br>      <span class="hljs-comment"># See: https://prismjs.com/</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;tomorrow night&quot;</span><br><br>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span><br>      <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 一些好玩的功能</span><br><span class="hljs-comment"># Some fun features</span><br><span class="hljs-attr">fun_features:</span><br>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span><br>  <span class="hljs-comment"># Typing animation for subtitle</span><br>  <span class="hljs-attr">typing:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 打印速度，数字越大越慢</span><br>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span><br>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span><br><br>    <span class="hljs-comment"># 游标字符</span><br>    <span class="hljs-comment"># Cursor character</span><br>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span><br><br>    <span class="hljs-comment"># 是否循环播放效果</span><br>    <span class="hljs-comment"># If true, loop animation</span><br>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 在指定页面开启，不填则在所有页面开启</span><br>    <span class="hljs-comment"># Enable in specified page, all pages by default</span><br>    <span class="hljs-comment"># Options: home | post | tag | category | about | links | page | 404</span><br>    <span class="hljs-attr">scope:</span> []<br><br>  <span class="hljs-comment"># 为文章内容中的标题添加锚图标</span><br>  <span class="hljs-comment"># Add an anchor icon to the title on the post page</span><br>  <span class="hljs-attr">anchorjs:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">element:</span> <span class="hljs-string">h1,h2,h3,h4,h5,h6</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br>    <span class="hljs-comment"># Options: hover | always | touch</span><br>    <span class="hljs-attr">visible:</span> <span class="hljs-string">hover</span><br>    <span class="hljs-comment"># Options: § | # | ❡</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-comment"># 加载进度条</span><br>  <span class="hljs-comment"># Progress bar when loading</span><br>  <span class="hljs-attr">progressbar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">height_px:</span> <span class="hljs-number">3</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#29d&quot;</span><br>    <span class="hljs-comment"># See: https://github.com/rstacruz/nprogress</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">showSpinner:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">trickleSpeed:</span> <span class="hljs-number">100</span> &#125;<br><br><span class="hljs-comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><br><span class="hljs-comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span><br><span class="hljs-attr">dark_mode:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span><br>  <span class="hljs-comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span><br>  <span class="hljs-comment"># Options: auto | light | dark</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span><br><br><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><br><span class="hljs-comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><br><span class="hljs-comment"># See: https://www.webdesignrankings.com/resources/lolcolors/</span><br><span class="hljs-attr">color:</span><br>  <span class="hljs-comment"># body 背景色</span><br>  <span class="hljs-comment"># Color of body background</span><br>  <span class="hljs-attr">body_bg_color:</span> <span class="hljs-string">&quot;#eee&quot;</span><br>  <span class="hljs-comment"># 暗色模式下的 body 背景色，下同</span><br>  <span class="hljs-comment"># Color in dark mode, the same below</span><br>  <span class="hljs-attr">body_bg_color_dark:</span> <span class="hljs-string">&quot;#181c27&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单背景色</span><br>  <span class="hljs-comment"># Color of navigation bar background</span><br>  <span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-string">&quot;#2f4154&quot;</span><br>  <span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#1f3144&quot;</span><br><br>  <span class="hljs-comment"># 顶部菜单字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">navbar_text_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">navbar_text_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 副标题字体色</span><br>  <span class="hljs-comment"># Color of navigation bar text</span><br>  <span class="hljs-attr">subtitle_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">subtitle_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span><br><br>  <span class="hljs-comment"># 全局字体色</span><br>  <span class="hljs-comment"># Color of global text</span><br>  <span class="hljs-attr">text_color:</span> <span class="hljs-string">&quot;#3c4858&quot;</span><br>  <span class="hljs-attr">text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 全局次级字体色（摘要、简介等位置）</span><br>  <span class="hljs-comment"># Color of global secondary text (excerpt, introduction, etc.)</span><br>  <span class="hljs-attr">sec_text_color:</span> <span class="hljs-string">&quot;#718096&quot;</span><br>  <span class="hljs-attr">sec_text_color_dark:</span> <span class="hljs-string">&quot;#a7a9ad&quot;</span><br><br>  <span class="hljs-comment"># 主面板背景色</span><br>  <span class="hljs-comment"># Color of main board</span><br>  <span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span><br>  <span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色</span><br>  <span class="hljs-comment"># Color of post text</span><br>  <span class="hljs-attr">post_text_color:</span> <span class="hljs-string">&quot;#2c3e50&quot;</span><br>  <span class="hljs-attr">post_text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span><br>  <span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span><br>  <span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#1a202c&quot;</span><br>  <span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br><br>  <span class="hljs-comment"># 文章超链接字体色</span><br>  <span class="hljs-comment"># Color of post link</span><br>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#0366d6&quot;</span><br>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#1589e9&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮时字体色</span><br>  <span class="hljs-comment"># Color of link when hovering</span><br>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#30a9de&quot;</span><br><br>  <span class="hljs-comment"># 超链接悬浮背景色</span><br>  <span class="hljs-comment"># Color of link background when hovering</span><br>  <span class="hljs-attr">link_hover_bg_color:</span> <span class="hljs-string">&quot;#f8f9fa&quot;</span><br>  <span class="hljs-attr">link_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#364151&quot;</span><br><br>  <span class="hljs-comment"># 分隔线和表格边线的颜色</span><br>  <span class="hljs-comment"># Color of horizontal rule and table border</span><br>  <span class="hljs-attr">line_color:</span> <span class="hljs-string">&quot;#eaecef&quot;</span><br>  <span class="hljs-attr">line_color_dark:</span> <span class="hljs-string">&quot;#435266&quot;</span><br><br>  <span class="hljs-comment"># 滚动条颜色</span><br>  <span class="hljs-comment"># Color of scrollbar</span><br>  <span class="hljs-attr">scrollbar_color:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span><br>  <span class="hljs-attr">scrollbar_color_dark:</span> <span class="hljs-string">&quot;#687582&quot;</span><br>  <span class="hljs-comment"># 滚动条悬浮颜色</span><br>  <span class="hljs-comment"># Color of scrollbar when hovering</span><br>  <span class="hljs-attr">scrollbar_hover_color:</span> <span class="hljs-string">&quot;#a6a6a6&quot;</span><br>  <span class="hljs-attr">scrollbar_hover_color_dark:</span> <span class="hljs-string">&quot;#9da8b3&quot;</span><br><br>  <span class="hljs-comment"># 按钮背景色</span><br>  <span class="hljs-comment"># Color of button</span><br>  <span class="hljs-attr">button_bg_color:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>  <span class="hljs-attr">button_bg_color_dark:</span> <span class="hljs-string">&quot;transparent&quot;</span><br>  <span class="hljs-comment"># 按钮悬浮背景色</span><br>  <span class="hljs-comment"># Color of button when hovering</span><br>  <span class="hljs-attr">button_hover_bg_color:</span> <span class="hljs-string">&quot;#f2f3f5&quot;</span><br>  <span class="hljs-attr">button_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#46647e&quot;</span><br><br><span class="hljs-comment"># 主题字体配置</span><br><span class="hljs-comment"># Font</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span><br>  <span class="hljs-attr">font_family:</span><br>  <span class="hljs-attr">letter_spacing:</span> <span class="hljs-number">0.</span><span class="hljs-string">02em</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><br><br><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attr">custom_js:</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span><br><br><span class="hljs-comment"># 网页访问统计</span><br><span class="hljs-comment"># Analysis of website visitors</span><br><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span><br>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span><br>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span><br>  <span class="hljs-attr">baidu:</span><br><br>  <span class="hljs-comment"># Google 统计的 Tracking ID</span><br>  <span class="hljs-comment"># Google analytics, set Tracking ID</span><br>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span><br>  <span class="hljs-attr">google:</span><br><br>  <span class="hljs-comment"># Google gtag.js 的媒体资源 ID</span><br>  <span class="hljs-comment"># Google gtag.js GA_MEASUREMENT_ID</span><br>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span><br>  <span class="hljs-attr">gtag:</span><br><br>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span><br>  <span class="hljs-comment"># Tencent analytics, set APP ID</span><br>  <span class="hljs-comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span><br>  <span class="hljs-attr">tencent:</span><br>    <span class="hljs-attr">sid:</span><br>    <span class="hljs-attr">cid:</span><br><br>  <span class="hljs-comment"># 51.la 站点统计 ID</span><br>  <span class="hljs-comment"># 51.la analytics</span><br>  <span class="hljs-comment"># See: https://www.51.la/user/site/index</span><br>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span><br><br>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span><br>  <span class="hljs-comment"># cnzz analytics</span><br>  <span class="hljs-comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span><br>  <span class="hljs-attr">cnzz:</span><br><br>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span><br>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span><br>  <span class="hljs-attr">leancloud:</span><br>    <span class="hljs-attr">app_id:</span><br>    <span class="hljs-attr">app_key:</span><br>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span><br>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span><br>    <span class="hljs-attr">server_url:</span><br>    <span class="hljs-comment"># 统计页面时获取路径的属性</span><br>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span><br>    <span class="hljs-comment"># If ture, ignore localhost &amp; 127.0.0.1</span><br>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span><br><span class="hljs-comment"># Lazy loading of images and comment plugin on the page</span><br><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 加载时的占位图片</span><br>  <span class="hljs-comment"># The placeholder image when loading</span><br>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span><br><br>  <span class="hljs-comment"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span><br>  <span class="hljs-comment"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span><br>  <span class="hljs-comment"># The factor of viewport height that triggers loading</span><br>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span><br><span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span><br><span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_lbnruvf0jn.css</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页头</span><br><span class="hljs-comment"># Header</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br><br>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span><br>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span><br>  <span class="hljs-attr">ground_glass:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span><br>    <span class="hljs-comment"># Number of blurred pixel. the larger the number, the higher the blur</span><br>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span><br>    <span class="hljs-comment"># Ratio of opacity, 1.0 is completely opaque</span><br>    <span class="hljs-comment"># available: 0 - 1.0</span><br>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.7</span><br><br>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>    <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><br><br><span class="hljs-comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><br><span class="hljs-comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><br><span class="hljs-attr">search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span><br>  <span class="hljs-comment"># Path for search index file, it can be a relative path or an absolute path</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 文件生成在本地的位置，必须是相对路径</span><br>  <span class="hljs-comment"># The location where the index file is generated locally, it must be a relative location</span><br>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span><br><br>  <span class="hljs-comment"># 搜索的范围</span><br>  <span class="hljs-comment"># Search field</span><br>  <span class="hljs-comment"># Options: post | page | all</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span><br><br>  <span class="hljs-comment"># 搜索是否扫描正文</span><br>  <span class="hljs-comment"># If true, search will scan the post content</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 首屏图片的相关配置</span><br><span class="hljs-comment"># Config of the big image on the first screen</span><br><span class="hljs-attr">banner:</span><br>  <span class="hljs-comment"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span><br>  <span class="hljs-comment"># Scrolling parallax</span><br>  <span class="hljs-attr">parallax:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span><br>  <span class="hljs-comment"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span><br>  <span class="hljs-attr">width_height_ratio:</span> <span class="hljs-number">1.0</span><br><br><span class="hljs-comment"># 向下滚动的箭头</span><br><span class="hljs-comment"># Scroll down arrow</span><br><span class="hljs-attr">scroll_down_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 头图高度不小于指定比例，才显示箭头</span><br>  <span class="hljs-comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_height_limit:</span> <span class="hljs-number">80</span><br><br>  <span class="hljs-comment"># 翻页后自动滚动</span><br>  <span class="hljs-comment"># Auto scroll after page turning</span><br>  <span class="hljs-attr">scroll_after_turning_page:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 向顶部滚动的箭头</span><br><span class="hljs-comment"># Scroll top arrow</span><br><span class="hljs-attr">scroll_top_arrow:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Open Graph metadata</span><br><span class="hljs-comment"># See: https://hexo.io/docs/helpers.html#open-graph</span><br><span class="hljs-attr">open_graph:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">twitter_card:</span> <span class="hljs-string">summary_large_image</span><br>  <span class="hljs-attr">twitter_id:</span><br>  <span class="hljs-attr">twitter_site:</span><br>  <span class="hljs-attr">google_plus:</span><br>  <span class="hljs-attr">fb_admins:</span><br>  <span class="hljs-attr">fb_app_id:</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 页脚</span><br><span class="hljs-comment"># Footer</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span><br>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class="hljs-string">  &#x27;</span><br><br>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span><br>  <span class="hljs-comment"># Display website PV and UV statistics</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span><br>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span><br>    <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span><br>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># ICP证号</span><br>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">京ICP证123456号</span><br>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span><br>    <span class="hljs-attr">police_text:</span> <span class="hljs-string">京公网安备12345678号</span><br>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span><br>    <span class="hljs-attr">police_code:</span> <span class="hljs-number">12345678</span><br>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span><br>    <span class="hljs-attr">police_icon:</span> <span class="hljs-string">/img/police_beian.png</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Home Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span><br>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br><br>  <span class="hljs-comment"># 头图高度，屏幕百分比</span><br>  <span class="hljs-comment"># Height ratio of banner image</span><br>  <span class="hljs-comment"># Available: 0 - 100</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span><br><br>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span><br>  <span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span><br>  <span class="hljs-comment"># Available: 0 - 1.0</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>  <span class="hljs-comment"># Independent config of home page subtitle</span><br>  <span class="hljs-attr">slogan:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;An elegant Material-Design theme for Hexo&quot;</span><br><br>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span><br>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span><br>    <span class="hljs-attr">api:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment"># 请求地址</span><br>      <span class="hljs-comment"># Request url</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span><br><br>      <span class="hljs-comment"># 请求方法</span><br>      <span class="hljs-comment"># Request method</span><br>      <span class="hljs-comment"># Available: GET | POST | PUT</span><br>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span><br><br>      <span class="hljs-comment"># 请求头</span><br>      <span class="hljs-comment"># Request headers</span><br>      <span class="hljs-attr">headers:</span> &#123;&#125;<br><br>      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span><br>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span><br>      <span class="hljs-attr">keys:</span> []<br><br>  <span class="hljs-comment"># 自动截取文章摘要</span><br>  <span class="hljs-comment"># Auto extract post</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 打开文章的标签方式</span><br>  <span class="hljs-comment"># The browser tag to open the post</span><br>  <span class="hljs-comment"># Available: _blank | _self</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span><br><br>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span><br>  <span class="hljs-comment"># Meta information of post</span><br>  <span class="hljs-attr">post_meta:</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span><br>  <span class="hljs-comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 文章页</span><br><span class="hljs-comment"># Post Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span><br>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span><br>  <span class="hljs-attr">default_index_img:</span><br><br>  <span class="hljs-comment"># 文章标题下方的元信息</span><br>  <span class="hljs-comment"># Meta information below title</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>    <span class="hljs-comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>    <span class="hljs-comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span><br>    <span class="hljs-attr">date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>      <span class="hljs-comment"># ISO-8601 date format</span><br>      <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 字数统计</span><br>    <span class="hljs-comment"># Word count</span><br>    <span class="hljs-attr">wordcount:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 估计阅读全文需要的时长</span><br>    <span class="hljs-comment"># Estimated reading time</span><br>    <span class="hljs-attr">min2read:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span><br>      <span class="hljs-comment"># Average word length (chars count in word), ZH ≈ 2, EN ≈ 5</span><br>      <span class="hljs-attr">awl:</span> <span class="hljs-number">2</span><br>      <span class="hljs-comment"># 每分钟阅读字数，如果大部分是技术文章可适度调低</span><br>      <span class="hljs-comment"># Words per minute</span><br>      <span class="hljs-attr">wpm:</span> <span class="hljs-number">60</span><br><br>    <span class="hljs-comment"># 浏览量计数</span><br>    <span class="hljs-comment"># Number of visits</span><br>    <span class="hljs-attr">views:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 统计数据来源</span><br>      <span class="hljs-comment"># Data Source</span><br>      <span class="hljs-comment"># Options: busuanzi | leancloud</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span><br><br>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span><br>  <span class="hljs-comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span><br>  <span class="hljs-attr">updated:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-comment"># ISO-8601 date format</span><br>    <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span><br>    <span class="hljs-attr">date_format:</span> <span class="hljs-string">&quot;LL a&quot;</span><br><br>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span><br>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span><br>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 提示标签类型</span><br>    <span class="hljs-comment"># Note class</span><br>    <span class="hljs-comment"># Options: default | primary | info | success | warning | danger | light</span><br>    <span class="hljs-attr">note_class:</span> <span class="hljs-string">info</span><br><br>  <span class="hljs-comment"># 侧边栏展示当前分类下的文章</span><br>  <span class="hljs-comment"># Sidebar of category</span><br>  <span class="hljs-attr">category_bar:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span><br>    <span class="hljs-comment"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span><br><br>    <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>    <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>    <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>    <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;title&quot;</span><br><br>    <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>    <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>    <span class="hljs-attr">post_limit:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 侧边栏展示文章目录</span><br>  <span class="hljs-comment"># Table of contents (TOC) in the sidebar</span><br>  <span class="hljs-attr">toc:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 置于板块的左侧或右侧</span><br>    <span class="hljs-comment"># place in the board</span><br>    <span class="hljs-comment"># Options: left | right</span><br>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span><br><br>    <span class="hljs-comment"># 目录会选择这些节点作为标题</span><br>    <span class="hljs-comment"># TOC will select these nodes as headings</span><br>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span><br><br>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span><br>    <span class="hljs-comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span><br>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span><br>  <span class="hljs-comment"># Copyright, will be displayed at the end of each post</span><br>  <span class="hljs-attr">copyright:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># CreativeCommons license</span><br>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span><br>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY&#x27;</span><br><br>    <span class="hljs-comment"># 显示作者</span><br>    <span class="hljs-attr">author:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>    <span class="hljs-comment"># 显示发布日期</span><br>    <span class="hljs-comment"># Show post date</span><br>    <span class="hljs-attr">post_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>    <span class="hljs-comment"># 显示更新日期</span><br>    <span class="hljs-comment"># Show update date</span><br>    <span class="hljs-attr">update_date:</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span><br><br>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span><br>  <span class="hljs-comment"># Link to previous/next post</span><br>  <span class="hljs-attr">prev_next:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片标题</span><br>  <span class="hljs-comment"># Image caption</span><br>  <span class="hljs-attr">image_caption:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 文章图片可点击放大</span><br>  <span class="hljs-comment"># Zoom feature of images</span><br>  <span class="hljs-attr">image_zoom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;, &#x27;&#x27;]</span><br>    <span class="hljs-comment"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;,&#x27;&#x27;]</span><br>    <span class="hljs-attr">img_url_replace:</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><br>  <span class="hljs-comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span><br>  <span class="hljs-comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span><br>  <span class="hljs-attr">footnote:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span><br>    <span class="hljs-comment"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span><br>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>  <span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span><br>  <span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># Options: mathjax | katex</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br><br>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span><br>  <span class="hljs-comment"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span><br>  <span class="hljs-attr">mermaid:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br><br>    <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;<br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br><br><span class="hljs-comment"># Disqus</span><br><span class="hljs-comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: https://disqus.com</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">shortname:</span><br>  <span class="hljs-comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span><br>  <span class="hljs-comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span><br>  <span class="hljs-comment"># See: https://github.com/SukkaW/DisqusJS</span><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">apikey:</span><br><br><span class="hljs-comment"># Gitalk</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://github.com/gitalk/gitalk#options</span><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">clientID:</span><br>  <span class="hljs-attr">clientSecret:</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">owner:</span><br>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]<br>  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 默认 proxy 可能会失效，解决方法请见下方链接</span><br>  <span class="hljs-comment"># The default proxy may be invalid, refer to the links for solutions</span><br>  <span class="hljs-comment"># https://github.com/gitalk/gitalk/issues/429</span><br>  <span class="hljs-comment"># https://github.com/Zibri/cloudflare-cors-anywhere</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br><br><span class="hljs-comment"># Valine</span><br><span class="hljs-comment"># 基于 LeanCloud</span><br><span class="hljs-comment"># Based on LeanCloud</span><br><span class="hljs-comment"># See: https://valine.js.org/</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appId:</span><br>  <span class="hljs-attr">appKey:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredFields:</span> []<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">emojiCDN:</span><br>  <span class="hljs-attr">emojiMaps:</span><br>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Waline</span><br><span class="hljs-comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><br><span class="hljs-comment"># Derived from Valine, with self-hosted service and new features</span><br><span class="hljs-comment"># See: https://waline.js.org/</span><br><span class="hljs-attr">waline:</span><br>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">placeholder:</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]<br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]<br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span><br>  <span class="hljs-attr">avatarCDN:</span> <span class="hljs-string">&#x27;https://seccdn.libravatar.org/avatar/&#x27;</span><br>  <span class="hljs-attr">avatarForce:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 畅言 Changyan</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service, insufficient support for regions outside China</span><br><span class="hljs-comment"># http://changyan.kuaizhan.com</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 来必力 Livere</span><br><span class="hljs-comment"># 基于第三方的服务</span><br><span class="hljs-comment"># Based on third-party service</span><br><span class="hljs-comment"># See: https://www.livere.com</span><br><span class="hljs-attr">livere:</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Remark42</span><br><span class="hljs-comment"># 需要自托管服务端</span><br><span class="hljs-comment"># Based on self-hosted service</span><br><span class="hljs-comment"># See: https://remark42.com</span><br><span class="hljs-attr">remark42:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">site_id:</span><br>  <span class="hljs-attr">max_shown_comments:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">locale:</span> <span class="hljs-string">zh</span><br>  <span class="hljs-attr">components:</span> [<span class="hljs-string">&#x27;embed&#x27;</span>]<br><br><span class="hljs-comment"># Twikoo</span><br><span class="hljs-comment"># 基于腾讯云开发</span><br><span class="hljs-comment"># Based on Tencent CloudBase</span><br><span class="hljs-comment"># See: https://twikoo.js.org</span><br><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">envId:</span><br>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br><br><span class="hljs-comment"># Cusdis</span><br><span class="hljs-comment"># 基于第三方服务或自托管服务</span><br><span class="hljs-comment"># Based on third-party or self-hosted service</span><br><span class="hljs-comment"># See https://cusdis.com</span><br><span class="hljs-attr">cusdis:</span><br>  <span class="hljs-attr">host:</span><br>  <span class="hljs-attr">app_id:</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-cn</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 归档页</span><br><span class="hljs-comment"># Archive Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">archive:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 分类页</span><br><span class="hljs-comment"># Category Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">category:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for categories, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: length | name</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span><br><br>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span><br>  <span class="hljs-comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span><br>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span><br>  <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span><br>  <span class="hljs-comment"># Options: date | title | or other field of front-matter</span><br>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span><br><br>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span><br>  <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span><br>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 标签页</span><br><span class="hljs-comment"># Tag Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">tag:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">tagcloud:</span><br>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span><br>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span><br>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span><br>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span><br>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 关于页</span><br><span class="hljs-comment"># About Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span><br>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-douban-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://douban.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;豆瓣&quot;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span> &#125;<br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 自定义页</span><br><span class="hljs-comment"># Custom Page</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 通过 hexo new page 命令创建的页面</span><br><span class="hljs-comment"># Custom Page through `hexo new page`</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page:</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 404页</span><br><span class="hljs-comment"># 404 Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">page404:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">85</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 重定向到首页的延迟(毫秒)</span><br>  <span class="hljs-comment"># Delay in redirecting to home page (milliseconds)</span><br>  <span class="hljs-attr">redirect_delay:</span> <span class="hljs-number">5000</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 友链页</span><br><span class="hljs-comment"># Links Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span><br>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br>  <span class="hljs-comment"># 友链的成员项</span><br>  <span class="hljs-comment"># Member item of page</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Blog&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题博客&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Docs&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题使用指南&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Repo&quot;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题 GitHub 仓库&quot;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,<br>      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span><br>    &#125;<br><br>  <span class="hljs-comment"># 当成员头像加载失败时，替换为指定图片</span><br>  <span class="hljs-comment"># When the member avatar fails to load, replace the specified image</span><br>  <span class="hljs-attr">onerror_avatar:</span> <span class="hljs-string">/img/avatar.png</span><br><br>  <span class="hljs-comment"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span><br>  <span class="hljs-comment"># Custom content at the bottom of the links</span><br>  <span class="hljs-attr">custom:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：https://hexo.fluid-dev.com&lt;/li&gt;&lt;li&gt;图片：https://hexo.fluid-dev.com/img/favicon.png&lt;/li&gt;&lt;/ul&gt;&#x27;</span><br><br>  <span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span><br><span class="hljs-comment"># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span><br><span class="hljs-comment"># ** 如果你不知道如何设置，请不要做任何改动 **</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span><br><span class="hljs-comment"># Be aware that you would better use the same version as default ones to avoid potential problems.</span><br><span class="hljs-comment"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-attr">static_prefix:</span><br>  <span class="hljs-comment"># 内部静态</span><br>  <span class="hljs-comment"># Internal static</span><br>  <span class="hljs-attr">internal_js:</span> <span class="hljs-string">/js</span><br>  <span class="hljs-attr">internal_css:</span> <span class="hljs-string">/css</span><br>  <span class="hljs-attr">internal_img:</span> <span class="hljs-string">/img</span><br><br>  <span class="hljs-attr">anchor:</span> <span class="hljs-string">https://lib.baomitu.com/anchor-js/4.3.1/</span><br><br>  <span class="hljs-attr">github_markdown:</span> <span class="hljs-string">https://lib.baomitu.com/github-markdown-css/4.0.0/</span><br><br>  <span class="hljs-attr">jquery:</span> <span class="hljs-string">https://lib.baomitu.com/jquery/3.6.0/</span><br><br>  <span class="hljs-attr">bootstrap:</span> <span class="hljs-string">https://lib.baomitu.com/twitter-bootstrap/4.6.1/</span><br><br>  <span class="hljs-attr">prismjs:</span> <span class="hljs-string">https://lib.baomitu.com/prism/1.26.0/</span><br><br>  <span class="hljs-attr">tocbot:</span> <span class="hljs-string">https://lib.baomitu.com/tocbot/4.18.0/</span><br><br>  <span class="hljs-attr">typed:</span> <span class="hljs-string">https://lib.baomitu.com/typed.js/2.0.12/</span><br><br>  <span class="hljs-attr">fancybox:</span> <span class="hljs-string">https://lib.baomitu.com/fancybox/3.5.7/</span><br><br>  <span class="hljs-attr">nprogress:</span> <span class="hljs-string">https://lib.baomitu.com/nprogress/0.2.0/</span><br><br>  <span class="hljs-attr">mathjax:</span> <span class="hljs-string">https://lib.baomitu.com/mathjax/3.2.0/</span><br><br>  <span class="hljs-attr">katex:</span> <span class="hljs-string">https://lib.baomitu.com/KaTeX/0.15.2/</span><br><br>  <span class="hljs-attr">busuanzi:</span> <span class="hljs-string">https://busuanzi.ibruce.info/busuanzi/2.3/</span><br><br>  <span class="hljs-attr">clipboard:</span> <span class="hljs-string">https://lib.baomitu.com/clipboard.js/2.0.10/</span><br><br>  <span class="hljs-attr">mermaid:</span> <span class="hljs-string">https://lib.baomitu.com/mermaid/8.13.10/</span><br><br>  <span class="hljs-attr">valine:</span> <span class="hljs-string">https://lib.baomitu.com/valine/1.4.16/</span><br><br>  <span class="hljs-attr">waline:</span> <span class="hljs-string">https://lib.baomitu.com/waline/1.5.2/</span><br><br>  <span class="hljs-attr">gitalk:</span> <span class="hljs-string">https://lib.baomitu.com/gitalk/1.7.2/</span><br><br>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-string">https://lib.baomitu.com/disqusjs/1.3.0/</span><br><br>  <span class="hljs-attr">twikoo:</span> <span class="hljs-string">https://lib.baomitu.com/twikoo/1.4.17/</span><br><br>  <span class="hljs-attr">hint:</span> <span class="hljs-string">https://lib.baomitu.com/hint.css/2.7.0/</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Fluid主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用</title>
    <link href="/blog/2022/08/03/hexo/hexo1/"/>
    <url>/blog/2022/08/03/hexo/hexo1/</url>
    
    <content type="html"><![CDATA[<h3 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h3><p><a href="https://hexo.io/zh-cn/">Hexo中文官网</a></p><h3 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h3><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="安装-windows环境"><a href="#安装-windows环境" class="headerlink" title="安装(windows环境)"></a>安装(windows环境)</h3><blockquote><p>Hexo 安装版本相关信息<br>    hexo: 5.4.1<br>    hexo-cli: 4.3.0<br>    os: win32 10.0.22000<br>    node: 16.14.0<br>    v8: 9.4.146.24-node.20<br>    uv: 1.43.0<br>    zlib: 1.2.11<br>    brotli: 1.0.9<br>    ares: 1.18.1<br>    modules: 93<br>    nghttp2: 1.45.1<br>    napi: 8<br>    llhttp: 6.0.4<br>    openssl: 1.1.1m+quic<br>    cldr: 40.0<br>    icu: 70.1<br>    tz: 2021a3<br>    unicode: 14.0<br>    ngtcp2: 0.1.0-DEV<br>    nghttp3: 0.1.0-DEV</p></blockquote><h4 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h4><ul><li><a href="http://nodejs.cn/">Node.js中文网</a></li><li><a href="https://nodejs.org/zh-cn/">Node.js官网</a></li></ul><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h4><ul><li><a href="https://git-scm.com/">Git官网</a></li></ul><h4 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h4><ol><li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>进阶安装和使用,对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo<br></code></pre></td></tr></table></figure> <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="进行中图示"></div><div class="group-image-wrap"><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="成功后图示"></div></div></div></li><li><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: hexo &lt;<span class="hljs-built_in">command</span>&gt;<br><br>Commands:<br><br><span class="hljs-built_in">help</span>     在一个命令上获得帮助。<br>init     创建一个新的Hexo文件夹。<br>version  显示版本信息。<br><br>Global Options:<br><br>--config  指定配置文件，而不是使用 _config.yml<br>--cwd     指定CWD<br>--debug   在终端显示所有粗略的信息<br>--draft   显示帖子草稿<br>--safe    禁用所有插件和脚本<br>--silent  隐藏控制台中的输出<br>如需更多帮助，你可以使用 <span class="hljs-string">&quot;hexo help [command]&quot;</span>获得详细信息<br>或者你可以查看文档：http://hexo.io/docs/<br></code></pre></td></tr></table></figure></li><li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><blockquote><p>Node.js 版本限制<br> 我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">Node.js</a> 版本。</p></blockquote><p> <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321144759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图示"></p></li></ol></li></ol><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="1-hexo-init-lt-folder-gt"><a href="#1-hexo-init-lt-folder-gt" class="headerlink" title="1. hexo init &lt;folder&gt;"></a>1. <code>hexo init &lt;folder&gt;</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 因为没有把Hexo目录下的node_modules添加到环境变量所以需要npx</span><br>npx hexo init hexo<br><span class="hljs-comment"># 成功后</span><br>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br>INFO  Install dependencies<br>INFO  Start blogging with Hexo!<br></code></pre></td></tr></table></figure><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图示1"></p><h5 id="2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt"><a href="#2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt" class="headerlink" title="2. 成功以后通过命令行进入对应文件夹 cd &lt;folder&gt;"></a>2. 成功以后通过命令行进入对应文件夹 <code>cd &lt;folder&gt;</code></h5><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="文件夹内图示"></p><h4 id="3-通过命令行执行-npm-install"><a href="#3-通过命令行执行-npm-install" class="headerlink" title="3. 通过命令行执行 npm install"></a>3. 通过命令行执行 <code>npm install</code></h4><h4 id="4-配置-config-yml-依据官方中文文档配置"><a href="#4-配置-config-yml-依据官方中文文档配置" class="headerlink" title="4. 配置 _config.yml 依据官方中文文档配置"></a>4. 配置 <code>_config.yml</code> 依据<a href="https://hexo.io/zh-cn/docs/">官方中文文档配置</a></h4><h4 id="configuration"><a href="#configuration" class="headerlink" title="configuration)"></a>configuration)</h4><h4 id="5-运行hexo"><a href="#5-运行hexo" class="headerlink" title="5. 运行hexo"></a>5. 运行hexo</h4><ul><li><p>可以通过<a href="https://code.visualstudio.com/">vscode</a>打开根目录,执行npm脚本<code>server hexo server</code></p><blockquote><p><strong>注</strong>:可能需要安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script">npm</a>; <a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">npm Intellisense</a></p></blockquote></li><li><p>或者通过命令运行hexo</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS E:\<span class="hljs-built_in">test</span>\hexo&gt; npx hexo server<br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>  通过访问<a href="http://localhost:4000/">http://localhost:4000/</a>在浏览器中查看</p><p>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321151723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="hexo默认主题展示"></p></li></ul><h4 id="6-指令"><a href="#6-指令" class="headerlink" title="6. 指令"></a>6. 指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成静态文件。</span><br>hexo generate <br><span class="hljs-comment"># 清除缓存文件 db.json 和已生成的静态文件 public。</span><br>hexo clean<br><span class="hljs-comment"># 部署网站。</span><br>hexo deploy<br><span class="hljs-comment"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span><br>hexo server<br></code></pre></td></tr></table></figure><p>更多指令详细信息可以访问官网<a href="https://hexo.io/zh-cn/docs/commands">指令</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题之Fluid</title>
    <link href="/blog/2022/08/03/hexo/hexo2/"/>
    <url>/blog/2022/08/03/hexo/hexo2/</url>
    
    <content type="html"><![CDATA[<h3 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h3><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">Hexo Fluid GitHub</a></li><li><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></li><li><a href="https://hexo.fluid-dev.com/">Fluid’s blog</a></li></ul><h3 id="Fluid简介"><a href="#Fluid简介" class="headerlink" title="Fluid简介"></a>Fluid简介</h3><p>一款 Material Design 风格的 Hexo 博客主题</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321172250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="https://hexo.fluid-dev.com/"></p><h3 id="安装主题-version：1-8-14"><a href="#安装主题-version：1-8-14" class="headerlink" title="安装主题(version：1.8.14)"></a>安装主题(version：1.8.14)</h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客根目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml"><code>_config.yml</code></a>内容复制过去。</p><div class="note note-warning">            <p><code>_config.fluid.yml</code>和hexo的<code>_config.yml</code>同级,可以根据个人需求配置主题相关内容,无法访问可以查看博客<strong>Hexo Fluid主题_config.yml</strong></p>          </div><h3 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">about</span><br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: 标题<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>          </div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>更详细的配置信息等请参考<a href="https://hexo.fluid-dev.com/docs/">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Fluid主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo部署到GitHub</title>
    <link href="/blog/2022/08/03/hexo/hexo3/"/>
    <url>/blog/2022/08/03/hexo/hexo3/</url>
    
    <content type="html"><![CDATA[<h3 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h3><ul><li><a href="https://hexo.io/zh-cn/docs/one-command-deployment">Hexo|中文文档</a></li><li><a href="https://hexo.fluid-dev.com/posts/actions-deploy/">Fluid’s blog</a></li><li><a href="https://docs.github.com/cn/pages/quickstart">GitHub Pages</a></li></ul><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Windows</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>需要有个人的<a href="https://github.com/">GitHub</a></li><li>建立至少一个存储库,储存库要求如下:<ul><li>输入 username.github.io 作为存储库名称。 将 username 替换为您的 GitHub 用户名。</li><li>用户或组织名称包含大写字母，必须使用小写字母</li><li>仓库的可见性为公开（Public</li></ul></li><li>参考<a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site">官方文档</a></li></ol><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><h3 id="1-博客根目录下安装hexo-deployer-gitgit地址"><a href="#1-博客根目录下安装hexo-deployer-gitgit地址" class="headerlink" title="1.博客根目录下安装hexo-deployer-gitgit地址"></a>1.博客根目录下安装<code>hexo-deployer-git</code><a href="https://github.com/hexojs/hexo-deployer-git">git地址</a></h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h3 id="2-修改根目录下-config-yml"><a href="#2-修改根目录下-config-yml" class="headerlink" title="2.修改根目录下_config.yml"></a>2.修改根目录下<code>_config.yml</code></h3>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <span class="hljs-comment"># 类型</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span> <span class="hljs-comment">#仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment"># 提交的分支</span><br></code></pre></td></tr></table></figure><blockquote><p>注意事项:<br>    1. 我是用的<strong>ssh</strong>的方法非<code>https</code>的方法<br>    2. 需要在你的GitHub账号添加秘钥<br>      添加方式见文档<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh">使用 SSH 连接到 GitHub</a></p></blockquote><p>  ssh 生成方式</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t  -C <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323162034.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="命令"><br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323162700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="结果"></p><h3 id="3-执行命令"><a href="#3-执行命令" class="headerlink" title="3.执行命令"></a>3.执行命令</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除缓存防止将缓冲提交</span><br>hexo clean<br></code></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><h3 id="4-成功后可在GitHub上查看如下"><a href="#4-成功后可在GitHub上查看如下" class="headerlink" title="4.成功后可在GitHub上查看如下"></a>4.成功后可在GitHub上查看如下</h3><p>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323164713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="GitHub"></p><h2 id="使用GitHub-Actions自动部署方式"><a href="#使用GitHub-Actions自动部署方式" class="headerlink" title="使用GitHub  Actions自动部署方式"></a>使用GitHub  Actions自动部署方式</h2><blockquote><p>此方法和以下yml都来自 <a href="https://hexo.fluid-dev.com/posts/actions-deploy/">Fluid’s blog</a></p></blockquote><h3 id="将Hexo的博客项目上传至GitHub"><a href="#将Hexo的博客项目上传至GitHub" class="headerlink" title="将Hexo的博客项目上传至GitHub"></a>将Hexo的博客项目上传至GitHub</h3><h4 id="1-上传项目到GitHub"><a href="#1-上传项目到GitHub" class="headerlink" title="1.上传项目到GitHub"></a>1.上传项目到GitHub</h4><h4 id="2-如下图设置"><a href="#2-如下图设置" class="headerlink" title="2.如下图设置"></a>2.如下图设置</h4><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323170210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="第一步"></p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323170433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="第二步骤"></p><p>如上图 <code>name</code> 英文字母大写如果用小写会转成大写可以带下划线, <code>value</code> 填写上面ssh生成文件中<strong>不带</strong><code>.pug</code>后缀文件中的内容，记住<code>name</code>将下面yml中<code>$&#123;&#123; secrets.SSH_PRIVATE &#125;&#125;</code>中的<code>SSH_PRIVATE</code>换成自己的</p><h3 id="新建-yml"><a href="#新建-yml" class="headerlink" title="新建 ***.yml"></a>新建 ***.yml</h3><blockquote><p>必须将工作流程文件存储在仓库的 .github/workflows 目录中。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span>                      <span class="hljs-comment"># Actions 显示的名字，随意设置</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]                        <span class="hljs-comment"># 监听到 push 事件后触发</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>              <span class="hljs-comment"># 拉取当前执行 Actions 仓库的指定分支</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span>      <span class="hljs-comment"># 如果仓库有 submodule，在这里更新，没有则删掉此步骤</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        git submodule init</span><br><span class="hljs-string">        git submodule update --remote</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span>            <span class="hljs-comment"># 安装 Node 环境</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;16.x&quot;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Generate</span>         <span class="hljs-comment"># 安装 Hexo 依赖并且生成静态文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        rm -f .yarnclean</span><br><span class="hljs-string">        yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=false</span><br><span class="hljs-string">        rm -rf ./public</span><br><span class="hljs-string">        yarn run hexo clean</span><br><span class="hljs-string">        yarn run hexo generate</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span>           <span class="hljs-comment"># 部署步骤，这里以 hexo deploy 为例</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">yourname</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">your@email.com</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        mkdir -p ~/.ssh/</span><br><span class="hljs-string">        echo &quot;$SSH_PRIVATE&quot; | tr -d &#x27;\r&#x27; &gt; ~/.ssh/id_rsa</span><br><span class="hljs-string">        chmod 600 ~/.ssh/id_rsa</span><br><span class="hljs-string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="hljs-string">        git config --global user.name &quot;$GIT_NAME&quot;</span><br><span class="hljs-string">        git config --global user.email &quot;$GIT_EMAIL&quot;</span><br><span class="hljs-string">        yarn run hexo deploy</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：上面yml中node版本可以根据自己环境中的版本更换我的是16的版本所以换成了16。</p></blockquote><h3 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h3><p>每次推送像github的时候会通过 github actions 把代码推向 username.github.io 的储存库的指定分支如果失败可以点击 <code>Action</code> 查看失败原因</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323172016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图示1"></p><p>点进去之后可以查看出错的地方</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220323172144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图示2"></p><blockquote><p>注：问题可能出在<code>Hexo Deploy</code>查看自己储存库setting-&gt;secrets-&gt;Actions-&gt;Actions secrets是否正确</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>可以先通过方法一成功上传并访问<code>username.github.io</code>查看到后在使用方法二，上传成功后有最长20分钟的延迟可查看访问</p><p>当然也可以在同一个储存库不同的分支下进行如上操作，因为<code>username.github.io</code>这个库是公开的所以不建议这么操作</p><p>附赠<code>_config.yml</code>中部分修改内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://aninchoftime.github.io</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:AnInchOfTime/aninchofTime.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo生成站点地图并提交到谷歌</title>
    <link href="/blog/2022/08/03/hexo/hexo4/"/>
    <url>/blog/2022/08/03/hexo/hexo4/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>登陆谷歌<a href="https://search.google.com/search-console/about">Google Search Console</a>，根据网站提醒绑定你的博客域名。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>进入hexo根目录执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><p>控制台输出<br>added 1 package in 2s</p><h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><p>执行你原有的打包发布流程，可以在生成的public文件夹下看到名为sitemap.txt的文件如图：</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1658555271268.jpg?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_10,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_000000,shadow_0,t_100,g_se,x_10,y_10" alt="1658555271268"></p><h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><p>讲该文件填到如图所示位置</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1658555488419.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_10,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_000000,shadow_0,t_100,g_se,x_10,y_15" alt="1658555488419"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Droen 环境变量</title>
    <link href="/blog/2022/07/25/docker/drone-env/"/>
    <url>/blog/2022/07/25/docker/drone-env/</url>
    
    <content type="html"><![CDATA[<h3 id="drone环境变量"><a href="#drone环境变量" class="headerlink" title="drone环境变量"></a>drone环境变量</h3><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://docs.drone.io/server/reference/">Reference Index of server configuration settings</a></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>文档翻译为<a href="https://www.deepl.com/">Deepl</a>机翻。</li><li>默认值：无，仅表示翻译过程中并未直接指出该环境变量的值是什么。</li><li>此翻译，仅供参数。</li><li>docker镜像版本为<code>drone/drone:2</code>下环境变量解释。</li></ol><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ol><li><p>DRONE_BITBUCKET_CLIENT_ID</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_BITBUCKET_CLIENT_ID</td></tr><tr><td align="center">解释</td><td align="left">字符串值。配置Bitbucket OAuth客户端ID。这是用来代表Drone用户授权访问Bitbucket的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_BITBUCKET_CLIENT_ID=05136e57d80189bef462</td></tr></tbody></table></li><li><p>DRONE_BITBUCKET_CLIENT_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_BITBUCKET_CLIENT_SECRET</td></tr><tr><td align="center">解释</td><td align="left">字符串值。配置Bitbucket OAuth客户端秘密。这是用来代表Drone用户授权访问Bitbucket的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_BITBUCKET_CLIENT_SECRET=7c229228a77d2cbddaa61ddc78d45e</td></tr></tbody></table></li><li><p>DRONE_BITBUCKET_DEBUG</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_BITBUCKET_DEBUG</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。配置Bitbucket认证的详细跟踪记录。这应该被用来解决安装Drone服务器时的登录问题。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_BITBUCKET_DEBUG=false</td></tr></tbody></table></li><li><p>DRONE_CLEANUP_DEADLINE_PENDING</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CLEANUP_DEADLINE_PENDING</td></tr><tr><td align="center">解释</td><td align="left">可选的持续时间值。配置待处理作业被收割机杀死的时间间隔。</td></tr><tr><td align="center">默认值</td><td align="left">24h</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CLEANUP_DEADLINE_PENDING=24h</td></tr></tbody></table></li><li><p>DRONE_CLEANUP_DEADLINE_RUNNING</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CLEANUP_DEADLINE_RUNNING</td></tr><tr><td align="center">解释</td><td align="left">可选的持续时间值。配置运行中的作业被收割机杀死的时间间隔。</td></tr><tr><td align="center">默认值</td><td align="left">24h</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CLEANUP_DEADLINE_RUNNING=24h</td></tr></tbody></table></li><li><p>DRONE_CLEANUP_DISABLED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CLEANUP_DISABLED</td></tr><tr><td align="center">解释</td><td align="left">布尔值禁用收割机。收割机发现并杀死永久停留在挂起或运行状态的僵尸作业。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CLEANUP_DISABLED=true/DRONE_CLEANUP_DISABLED=false</td></tr></tbody></table></li><li><p>DRONE_CLEANUP_INTERVAL</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CLEANUP_INTERVAL</td></tr><tr><td align="center">解释</td><td align="left">可选的持续时间值。配置运行收割机的时间间隔。默认情况下，收割机每隔24小时就会发现并杀死那些永久停留在待定或运行状态的僵尸作业。</td></tr><tr><td align="center">默认值</td><td align="left">24h</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CLEANUP_INTERVAL=24h/DRONE_CLEANUP_INTERVAL=60m</td></tr></tbody></table></li><li><p>DRONE_CONVERT_PLUGIN_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CONVERT_PLUGIN_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置转换插件的端点，用于自动转换或修改配置文件。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CONVERT_PLUGIN_ENDPOINT=<code>http://hostname.com:3000</code></td></tr></tbody></table></li><li><p>DRONE_CONVERT_PLUGIN_EXTENSION</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CONVERT_PLUGIN_EXTENSION</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置应与转换插件一起使用的文件扩展名。此配置参数用于减少不会转换的文件类型的转换插件的不必要流量。它是完全可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CONVERT_PLUGIN_EXTENSION=.star</td></tr></tbody></table></li><li><p>DRONE_CONVERT_PLUGIN_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CONVERT_PLUGIN_SECRET</td></tr><tr><td align="center">解释</td><td align="left">用于创建http-signature的共享密钥。转换插件使用共享密钥来验证请求的真实性。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CONVERT_PLUGIN_SECRET=correct-horse-battery-staple</td></tr></tbody></table></li><li><p>DRONE_CONVERT_PLUGIN_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CONVERT_PLUGIN_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在建立与远程转换插件的连接时禁用TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CONVERT_PLUGIN_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_COOKIE_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_COOKIE_SECRET</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。配置用于签署认证cookies的秘钥。如果不设置，每次启动服务器时都会生成一个随机值。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_COOKIE_SECRET=correct-horse-battery-staple</td></tr></tbody></table></li><li><p>DRONE_COOKIE_TIMEOUT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_COOKIE_TIMEOUT</td></tr><tr><td align="center">解释</td><td align="left">可选的期限值。配置认证cookie的过期时间。</td></tr><tr><td align="center">默认值</td><td align="left">720h</td></tr><tr><td align="center">示例</td><td align="left">DRONE_COOKIE_TIMEOUT=720h</td></tr></tbody></table></li><li><p>DRONE_CRON_DISABLED  </p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CRON_DISABLED</td></tr><tr><td align="center">解释</td><td align="left">布尔值，禁用cron调度程序。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CRON_DISABLED=false</td></tr></tbody></table></li><li><p>DRONE_CRON_INTERVAL</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CRON_INTERVAL</td></tr><tr><td align="center">解释</td><td align="left">可选的持续时间值。配置运行cron调度程序的时间间隔。cron调度器并不意味着准确，默认情况下，每隔一小时就会对待处理的工作进行批处理。<strong>请注意，即使你减少了cron的间隔时间，你也不应该期望有高水平的准确性。我们的主要设计目标是创建一个安全、高效的cron调度器，防止用户对系统进行超载；这是以牺牲准确性为代价的。</strong></td></tr><tr><td align="center">默认值</td><td align="left">1h</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CRON_INTERVAL=1h/DRONE_CRON_INTERVAL=5m</td></tr></tbody></table></li><li><p>DRONE_DATABASE_DATASOURCE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DATABASE_DATASOURCE</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。配置数据库连接字符串。默认值是嵌入式sqlite数据库文件的路径。</td></tr><tr><td align="center">默认值</td><td align="left">/data/database.sqlite</td></tr><tr><td align="center">示例</td><td align="left">mysql: </br> DRONE_DATABASE_DATASOURCE=root:password@tcp(1.2.3.4:3306)/drone?parseTime=true </br> postgres: </br> DRONE_DATABASE_DATASOURCE=postgres://root:<a href="mailto:&#112;&#x61;&#115;&#115;&#119;&#111;&#114;&#x64;&#64;&#49;&#x2e;&#50;&#46;&#x33;&#46;&#52;">&#112;&#x61;&#115;&#115;&#119;&#111;&#114;&#x64;&#64;&#49;&#x2e;&#50;&#46;&#x33;&#46;&#52;</a>:5432/postgres?sslmode=disable</td></tr></tbody></table></li><li><p>DRONE_DATABASE_DRIVER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DATABASE_DRIVER</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。配置数据库驱动程序的名称。默认值是sqlite3驱动。替代驱动是postgres和mysql。</td></tr><tr><td align="center">默认值</td><td align="left">sqlite3</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DATABASE_DRIVER=mysql/DRONE_DATABASE_DRIVER=postgres</td></tr></tbody></table></li><li><p>DRONE_DATABASE_MAX_CONNECTIONS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DATABASE_MAX_CONNECTIONS</td></tr><tr><td align="center">解释</td><td align="left">可选的数字值。设置Drone的最大开放DB连接数。默认设置为0，必须在系统首次使用前进行配置。</td></tr><tr><td align="center">默认值</td><td align="left">0</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DATABASE_MAX_CONNECTIONS=45</td></tr></tbody></table></li><li><p>DRONE_DATABASE_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DATABASE_SECRET</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。配置用于加密数据库中秘密的秘密密钥。加密在默认情况下是禁用的，必须在系统首次使用前进行配置。</td></tr><tr><td align="center">默认值</td><td align="left">默认禁用</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DATABASE_SECRET=7c229228a77d2cbddaa61ddc78d45e</td></tr></tbody></table></li><li><p>DRONE_GIT_ALWAYS_AUTH</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GIT_ALWAYS_AUTH</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。将 Drone 配置为在克隆公共存储库时进行身份验证。仅当您的源代码管理系统（例如 GitHub Enterprise）启用了私有模式时才需要这样做。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GIT_ALWAYS_AUTH=false</td></tr></tbody></table></li><li><p>DRONE_GIT_PASSWORD</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GIT_PASSWORD</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。覆盖默认的git用户名和密码，用于验证和克隆私有仓库。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GIT_PASSWORD=7c229228a77d2cbddaa61ddc78d45e</td></tr></tbody></table></li><li><p>DRONE_GIT_USERNAME</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GIT_USERNAME</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。覆盖默认的git用户名和密码，用于验证和克隆私有仓库。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GIT_USERNAME=x-oauth-token</td></tr></tbody></table></li><li><p>DRONE_GITEA_CLIENT_ID</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEA_CLIENT_ID</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置Gitea OAuth客户端ID。这是用来代表Drone用户授权访问Gitea的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEA_CLIENT_ID=05136e57d80189bef462</td></tr></tbody></table></li><li><p>DRONE_GITEA_CLIENT_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEA_CLIENT_SECRET</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置了Gitea OAuth客户端的秘密。这是用来代表Drone用户授权访问Gitea的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEA_CLIENT_SECRET=7c229228a77d2cbddaa61ddc78d45e</td></tr></tbody></table></li><li><p>DRONE_GITEA_SERVER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEA_SERVER</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置 Gitea 服务器地址。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEA_SERVER=<code>https://try.gitea.io</code></td></tr></tbody></table></li><li><p>DRONE_GITEA_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEA_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在建立与远程 Gitea 服务器的连接时禁用 tls 验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEA_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_GITEE_REDIRECT_URL</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEE_REDIRECT_URL</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置 Gitee OAuth 授权重定向 url。</td></tr><tr><td align="center">默认值</td><td align="left">${DRONE_SERVER_PROTO}://${DRONE_SERVER_HOST}/login</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEE_REDIRECT_URL=<code>https://drone.domain.com/login</code></td></tr></tbody></table></li><li><p>DRONE_GITEE_SCOPE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEE_SCOPE</td></tr><tr><td align="center">解释</td><td align="left">字符串值提供以逗号分隔的 OAuth 范围列表。不应修改默认值。</td></tr><tr><td align="center">默认值</td><td align="left">user_info,projects,pull_requests,hook</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEE_SCOPE=”user_info,projects,pull_requests,hook”</td></tr></tbody></table></li><li><p>DRONE_GITEE_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITEE_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在建立与远程 Gitee 服务器的连接时禁用 TLS 验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITEE_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_GITHUB_CLIENT_ID</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITHUB_CLIENT_ID</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置GitHub OAuth客户端ID。这是用来代表Drone用户授权访问GitHub的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITHUB_CLIENT_ID=05136e57d80189bef462</td></tr></tbody></table></li><li><p>DRONE_GITHUB_CLIENT_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITHUB_CLIENT_SECRET</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置了GitHub oauth客户端的秘密。这是用来代表Drone用户授权访问GitHub的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITHUB_CLIENT_SECRET=7c229228a77d2cbddaa61ddc78d45e</td></tr></tbody></table></li><li><p>DRONE_GITHUB_SCOPE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITHUB_SCOPE</td></tr><tr><td align="center">解释</td><td align="left">字符串值提供了一个以逗号分隔的OAuth作用域列表。默认值不应该被修改。</td></tr><tr><td align="center">默认值</td><td align="left">repo,repo:status,user:email,read:org</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITHUB_SCOPE=repo,repo:status,user:email,read:org</td></tr></tbody></table></li><li><p>DRONE_GITHUB_SERVER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITHUB_SERVER</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置GitHub服务器地址。</td></tr><tr><td align="center">默认值</td><td align="left"><code>https://github.com</code></td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITHUB_SERVER=<code>https://github.com</code></td></tr></tbody></table></li><li><p>DRONE_GITHUB_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITHUB_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在与远程GitHub服务器建立连接时禁用TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITHUB_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_GITLAB_CLIENT_ID</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITLAB_CLIENT_ID</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置GitLab OAuth客户端ID。这是用来代表Drone用户授权访问GitLab的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITLAB_CLIENT_ID=05136e57d80189bef462</td></tr></tbody></table></li><li><p>DRONE_GITLAB_CLIENT_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITLAB_CLIENT_SECRET</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置GitLab OAuth客户端秘密。这是用来代表Drone用户授权访问GitLab的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITLAB_CLIENT_SECRET=7c229228a77d2cbddaa61ddc78d45e</td></tr></tbody></table></li><li><p>DRONE_GITLAB_SERVER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITLAB_SERVER</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置GitLab服务器地址。</td></tr><tr><td align="center">默认值</td><td align="left"><code>https://gitlab.com</code></td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITLAB_SERVER=<code>https://gitlab.com</code></td></tr></tbody></table></li><li><p>DRONE_GITLAB_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GITLAB_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在与远程GitLab服务器建立连接时禁用TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GITLAB_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_GOGS_SERVER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GOGS_SERVER</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置Gogs服务器地址。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GOGS_SERVER=<code>https://try.gogs.io</code></td></tr></tbody></table></li><li><p>DRONE_GOGS_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_GOGS_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值用于配置与远程Gogs服务器建立连接时的TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_GOGS_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_JSONNET_ENABLED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_JSONNET_ENABLED</td></tr><tr><td align="center">解释</td><td align="left">布尔值用于配置Drone自动将以<code>.jsonnet</code>结尾的配置文件转换为yaml。这在默认情况下是禁用的，只应在受信任的环境中启用。</td></tr><tr><td align="center">默认值</td><td align="left">true</td></tr><tr><td align="center">示例</td><td align="left">DRONE_JSONNET_ENABLED=true</td></tr></tbody></table></li><li><p>DRONE_LICENSE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LICENSE</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值提供Drone企业版许可密钥的文件路径。这用于解锁Drone企业版。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LICENSE=/etc/drone.key ；如果你在Docker容器中运行Drone服务器，你将需要把许可证密钥挂载为一个卷。$ docker run –volume=/path/on/host/drone.key:/etc/drone.key;如果你使用docker-compose或Kubernetes运行Drone服务器，或者你使用Yaml配置了Drone，你可以将许可证密钥作为环境变量提供给服务器。DRONE_LICENSE: `</td></tr></tbody></table></li><li><p>DRONE_LOGS_COLOR</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LOGS_COLOR</td></tr><tr><td align="center">解释</td><td align="left">启用日志的彩色格式化；与漂亮的打印日志一起使用。这个配置参数的类型是布尔值，是可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LOGS_COLOR=false/true</td></tr></tbody></table></li><li><p>DRONE_LOGS_DEBUG</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LOGS_DEBUG</td></tr><tr><td align="center">解释</td><td align="left">启用调试日志。这个配置参数的类型是布尔值，是可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LOGS_DEBUG=true/false</td></tr></tbody></table></li><li><p>DRONE_LOGS_PRETTY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LOGS_PRETTY</td></tr><tr><td align="center">解释</td><td align="left">启用人类可读的日志，作为默认json格式的替代。这个配置参数的类型是布尔值，是可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LOGS_PRETTY=true/false</td></tr></tbody></table></li><li><p>DRONE_LOGS_TEXT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LOGS_TEXT</td></tr><tr><td align="center">解释</td><td align="left">启用人类可读的日志，作为默认json格式的替代。这个配置参数的类型是布尔值，是可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LOGS_TEXT=true/false</td></tr></tbody></table></li><li><p>DRONE_LOGS_TRACE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LOGS_TRACE</td></tr><tr><td align="center">解释</td><td align="left">启用跟踪记录。这个配置参数的类型是布尔值，是可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LOGS_TRACE=true/false</td></tr></tbody></table></li><li><p>DRONE_PROMETHEUS_ANONYMOUS_ACCESS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_PROMETHEUS_ANONYMOUS_ACCESS</td></tr><tr><td align="center">解释</td><td align="left">布尔值用于配置Prometheus度量衡端点允许匿名访问。这在默认情况下是禁用的，需要认证令牌来访问度量衡端点。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_PROMETHEUS_ANONYMOUS_ACCESS=false</td></tr></tbody></table></li><li><p>DRONE_REGISTRATION_CLOSED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_REGISTRATION_CLOSED</td></tr><tr><td align="center">解释</td><td align="left">布尔值禁用开放注册。如果启用，系统管理员必须在用户登录前创建用户账户。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_REGISTRATION_CLOSED=false</td></tr></tbody></table></li><li><p>DRONE_REPOSITORY_FILTER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_REPOSITORY_FILTER</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的账户列表，用于限制源码控制系统和Drone之间同步的存储库。请注意，这个变量必须在你第一次登录之前设置。在已经验证并同步了你的账户后设置这个变量没有任何效果。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_REPOSITORY_FILTER=octocat,spacheghost</td></tr></tbody></table></li><li><p>DRONE_RPC_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_SECRET</td></tr><tr><td align="center">解释</td><td align="left">要求的字面价值提供Drone共享秘密。这用于验证与服务器的RPC连接。服务器和运行者必须提供相同的秘密值。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_SECRET=correct-horse-batter-staple</td></tr></tbody></table></li><li><p>DRONE_S3_BUCKET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_S3_BUCKET</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值，配置S3桶的名称</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_S3_BUCKET=my-bucket</td></tr></tbody></table></li><li><p>DRONE_S3_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_S3_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值用于配置S3端点。通常用于与S3兼容的服务，如Minio。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_S3_ENDPOINT=<code>https://play.min.io</code></td></tr></tbody></table></li><li><p>DRONE_S3_PATH_STYLE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_S3_PATH_STYLE</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值将S3客户端配置为使用路径风格。这通常用于与S3兼容的服务，如Minio。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_S3_PATH_STYLE=false</td></tr></tbody></table></li><li><p>DRONE_S3_PREFIX</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_S3_PREFIX</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值，配置S3客户端将日志文件存储在一个桶的子目录。如果没有设置，日志文件将存储在桶的根目录中。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_S3_PREFIX=some/path</td></tr></tbody></table></li><li><p>DRONE_SERVER_HOST</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SERVER_HOST</td></tr><tr><td align="center">解释</td><td align="left">必要的字符串值配置面向用户的主机名。这个值被用来创建webhooks和重定向url。它对服务流量没有实际影响。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SERVER_HOST=drone.company.com</td></tr></tbody></table></li><li><p>DRONE_SERVER_PROTO</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SERVER_PROTO</td></tr><tr><td align="center">解释</td><td align="left">必要的字符串值配置面向用户的协议。这个值用于创建webhooks和重定向url。它对服务流量没有实际影响。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SERVER_PROTO=https</td></tr></tbody></table></li><li><p>DRONE_SERVER_PROXY_HOST</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SERVER_PROXY_HOST</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值，用于创建通过另一个代理服务器路由的webhooks。这个设置的目标用例是当你的服务器在防火墙后面，你需要GitHub的webhooks通过公共代理路由。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SERVER_PROXY_HOST=external.drone.company.com</td></tr></tbody></table></li><li><p>DRONE_SERVER_PROXY_PROTO</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SERVER_PROXY_PROTO</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值，用于创建通过另一个代理服务器路由的webhooks。这个设置的目标用例是当你的服务器在防火墙后面，你需要GitHub的webhooks通过公共代理路由。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SERVER_PROXY_PROTO=https</td></tr></tbody></table></li><li><p>DRONE_STARLARK_ENABLED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STARLARK_ENABLED</td></tr><tr><td align="center">解释</td><td align="left">布尔值用于配置Drone自动执行以.star结尾的文件，以提供你的管道配置。这在默认情况下是禁用的。该功能需要Drone服务器版本1.10.0或更高。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STARLARK_ENABLED=true</td></tr></tbody></table></li><li><p>DRONE_STARLARK_STEP_LIMIT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STARLARK_STEP_LIMIT</td></tr><tr><td align="center">解释</td><td align="left">整数值。设置starlark配置可以产生的最大步骤数。默认是50000。该功能需要Drone服务器2.2.1版或更高版本。</td></tr><tr><td align="center">默认值</td><td align="left">50000</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STARLARK_STEP_LIMIT=100000</td></tr></tbody></table></li><li><p>DRONE_STASH_CONSUMER_KEY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STASH_CONSUMER_KEY</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置你的Bitbucket服务器消费者密钥</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STASH_CONSUMER_KEY=OauthKey</td></tr></tbody></table></li><li><p>DRONE_STASH_PRIVATE_KEY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STASH_PRIVATE_KEY</td></tr><tr><td align="center">解释</td><td align="left">字符串值用于配置Bitbucket服务器私钥文件的路径。注意，这个文件也需要作为一个卷装入Drone服务器容器中。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STASH_PRIVATE_KEY=/etc/bitbucket/key.pem</td></tr></tbody></table></li><li><p>DRONE_STASH_SERVER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STASH_SERVER</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置Bitbucket服务器地址。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STASH_SERVER=<code>https://bitbucket.company.com</code></td></tr></tbody></table></li><li><p>DRONE_STASH_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STASH_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在与远程Bitbucket服务器建立连接时禁用TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STASH_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_STATUS_DISABLED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STATUS_DISABLED</td></tr><tr><td align="center">解释</td><td align="left">布尔值禁止系统使用状态API向源控制管理系统传递构建状态。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_STATUS_DISABLED=true</td></tr></tbody></table></li><li><p>DRONE_STATUS_NAME</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_STATUS_NAME</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置用于向源控制管理系统传达构建状态的状态名称。默认值是<code>continuous-integration/drone</code>。</td></tr><tr><td align="center">默认值</td><td align="left"><code>continuous-integration/drone</code></td></tr><tr><td align="center">示例</td><td align="left">DRONE_STATUS_NAME=continuous-integration/drone</td></tr></tbody></table></li><li><p>DRONE_TLS_AUTOCERT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_TLS_AUTOCERT</td></tr><tr><td align="center">解释</td><td align="left">使用Lets Encrypt自动生成一个SSL证书，并配置服务器接受HTTPS请求。这个配置参数的类型是布尔值，是可选的，默认情况下是禁用的。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_TLS_AUTOCERT=true</td></tr></tbody></table></li><li><p>DRONE_TLS_CERT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_TLS_CERT</td></tr><tr><td align="center">解释</td><td align="left">服务器用于接受HTTPS请求的SSL证书的路径。这个配置参数的类型是字符串，是可选的。<strong>请注意，证书文件应该是服务器的证书、任何中介机构和证书颁发机构的证书的串联。</strong></td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_TLS_CERT=/path/to/cert.pem</td></tr></tbody></table></li><li><p>DRONE_TLS_KEY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_TLS_KEY</td></tr><tr><td align="center">解释</td><td align="left">服务器用于接受HTTPS请求的SSL证书密钥的路径。这个配置参数的类型是字符串，是可选的。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_TLS_KEY=/path/to/key.pem</td></tr></tbody></table></li><li><p>DRONE_USER_CREATE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_USER_CREATE</td></tr><tr><td align="center">解释</td><td align="left">可选的用户账户，应该在启动时创建。这应该是用来给系统播种的一个管理账户。它可以是一个真实的账户（即一个真实的GitHub用户），也可以是一个机器账户。 为机器账户提供一个令牌是必须的，而且必须是32字节。你可以用以下命令生成一个随机的32字节的令牌。<code>openssl rand -hex 16</code> 55f24eb3d61ef6ac5e83d550178638dc</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_USER_CREATE=username:octocat,machine:false,admin:true,token:55f24eb3d61ef6ac5e83d550178638dc</td></tr></tbody></table></li><li><p>DRONE_USER_FILTER</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_USER_FILTER</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的账户列表。注册仅限于此列表中的用户，或属于此列表中的组织成员的用户。<strong>如果一个用户试图注册，而他们不是一个命名的用户，也不是一个命名的组织的成员，他们将收到以下错误。 登录失败。用户必须是一个被批准的组织的成员。</strong></td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_USER_FILTER=octocat,spacheghost,github</td></tr></tbody></table></li><li><p>DRONE_VALIDATE_PLUGIN_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_VALIDATE_PLUGIN_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置验证插件的端点，用于为你的管道配置强制执行自定义提示规则。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_VALIDATE_PLUGIN_ENDPOINT=<code>http://hostname.com:3000</code></td></tr></tbody></table></li><li><p>DRONE_VALIDATE_PLUGIN_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_VALIDATE_PLUGIN_SECRET</td></tr><tr><td align="center">解释</td><td align="left">用于创建http-signature的共享秘密。验证插件使用该共享秘密来验证请求的真实性。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_VALIDATE_PLUGIN_SECRET=correct-horse-battery-staple</td></tr></tbody></table></li><li><p>DRONE_VALIDATE_PLUGIN_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_VALIDATE_PLUGIN_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在建立与远程验证插件的连接时禁用TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_VALIDATE_PLUGIN_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_WEBHOOK_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_WEBHOOK_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">字符串值配置了一个以逗号分隔的webhook端点列表，全局系统事件将被传递到该列表。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_WEBHOOK_ENDPOINT=<code>http://postb.in/b/cajf7cIU</code></td></tr></tbody></table></li><li><p>DRONE_WEBHOOK_EVENTS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_WEBHOOK_EVENTS</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值提供了一个以逗号分隔的触发webhooks的事件和行动的列表。如果不设置，所有的事件和动作都会触发webhooks。</td></tr><tr><td align="center">默认值</td><td align="left"></td></tr><tr><td align="center">示例</td><td align="left">按事件类型限制: </br> DRONE_WEBHOOK_EVENTS=user,build </br>  按事件类型和行动限制 : </br> DRONE_WEBHOOK_EVENTS=user:created,repo </br> 可用的事件列表: </br> user:created </br> user:updated </br> user:deleted </br> repo:enabled </br> repo:disabled </br> repo:updated </br> build:created </br>  build:updated</td></tr></tbody></table></li><li><p>DRONE_WEBHOOK_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_WEBHOOK_SECRET</td></tr><tr><td align="center">解释</td><td align="left">用于创建http-signature的共享秘密。webhook接收者可以使用共享秘密来验证请求的真实性。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_WEBHOOK_SECRET=correct-horse-battery-staple</td></tr></tbody></table></li><li><p>DRONE_WEBHOOK_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_WEBHOOK_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">布尔值在建立与远程webhook地址的连接时禁用TLS验证。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_WEBHOOK_SKIP_VERIFY=false</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>Droen</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Droen-Runner 环境变量</title>
    <link href="/blog/2022/07/25/docker/drone-runner-env/"/>
    <url>/blog/2022/07/25/docker/drone-runner-env/</url>
    
    <content type="html"><![CDATA[<h3 id="drone环境变量"><a href="#drone环境变量" class="headerlink" title="drone环境变量"></a>drone环境变量</h3><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://docs.drone.io/runner/docker/configuration/reference/">Reference Index of server configuration settings</a></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>文档翻译为<a href="https://www.deepl.com/">Deepl</a>机翻。</li><li>默认值：无，仅表示翻译过程中并未直接指出该环境变量的值是什么。</li><li>此翻译，仅供参数。</li><li>docker镜像版本为<code>drone/drone-runner-docker:1</code>下环境变量解释。</li></ol><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ol><li><p>DRONE_CPU_PERIOD</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CPU_PERIOD</td></tr><tr><td align="center">解释</td><td align="left">可选的整数值。指定CPU CFS调度器的周期，与CPU配额一起使用。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CPU_PERIOD=100000</td></tr></tbody></table></li><li><p>DRONE_CPU_QUOTA</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CPU_QUOTA</td></tr><tr><td align="center">解释</td><td align="left">可选的整数值。对所有管道容器施加一个CPU CFS配额。容器在节流之前，每一个CPU周期的微秒数限制。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CPU_QUOTA=100</td></tr></tbody></table></li><li><p>DRONE_CPU_SET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CPU_SET</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的字符串值。限制一个管道容器可以使用的特定CPU或核心。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CPU_SET=1,3</td></tr></tbody></table></li><li><p>DRONE_CPU_SHARES</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_CPU_SHARES</td></tr><tr><td align="center">解释</td><td align="left">可选的整数值。将此标志设置为大于或小于默认值1024的值，以增加或减少管道容器的重量，并使其能够获得更大或更小比例的主机CPU周期。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_CPU_SHARES=1024</td></tr></tbody></table></li><li><p>DRONE_DEBUG</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DEBUG</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。启用调试级别的日志记录。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DEBUG=true</td></tr></tbody></table></li><li><p>DRONE_DEFER_TAIL_LOG</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DEFER_TAIL_LOG</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。启用新的日志生命周期，以帮助防止日志被截断。在1.8.1版本中可用。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DEFER_TAIL_LOG=true</td></tr></tbody></table></li><li><p>DRONE_DOCKER_CONFIG</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DOCKER_CONFIG</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供Docker config.json文件的路径，用于从第三方系统中获取注册表的凭证。 <strong>请注意，你通常需要把这个文件从主机装入你的Docker容器。注意上面定义的配置路径应该指向容器内的文件路径。</strong></td></tr><tr><td align="center">默认值</td><td align="left"></td></tr><tr><td align="center">示例</td><td align="left">DRONE_DOCKER_CONFIG=/root/.docker/config.json </br> docker run –volume /root/.docker/config.json:/root/.docker/config.json</td></tr></tbody></table></li><li><p>DRONE_DOCKER_NETWORK_ID</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DOCKER_NETWORK_ID</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。指定要创建的docker网络的名称。默认情况下，它是一个随机字符串。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DOCKER_NETWORK_ID=named_network</td></tr></tbody></table></li><li><p>DRONE_DOCKER_STREAM_PULL</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_DOCKER_STREAM_PULL</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。禁止将Docker pull的输出写到构建日志中。</td></tr><tr><td align="center">默认值</td><td align="left">true</td></tr><tr><td align="center">示例</td><td align="left">DRONE_DOCKER_STREAM_PULL=true</td></tr></tbody></table></li><li><p>DRONE_ENV_PLUGIN_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_ENV_PLUGIN_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供用于向外部环境变量插件发出http请求的端点。外部环境变量插件可用于从第三方系统获取自定义管道环境变量。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_ENV_PLUGIN_ENDPOINT=<code>http://1.2.3.4:3000</code></td></tr></tbody></table></li><li><p>DRONE_ENV_PLUGIN_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_ENV_PLUGIN_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。在向插件端点发出http请求时禁用SSL验证。这是不安全的，不推荐。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_ENV_PLUGIN_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_ENV_PLUGIN_TOKEN</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_ENV_PLUGIN_TOKEN</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供用于验证对插件端点的http请求的秘密令牌。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_ENV_PLUGIN_TOKEN=bea26a2221fd8090ea38720fc445eca6</td></tr></tbody></table></li><li><p>DRONE_HTTP_BIND</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_HTTP_BIND</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值用于配置http监听器的端口。默认值是:3000。不建议重写这个值。</td></tr><tr><td align="center">默认值</td><td align="left">3000</td></tr><tr><td align="center">示例</td><td align="left">DRONE_HTTP_BIND=:3000</td></tr></tbody></table></li><li><p>DRONE_HTTP_HOST</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_HTTP_HOST</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值，用于配置http监听器的主机名。默认值是一个空字符串。不建议设置此值。</td></tr><tr><td align="center">默认值</td><td align="left"><code>&quot;&quot;</code></td></tr><tr><td align="center">示例</td><td align="left">DRONE_HTTP_HOST=runner.company.com:3000</td></tr></tbody></table></li><li><p>DRONE_HTTP_PROTO</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_HTTP_PROTO</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值用于配置http监听器协议。默认值是http。不建议重写这个值。</td></tr><tr><td align="center">默认值</td><td align="left">http</td></tr><tr><td align="center">示例</td><td align="left">DRONE_HTTP_PROTO=http</td></tr></tbody></table></li><li><p>DRONE_LIMIT_EVENTS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LIMIT_EVENTS</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的字符串值。提供可由该运行器处理的构建事件的白名单。这提供了一个额外的安全层，以限制该运行器可以处理的工作负载的种类。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LIMIT_EVENTS=push,tag</td></tr></tbody></table></li><li><p>DRONE_LIMIT_REPOS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LIMIT_REPOS</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的字符串值。配置运行器，使其只处理匹配的存储库。这提供了一个额外的安全层，可以阻止不受信任的存储库使用该运行器执行管道。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LIMIT_REPOS=octocat/hello-world,spaceghost/*</td></tr></tbody></table></li><li><p>DRONE_LIMIT_TRUSTED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_LIMIT_TRUSTED</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。配置运行器，使其只处理受信任的存储库。这提供了一个额外的安全层，可以阻止不受信任的存储库与该运行器一起执行管道。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_LIMIT_TRUSTED=true</td></tr></tbody></table></li><li><p>DRONE_MEMORY_LIMIT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_MEMORY_LIMIT</td></tr><tr><td align="center">解释</td><td align="left">可选的整数值。单个流水线容器可以使用的最大内存量，以字节为单位配置。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_MEMORY_LIMIT=500000000</td></tr></tbody></table></li><li><p>DRONE_MEMORY_SWAP_LIMIT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_MEMORY_SWAP_LIMIT</td></tr><tr><td align="center">解释</td><td align="left">可选的整数值。允许单个流水线容器交换到磁盘的最大内存量，以字节为单位进行配置。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_MEMORY_SWAP_LIMIT=500000000</td></tr></tbody></table></li><li><p>DRONE_NETRC_CLONE_ONLY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_NETRC_CLONE_ONLY</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。配置运行器，使其仅在克隆步骤中注入克隆凭证。<strong>请注意，如果版本库是私有的或需要认证才能克隆，Drone 会将克隆凭证注入所有管道步骤；如果版本库是公共的，Drone 不会将凭证注入管道步骤。</strong></td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_NETRC_CLONE_ONLY=true</td></tr></tbody></table></li><li><p>DRONE_REGISTRY_PLUGIN_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_REGISTRY_PLUGIN_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供用于向外部注册表插件发出http请求的端点。外部注册表插件可用于从第三方系统获取注册表凭证。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_REGISTRY_PLUGIN_ENDPOINT=<code>http://1.2.3.4:3000</code></td></tr></tbody></table></li><li><p>DRONE_REGISTRY_PLUGIN_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_REGISTRY_PLUGIN_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。在向注册表插件端点发出http请求时禁用SSL验证。这是不安全的，不推荐。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_REGISTRY_PLUGIN_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_REGISTRY_PLUGIN_TOKEN</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_REGISTRY_PLUGIN_TOKEN</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供用于验证对注册表插件端点的http请求的令牌。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_REGISTRY_PLUGIN_TOKEN=bea26a2221fd8090ea38720fc445eca6</td></tr></tbody></table></li><li><p>DRONE_RPC_DUMP_HTTP</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_DUMP_HTTP</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。启用将http请求和响应转储到日志中的功能，以便进行调试。这应该只在调试运行器和服务器之间的连接问题时启用</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_DUMP_HTTP=true</td></tr></tbody></table></li><li><p>DRONE_RPC_DUMP_HTTP_BODY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_DUMP_HTTP_BODY</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。启用将http请求和响应体转储到日志中以进行调试。这应该只在调试运行器和服务器之间的连接问题时启用。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_DUMP_HTTP_BODY=true</td></tr></tbody></table></li><li><p>DRONE_RPC_HOST</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_HOST</td></tr><tr><td align="center">解释</td><td align="left">必要的字符串值。定义用于连接Drone服务器的主机名（和可选端口）。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_HOST=drone.company.com</td></tr></tbody></table></li><li><p>DRONE_RPC_PROTO</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_PROTO</td></tr><tr><td align="center">解释</td><td align="left">必要的字符串值。定义用于连接Drone服务器的协议。该值必须是 http 或 https。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_PROTO=https</td></tr></tbody></table></li><li><p>DRONE_RPC_SECRET</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_SECRET</td></tr><tr><td align="center">解释</td><td align="left">必要的字符串值。提供Drone服务器用于验证http请求的共享秘密。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6</td></tr></tbody></table></li><li><p>DRONE_RPC_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RPC_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。在向Drone服务器发出http请求时禁用SSL验证。这是不安全的，不建议使用。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RPC_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_RUNNER_CAPACITY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_CAPACITY</td></tr><tr><td align="center">解释</td><td align="left">可选的数字值。限制运行器可以执行的并发管线的数量。运行器默认执行2条并发管道。</td></tr><tr><td align="center">默认值</td><td align="left">2</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_CAPACITY=10</td></tr></tbody></table></li><li><p>DRONE_RUNNER_CLONE_IMAGE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_CLONE_IMAGE</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。覆盖用于克隆版本库的Docker镜像。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_CLONE_IMAGE=drone/git:1</td></tr></tbody></table></li><li><p>DRONE_RUNNER_DEVICES</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_DEVICES</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的列表。提供被安装到每个管道步骤中的设备的列表。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_DEVICES=/dev/sdb</td></tr></tbody></table></li><li><p>DRONE_RUNNER_ENV_FILE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_ENV_FILE</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供环境变量文件的路径，用于定义注入所有管道步骤中的全局环境变量。<a href="https://github.com/joho/godotenv/blob/main/README.md">这里记录了环境文件的格式</a>。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_ENV_FILE=/etc/drone.conf </br> 记住要把这个文件从主机装入Docker容器。注意上面定义的配置路径应该指向容器内的文件路径。</br> docker run –volume /etc/drone.conf:/etc/drone.conf</td></tr></tbody></table></li><li><p>DRONE_RUNNER_ENVIRON</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_ENVIRON</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串映射。提供一组注入到每个管道步骤的全局环境变量。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_ENVIRON=foo:bar,baz:qux</td></tr></tbody></table></li><li><p>DRONE_RUNNER_LABELS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_LABELS</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串映射。提供一组标签，用于将管道路由到特定机器或一组机器。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_LABELS=foo:bar,baz:qux</td></tr></tbody></table></li><li><p>DRONE_RUNNER_MAX_PROCS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_MAX_PROCS</td></tr><tr><td align="center">解释</td><td align="left">可选的数字值。限制一个运行器可以为一个管道执行的并发步骤的数量。这在默认情况下是禁用的。如果你需要节制最大的并行步骤数量以防止资源耗尽，这可能是有用的。</td></tr><tr><td align="center">默认值</td><td align="left">0</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_MAX_PROCS=10</td></tr></tbody></table></li><li><p>DRONE_RUNNER_NAME</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_NAME</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。设置运行器的名称。跑步者的名字存储在服务器中，可以用来追溯到一个特定的跑步者。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_NAME=ec2-43-21.us-east-1.compute.amazonaws.com</td></tr></tbody></table></li><li><p>DRONE_RUNNER_NETWORKS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_NETWORKS</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的列表。提供连接到每个管道步骤的Docker网络的列表。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_NETWORKS=networkA,networkB</td></tr></tbody></table></li><li><p>DRONE_RUNNER_PRIVILEGED_IMAGES</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_PRIVILEGED_IMAGES</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的列表。提供一个默认作为特权容器启动的Docker镜像的列表。<strong>特权模式有效地授予容器对主机的根权限。请慎重使用</strong></td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_PRIVILEGED_IMAGES=plugins/docker,plugin/ecr</td></tr></tbody></table></li><li><p>DRONE_RUNNER_SECRETS</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_SECRETS</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串映射。提供一组全局的、命名的秘密，供所有管道使用。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_SECRETS=username:bar,password:qux</td></tr></tbody></table></li><li><p>DRONE_RUNNER_VOLUMES</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_RUNNER_VOLUMES</td></tr><tr><td align="center">解释</td><td align="left">可选的逗号分隔的列表。提供挂载到每个管道步骤中的Docker卷的列表。在下面的例子中，冒号左边的路径是主机的路径。右边的路径是你的管道容器内的路径</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_RUNNER_VOLUMES=/path/on/host:/path/in/container</td></tr></tbody></table></li><li><p>DRONE_SECRET_PLUGIN_ENDPOINT</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SECRET_PLUGIN_ENDPOINT</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供用于向外部秘密插件发出http请求的端点。外部秘密插件（如vault）可用于从第三方系统获取秘密。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SECRET_PLUGIN_ENDPOINT=<code>http://1.2.3.4:3000</code></td></tr></tbody></table></li><li><p>DRONE_SECRET_PLUGIN_SKIP_VERIFY</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SECRET_PLUGIN_SKIP_VERIFY</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。在向插件端点发出http请求时禁用SSL验证。这是不安全的，不推荐。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SECRET_PLUGIN_SKIP_VERIFY=false</td></tr></tbody></table></li><li><p>DRONE_SECRET_PLUGIN_TOKEN</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_SECRET_PLUGIN_TOKEN</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。提供用于验证对插件端点的http请求的秘密令牌。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_SECRET_PLUGIN_TOKEN=bea26a2221fd8090ea38720fc445eca6</td></tr></tbody></table></li><li><p>DRONE_TMATE_ENABLED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_TMATE_ENABLED</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。启用使用tmate的管道容器的远程ssh访问。托管服务和自我托管服务都被支持。这个功能默认是禁用的。这个功能需要1.6.1版本的docker runner和更高版本。</td></tr><tr><td align="center">默认值</td><td align="left">false</td></tr><tr><td align="center">示例</td><td align="left">DRONE_TMATE_ENABLED=true </br> 请注意，你也可以使用下面的配置参数来配置一个自我托管的tmate服务器。请参阅官方的tmate文档以了解更多关于自我托管tmate服务器的信息。</br> <code>DRONE_TMATE_ENABLED=true</code> </br> <code>DRONE_TMATE_HOST=tmate.company.com</code> </br> <code>DRONE_TMATE_PORT=2200</code> </br> <code>DRONE_TMATE_FINGERPRINT_RSA=SHA256:iL3StSCmPU+7p2IoD8y0huMXRVFIZyGFZa8r+lO3U5I</code> </br> <code>DRONE_TMATE_FINGERPRINT_ED25519=SHA256:gXLaN8IUxUMmlm/xu7M2NEFMlbUr5UORUgMi86Kh+tI</code></td></tr></tbody></table></li><li><p>DRONE_TRACE</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_TRACE</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。启用跟踪级别的日志记录。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_TRACE=true</td></tr></tbody></table></li><li><p>DRONE_UI_DISABLED</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_UI_DISABLED</td></tr><tr><td align="center">解释</td><td align="left">可选的布尔值。禁用运行器的用户界面。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_UI_DISABLE=true</td></tr></tbody></table></li><li><p>DRONE_UI_PASSWORD</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_UI_PASSWORD</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。设置基本认证密码，用于认证和访问网络仪表板。如果没有提供密码，网络仪表板将被禁用。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_UI_PASSWORD=root</td></tr></tbody></table></li><li><p>DRONE_UI_REALM</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_UI_REALM</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。设置用于验证和访问网络仪表板的基本认证境界。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_UI_REALM=DroneRealm</td></tr></tbody></table></li><li><p>DRONE_UI_USERNAME</p><table><thead><tr><th align="center">描述</th><th align="left">定义</th></tr></thead><tbody><tr><td align="center">环境变量</td><td align="left">DRONE_UI_USERNAME</td></tr><tr><td align="center">解释</td><td align="left">可选的字符串值。设置用于验证和访问网络仪表板的基本认证用户名。</td></tr><tr><td align="center">默认值</td><td align="left">无</td></tr><tr><td align="center">示例</td><td align="left">DRONE_UI_USERNAME=root</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>Droen</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>通过docker-compose部署mysql</title>
    <link href="/blog/2022/07/22/docker/mysql/"/>
    <url>/blog/2022/07/22/docker/mysql/</url>
    
    <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ol><li>Linux 版本：CentOS 7.9 64位操作系统</li><li>Docker 版本：19.03</li><li>Docker Compose 版本：v2.7.0</li></ol><h4 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h4><ol><li><a href="https://dev.mysql.com/doc/refman/5.7/en/docker-mysql-getting-started.html">Basic Steps for MySQL Server Deployment with Docker</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/docker-mysql-more-topics.html#docker-persisting-data-configuration">More Topics on Deploying MySQL Server with Docker</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/compose">Docker-从入门到实践</a></li><li><a href="https://docs.docker.com/compose/reference/">Overview of docker compose CLI</a></li></ol><h4 id="在-data-mysql下创建文件夹"><a href="#在-data-mysql下创建文件夹" class="headerlink" title="在/data/mysql下创建文件夹"></a>在<code>/data/mysql</code>下创建文件夹</h4><blockquote><p>也可以按照自己的习惯在适当位置创建相关文件夹</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir &#123;conf,datadir,logs&#125;<br></code></pre></td></tr></table></figure><ul><li>conf：mysql配置文件所在文件夹</li><li>datadir：数据持久化文件夹</li><li>logs：日志文件夹</li></ul><h4 id="在-conf下创建文件my-cnf"><a href="#在-conf下创建文件my-cnf" class="headerlink" title="在/conf下创建文件my.cnf"></a>在<code>/conf</code>下创建文件<code>my.cnf</code></h4><p>文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[mysqld]<br>user=mysql<br># 表名参数名忽略大小写<br>lower_case_table_names=1<br><br># 设置字符集<br>character-set-server = utf8mb4<br>collation-server = utf8mb4_unicode_ci<br>init_connect=&#x27;SET NAMES utf8mb4&#x27;<br><br>#指定MySQL允许的最大连接进程数。如果在访问数据库时经常出现&quot;Too Many Connections&quot;的错误提 示，则需要增大该参数值。<br>max_connections = 2000<br>max_user_connections = 1900<br>#如果某个用户发起的连接 error 超过该数值，则该用户的下次连接将被阻塞，直到管理员执行 flush hosts ; 命令或者服务重启， 防止黑客 ， 非法的密码以及其他在链接时的错误会增加此值<br>max_connect_errors = 100000<br><br># 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB 字段一起工作时相当必要)， 每个连接独立的大小.大小动态增加。<br># 设置最大包,限制server接受的数据包大小，避免超长SQL的执行有问题 默认值为16M，当MySQL客户端或mysqld<br># 服务器收到大于 max_allowed_packet 字节的信息包时，将发出“信息包过大”错误，并关闭连接。对于某些客户端，如果通信信息包过大，在执行查询期间，可能会遇到“丢失与 MySQL 服务器的连接”错误。默认值 16M。<br>max_allowed_packet = 50M<br><br>[mysql]<br>default-character-set=utf8mb4<br>[client]<br>default-character-set=utf8mb4<br></code></pre></td></tr></table></figure><h4 id="在-mysql下创建文件docker-compose-yml"><a href="#在-mysql下创建文件docker-compose-yml" class="headerlink" title="在/mysql下创建文件docker-compose.yml"></a>在<code>/mysql</code>下创建文件<code>docker-compose.yml</code></h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.38</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">command:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--default_authentication_plugin=mysql_native_password</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--character-set-server=utf8mb4</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--collation-server=utf8mb4_unicode_ci</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--lower_case_table_names=1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/timezone:/etc/timezone:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mysql/conf/my.cnf:/etc/my.cnf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mysql/datadir:/var/lib/mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mysql/logs:/logs</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_RANDOM_ROOT_PASSWORD=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_HOST=%</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DATABASE=gitea</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=gitea</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASSWORD=hpwMqVNj74@0C23</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br></code></pre></td></tr></table></figure><p>部分解释：</p><ul><li>==–lower_case_table_names=1==：忽略表名大小写，容器创建并运行后在配置无法生效</li><li>/data/mysql/conf/my.cnf:/etc/my.cnf：挂载配置文件</li><li>/data/mysql/datadir:/var/lib/mysql：持久化数据</li><li>/data/mysql/logs:/logs：挂载配置logs</li><li>TZ=Asia/Shanghai：设置时区</li><li>MYSQL_RANDOM_ROOT_PASSWORD=true：当这个变量为真时（这是它的默认状态，除非 MYSQL_ROOT_PASSWORD 被设置或 MYSQL_ALLOW_EMPTY_PASSWORD 设置为真），当Docker容器启动时，会为服务器的root用户生成一个随机密码。密码打印到stdout容器中，可以通过查看容器的日志找到,MYSQL_ROOT_PASSWORD和MYSQL_ALLOW_EMPTY_PASSWORD不建议使用，这样设置密码是不安全的</li><li>MYSQL_ROOT_HOST=%：默认情况下，MySQL 创建 ‘root‘@’localhost’帐户。此帐户只能从容器内部连接，如从容器内 连接到 MySQL 服务器中所述。要允许来自其他主机的 root 连接，请设置此环境变量。例如， 172.17.0.1默认值 Docker 网关 IP 允许来自运行容器的主机的连接。该选项只接受一个条目，但允许使用通配符（例如， MYSQL_ROOT_HOST=172.<em>.</em>.*或 MYSQL_ROOT_HOST=%）。</li><li>MYSQL_DATABASE=gitea：此变量允许您指定要在映像启动时创建的数据库的名称。MYSQL_USER 如果用和 提供了用户名和密码 MYSQL_PASSWORD，则创建用户并授予对此数据库的超级用户访问权（对应于GRANT ALL）。指定的数据库由 CREATE DATABASE IF NOT EXIST语句创建，因此如果数据库已经存在，则该变量无效。</li><li>MYSQL_USER=gitea和MYSQL_PASSWORD=hpwMqVNj74@0C23：这些变量一起用于创建用户并设置该用户的密码，并且该用户被授予对 MYSQL_DATABASE 变量指定的数据库的超级用户权限。MYSQL_USER 和 都是 MYSQL_PASSWORD 创建用户所必需的——如果两个变量中的任何一个未设置，则忽略另一个。如果两个变量都已设置但未设置 MYSQL_DATABASE ，则创建的用户没有任何权限。</li></ul><blockquote><p>如果您挂载的数据目录不为空，则以下任何变量都不会产生任何影响，因为那时不会尝试进行服务器初始化（有关更多详细信息，请参阅 持久化数据和配置更改 ）。文件夹中的任何预先存在的内容，包括任何旧的服务器设置，在容器启动期间都不会被修改。<br>布尔变量包括 MYSQL_RANDOM_ROOT_PASSWORD、 MYSQL_ONETIME_PASSWORD、 MYSQL_ALLOW_EMPTY_PASSWORD和 ， MYSQL_LOG_CONSOLE 通过将它们设置为任何非零长度的字符串来使它们为真。因此，将它们设置为例如 “ 0 ”、“ false ”或 “ no ”不会使它们为假，而是实际上使它们为真。这是 MySQL 服务器容器的一个已知问题<br>无需使用此机制来创建 root 超级用户，默认情况下创建超级用户时使用的密码由 和 的描述中讨论的任一机制设置 MYSQL_ROOT_PASSWORD ， MYSQL_RANDOM_ROOT_PASSWORD除非 MYSQL_ALLOW_EMPTY_PASSWORD 为真。<br>详细可以查看<a href="https://dev.mysql.com/doc/refman/5.7/en/docker-mysql-more-topics.html#docker-persisting-data-configuration">官网资料</a></p></blockquote><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><ol><li><p><code>docker compose up -d</code></p><ul><li>up：创建和启动容器</li><li>-d：后台运行</li><li>结果图如下↓<br><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1658474726944.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_ffffff,shadow_0,t_100,g_se,x_10,y_10" alt="1658474726944"></li></ul></li><li><p><code>docker logs mysql</code><br> 查看日志，部分结果图如下↓<br> <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1658474839403.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_ffffff,shadow_0,t_100,g_se,x_10,y_10" alt="1658474839403"></p></li><li><p><code>docker logs mysql 2&gt;&amp;1 | grep GENERATED</code><br> 查看mysql初始化的root用户密码</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">2022-07-22 15:24:28+08:00 [Note] [Entrypoint]: GENERATED ROOT PASSWORD: 8L4IrZFs7r8zvYBr2jm0GESRw6596L61<br></code></pre></td></tr></table></figure></li></ol><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>使用熟悉的数据库操作工具进行 ip:3306 账户：root 密码：8L4IrZFs7r8zvYBr2jm0GESRw6596L61 测试链接，连接成功时可以看到成功创建库<code>gitea</code>，用户表<code>gitea</code>成功创建，用户<code>gitea</code>对库<code>gitea</code>有所有的操作权限。通过账户：<code>gitea</code>和密码：<code>hpwMqVNj74@0C23</code>也可以成功链接。</p><h4 id="不使用docker-compose"><a href="#不使用docker-compose" class="headerlink" title="不使用docker-compose"></a>不使用docker-compose</h4><p>将docker-pompose.yml转换成docker run 来执行，其余操作不便</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mysql -p 3306:3306 --restart=always -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro -v /data/mysql/conf/my.cnf:/etc/my.cnf -v /data/mysql/datadir:/var/lib/mysql -v /data/mysql/logs:/logs -env TZ=Asia/Shanghai -env MYSQL_RANDOM_ROOT_PASSWORD=true -env MYSQL_ROOT_HOST=% -env MYSQL_DATABASE=gitea -env MYSQL_USER=gitea -env MYSQL_PASSWORD=hpwMqVNj74@0C23 -d mysql:5.7.38 --default_authentication_plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --lower_case_table_names=1<br></code></pre></td></tr></table></figure><blockquote><p><code>-env</code> 有多个也可以修改为如下格式<code>--env-file=/data/mysql/docker.env</code>,前提是创建<strong>docker.evn</strong>文件，内容如下↓</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">TZ=Asia/Shanghai<br>MYSQL_RANDOM_ROOT_PASSWORD=true<br>MYSQL_ROOT_HOST=%<br>MYSQL_DATABASE=gitea<br>MYSQL_USER=gitea<br>MYSQL_PASSWORD=hpwMqVNj74@0C23<br></code></pre></td></tr></table></figure><p>个人并未尝试上述方法，如果执行出现错误可以参考官方文档进行修改，<a href="https://docs.docker.com/engine/reference/run/">直达链接</a>。</p><h4 id="windows-环境下docker创建"><a href="#windows-环境下docker创建" class="headerlink" title="windows 环境下docker创建"></a>windows 环境下docker创建</h4><p>原理同linux环境，文件路径改为windows下绝对路径类似这样<code>--env-file=windows文件地址\mysql.env -v windows文件地址\conf\my.cnf:/etc/mysql/my.cnf</code></p>]]></content>
    
    
    <categories>
      
      <category>MySql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker-linux</tag>
      
      <tag>Docker-Compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Compose</title>
    <link href="/blog/2022/07/22/docker/docker_compose/"/>
    <url>/blog/2022/07/22/docker/docker_compose/</url>
    
    <content type="html"><![CDATA[<h3 id="Compose-CLI"><a href="#Compose-CLI" class="headerlink" title="Compose CLI"></a>Compose CLI</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ol><li>Linux版本：CentOS 7.9 64位操作系统</li><li>Docker版本：19.03</li></ol><h4 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h4><ol><li><a href="https://docs.docker.com/compose/install/compose-plugin/">Install Docker Compose plugin</a></li><li><a href="https://github.com/docker/compose">compose</a></li></ol><h4 id="下载并安装-Compose-CLI-插件"><a href="#下载并安装-Compose-CLI-插件" class="headerlink" title="下载并安装 Compose CLI 插件"></a>下载并安装 Compose CLI 插件</h4><ol><li>设置环境变量</li><li>创建<code>cli——plugins</code>文件夹</li><li>下载docker-compose<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="因为是给root账号添加所以该文件下载位置在`/root/.docker/cli-plugins/docker-compose`">[1]</span></a></sup></li></ol><p>root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">DOCKER_CONFIG=<span class="hljs-variable">$&#123;DOCKER_CONFIG:-<span class="hljs-variable">$HOME</span>/.docker&#125;</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$DOCKER_CONFIG</span>/cli-plugins<br>curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o <span class="hljs-variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose<br></code></pre></td></tr></table></figure><p>所有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /usr/local/lib/docker/cli-plugins<br>curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose<br></code></pre></td></tr></table></figure><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1658453608688.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QEJsYW5r,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="1658453608688"></p><h4 id="对二进制文件应用可执行权限"><a href="#对二进制文件应用可执行权限" class="headerlink" title="对二进制文件应用可执行权限"></a>对二进制文件应用可执行权限</h4><p>root用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$DOCKER_CONFIG</span>/cli-plugins/docker-compose<br></code></pre></td></tr></table></figure><p>所有用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> +x /usr/local/lib/docker/cli-plugins/docker-compose<br></code></pre></td></tr></table></figure><h4 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose version<br></code></pre></td></tr></table></figure><p>结果：Docker Compose version v2.7.0</p><p>到此安装成功</p><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><p>跳过下载文件步骤，创建<code>/usr/local/lib/docker/cli-plugins/</code>文件夹手动上传下载好的<code>docker-compose</code></p><p><a href="https://github.com/docker/compose/releases">docker-compose下载位置</a></p><p>执行<code>sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose</code></p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>删除二进制文件即可</p><p>root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /root/.docker/cli-plugins/docker-compose<br></code></pre></td></tr></table></figure><p>所以用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /usr/local/lib/docker/cli-plugins/docker-compose<br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>因为是给root账号添加所以该文件下载位置在<code>/root/.docker/cli-plugins/docker-compose</code><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
      <category>Docker-Compose</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker-linux</tag>
      
      <tag>Docker-Compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Comparable类</title>
    <link href="/blog/2022/06/13/java/source_code/java.long/number/Comparable/"/>
    <url>/blog/2022/06/13/java/source_code/java.long/number/Comparable/</url>
    
    <content type="html"><![CDATA[<h1 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>interface：接口</li><li><code>&lt;T&gt;</code>：泛型</li></ul><h2 id="自述"><a href="#自述" class="headerlink" title="自述"></a>自述</h2><p>这个接口对实现它的每个类的对象施加了一个总的排序。这个排序被称为该类的自然排序，而该类的compareTo方法被称为其自然比较方法。<br>实现该接口的对象的 <strong>List</strong>（和 <strong>Arrays</strong> ）可以通过<br> <code>Collections.sort</code>（和 <code>Arrays.sort</code> ）自动进行排序。实现该接口的对象可以被用作 <code> sorted map</code> 中的键或 <code>orted set</code> 中的元素，而不需要指定 <code>comparator</code> 。<br>当且仅当 <code>e1.compareTo(e2) == 0与e1.e2</code> 的布尔值相同时，类C的自然排序被称为与 <code>equals</code> 一致。 <strong>注意 :null不是任何类的实例，即使e.compareTo(null)返回false，也应该抛出NullPointerException。</strong><br>强烈建议自然排序与 <code>equals</code> 一致。这是因为没有显式比较器的排序集（和排序图）在与自然排序与等值不一致的元素（或键）一起使用时表现得很 “奇怪”。特别是，这样的排序集（或排序图）违反了集合（或地图）的一般契约，该契约是以 <code>equals</code> 来定义的。<br>例如，如果在一个没有使用显式比较器的排序集上添加两个键a和b，使得 <strong>(!a.equals(b) &amp;&amp; a.compareTo(b) == 0)</strong> ，第二次添加操作会返回false（而且排序集的大小不会增加），因为从排序集的角度来看，a和b是相等的。<br>几乎所有实现了Comparable的Java核心类都有与等值一致的自然排序。一个例外是java.math.BigDecimal，它的自然排序使BigDecimal对象的值相等而精度不同（如4.0和4.00）。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(T o)</span>;<br></code></pre></td></tr></table></figure><ul><li>Params：o - 被比较的对象。</li><li>Returns：负整数、零或正整数，因为该对象小于、等于或大于指定对象。</li><li>Throws<ul><li>NullPointerException - 如果指定的对象是空的</li><li>ClassCastException - 如果指定对象的类型使其不能与此对象进行比较</li></ul></li></ul><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>将此对象与指定的对象进行顺序比较。如果此对象小于、等于或大于指定对象，则返回一个负整数、零或正整数。实现者必须确保 <code>sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</code>  对于所有的 <code>x</code> 和 <code>y</code> 。实现者还必须确保关系是传递性的：（ <code>x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0</code> ）意味着 <code>x.compareTo(z)&gt;0</code> 。最后，实现者必须确保 <strong>x.compareTo(y)==0</strong> 意味着 <code>sgn(x.compareTo(z))==sgn(y.compareTo(z))</code> ，对于所有的 <code>z</code>。强烈建议， <code>(x.compareTo(y)==0) == (x.equals(y))</code> 。一般来说，任何实现了可比较接口的类，如果违反了这个条件，就应该明确指出这个事实。推荐的语言是 “注意：这个类的自然排序与equals不一致”。在前面的描述中，符号<code>sgn(expression)</code>指定了数学上的<code>signum</code>函数，它被定义为根据表达式的值是负的、零的还是正的，返回-1、0或1中的一个。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>自定义对象通过实现这个接口就可以通过<code>Collections.sort</code>（和 <code>Arrays.sort</code> ）自动进行排序。</p><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.crudclass.data.citation;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descriptions</span>: 用户  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span>: User  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: CRUDClass.com  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/11 14:00  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;User&gt; &#123;  <br>  <br>    <span class="hljs-comment">/** 姓名 */</span>  <br>    <span class="hljs-keyword">private</span> String name;  <br>  <br>    <span class="hljs-comment">/** 年龄 */</span>  <br>    <span class="hljs-keyword">private</span> Integer age;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, Integer age)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.age = age;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> age;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.age = age;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +  <br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +  <br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +  <br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(User o)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.getAge();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.crudclass.data.citation;  <br>  <br><span class="hljs-keyword">import</span> java.util.*;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descriptions</span>:  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span>: CitationClass  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: LiWenBo  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/11 9:59  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>  <br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张一&quot;</span>, <span class="hljs-number">66</span>));  <br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">88</span>));  <br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张五&quot;</span>, <span class="hljs-number">55</span>));  <br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张七&quot;</span>, <span class="hljs-number">44</span>));  <br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张久&quot;</span>, <span class="hljs-number">22</span>));  <br>  <br>        System.out.println(<span class="hljs-string">&quot;排序前=&quot;</span> + users.toString());  <br>        Collections.sort(users);  <br>        System.out.println(<span class="hljs-string">&quot;排序后=&quot;</span> + users.toString());  <br>  <br>        User[] users1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张一&quot;</span>, <span class="hljs-number">66</span>),  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">88</span>),  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张五&quot;</span>, <span class="hljs-number">55</span>),  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张七&quot;</span>, <span class="hljs-number">44</span>),  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张久&quot;</span>, <span class="hljs-number">22</span>)  <br>        &#125;;  <br>  <br>        System.out.println(<span class="hljs-string">&quot;排序前=&quot;</span> + Arrays.toString(users1));  <br>        Arrays.sort(users1);  <br>        System.out.println(<span class="hljs-string">&quot;排序后=&quot;</span> + Arrays.toString(users1));  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">排序前=[User&#123;name=&#x27;张一&#x27;, age=66&#125;, User&#123;name=&#x27;张三&#x27;, age=88&#125;, User&#123;name=&#x27;张五&#x27;, age=55&#125;, User&#123;name=&#x27;张七&#x27;, age=44&#125;, User&#123;name=&#x27;张久&#x27;, age=22&#125;]<br>排序后=[User&#123;name=&#x27;张久&#x27;, age=22&#125;, User&#123;name=&#x27;张七&#x27;, age=44&#125;, User&#123;name=&#x27;张五&#x27;, age=55&#125;, User&#123;name=&#x27;张一&#x27;, age=66&#125;, User&#123;name=&#x27;张三&#x27;, age=88&#125;]<br>排序前=[User&#123;name=&#x27;张一&#x27;, age=66&#125;, User&#123;name=&#x27;张三&#x27;, age=88&#125;, User&#123;name=&#x27;张五&#x27;, age=55&#125;, User&#123;name=&#x27;张七&#x27;, age=44&#125;, User&#123;name=&#x27;张久&#x27;, age=22&#125;]<br>排序后=[User&#123;name=&#x27;张久&#x27;, age=22&#125;, User&#123;name=&#x27;张七&#x27;, age=44&#125;, User&#123;name=&#x27;张五&#x27;, age=55&#125;, User&#123;name=&#x27;张一&#x27;, age=66&#125;, User&#123;name=&#x27;张三&#x27;, age=88&#125;]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java.long</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Number类</title>
    <link href="/blog/2022/06/13/java/source_code/java.long/number/Number/"/>
    <url>/blog/2022/06/13/java/source_code/java.long/number/Number/</url>
    
    <content type="html"><![CDATA[<h1 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8742448824652078965L</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> abstract：抽象类</li><li><input checked="" disabled="" type="checkbox"> implements Serializable：可序列化</li><li><input checked="" disabled="" type="checkbox"> <strong>自</strong>：JDK1.0</li></ul><h2 id="自述"><a href="#自述" class="headerlink" title="自述"></a>自述</h2><p>抽象类<code>Number</code>是代表数字值的平台类的超类，这些数字值可以转换为原始类型<code>byte</code>、<code>double</code>、<code>float</code>、<code>int</code>、<code>long</code>和<code>short</code>。从一个特定的<code>Numbe</code>r实现的数字值转换到一个给定的原始类型的具体语义由有关的<code>Number</code>实现定义。对于平台类，转换通常类似于《Java™语言规范》中定义的缩小原始类型转换或扩大原始类型转换，用于原始类型之间的转换。因此，转换可能会失去关于数值整体大小的信息，可能会失去精度，甚至可能返回一个与输入不同的符号的结果。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="intValue"><a href="#intValue" class="headerlink" title="intValue()"></a>intValue()</h3><h4 id="intValue-定义"><a href="#intValue-定义" class="headerlink" title="intValue() 定义"></a><code>intValue()</code> 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">intValue</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> public：公开的</li><li><input checked="" disabled="" type="checkbox"> abstract：抽象方法</li></ul><h4 id="intValue-解释"><a href="#intValue-解释" class="headerlink" title="intValue() 解释"></a><code>intValue()</code> 解释</h4><blockquote><p>返回指定数字的值为一个 <em><strong>int</strong></em> ，可能涉及四舍五入或截断。返回：此对象转换为 <em><strong>int</strong></em> 类型后所代表的数值</p></blockquote><h3 id="longValue"><a href="#longValue" class="headerlink" title="longValue()"></a>longValue()</h3><h4 id="longValue-定义"><a href="#longValue-定义" class="headerlink" title="longValue() 定义"></a><code>longValue()</code> 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">long</span> <span class="hljs-title function_">intValue</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> public：公开的</li><li><input checked="" disabled="" type="checkbox"> abstract：抽象方法</li></ul><h4 id="longValue-解释"><a href="#longValue-解释" class="headerlink" title="longValue() 解释"></a><code>longValue()</code> 解释</h4><blockquote><p>返回指定数字的值为一个 <em><strong>long</strong></em> ，可能涉及四舍五入或截断。返回：此对象转换为 <em><strong>long</strong></em> 类型后所代表的数值</p></blockquote><h3 id="floatValue"><a href="#floatValue" class="headerlink" title="floatValue()"></a>floatValue()</h3><h4 id="floatValue-定义"><a href="#floatValue-定义" class="headerlink" title="floatValue() 定义"></a><code>floatValue()</code> 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">float</span> <span class="hljs-title function_">floatValue</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> public：公开的</li><li><input checked="" disabled="" type="checkbox"> abstract：抽象方法</li></ul><h4 id="floatValue-解释"><a href="#floatValue-解释" class="headerlink" title="floatValue() 解释"></a><code>floatValue()</code> 解释</h4><blockquote><p>返回指定数字的值为一个 <em><strong>float</strong></em>，可能涉及四舍五入或截断。返回：此对象转换为 <em><strong>float</strong></em> 类型后所代表的数值</p></blockquote><h3 id="doubleValue"><a href="#doubleValue" class="headerlink" title="doubleValue()"></a>doubleValue()</h3><h4 id="doubleValue-定义"><a href="#doubleValue-定义" class="headerlink" title="doubleValue() 定义"></a><code>doubleValue()</code> 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doubleValue</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> public：公开的</li><li><input checked="" disabled="" type="checkbox"> abstract：抽象方法</li></ul><h4 id="doubleValue-解释"><a href="#doubleValue-解释" class="headerlink" title="doubleValue() 解释"></a><code>doubleValue()</code> 解释</h4><blockquote><p>返回指定数字的值为一个 <em><strong>double</strong></em>，可能涉及四舍五入或截断。返回：此对象转换为 <em><strong>double</strong></em> 类型后所代表的数值</p></blockquote><h3 id="byteValue"><a href="#byteValue" class="headerlink" title="byteValue()"></a>byteValue()</h3><h4 id="byteValue-定义"><a href="#byteValue-定义" class="headerlink" title="byteValue() 定义"></a><code>byteValue()</code> 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span> <span class="hljs-title function_">byteValue</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> public：公开的</li></ul><h4 id="byteValue-解释"><a href="#byteValue-解释" class="headerlink" title="byteValue() 解释"></a><code>byteValue()</code> 解释</h4><blockquote><p>返回指定数字的值为一个 <em><strong>byte</strong></em> ，可能涉及四舍五入或截断。这个实现返回<em><strong>intValue</strong></em> 转换为 <em><strong>byte</strong></em> s的结果。返回：此对象转换为<em><strong>byte</strong></em> 类型后所代表的数值</p></blockquote><p><strong>自</strong>：JDK1.1</p><h3 id="shortValue"><a href="#shortValue" class="headerlink" title="shortValue()"></a>shortValue()</h3><h4 id="shortValue-定义"><a href="#shortValue-定义" class="headerlink" title="shortValue() 定义"></a><code>shortValue()</code> 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">short</span> <span class="hljs-title function_">shortValue</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> public：公开的</li></ul><h4 id="shortValue-解释"><a href="#shortValue-解释" class="headerlink" title="shortValue() 解释"></a><code>shortValue()</code> 解释</h4><blockquote><p>返回指定数字的值为一个 <em><strong>short</strong></em> ，可能涉及四舍五入或截断。这个实现返回 <em><strong>intValue</strong></em> 转换为 <em><strong>short</strong></em> 的结果。返回：此对象转换为<em><strong>short</strong></em> 类型后所代表的数值</p></blockquote><p><strong>自</strong>：JDK1.1</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java.long</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object类 1</title>
    <link href="/blog/2022/06/13/java/source_code/java.long/object/Object/"/>
    <url>/blog/2022/06/13/java/source_code/java.long/object/Object/</url>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Object</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li><strong>自</strong>：JDK1.0</li></ul><h2 id="自述"><a href="#自述" class="headerlink" title="自述"></a>自述</h2><p>Class Object is the root of the class hierarchy. Every class has Object as a <strong>superclass</strong>. All objects, including arrays, implement the methods of this class.</p><p>类Object是类层次结构的根。<strong>每个类都有Object作为超类。所有的对象，包括数组，都实现这个类的方法</strong> 。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="registerNatives"><a href="#registerNatives" class="headerlink" title="registerNatives()"></a>registerNatives()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerNatives</span><span class="hljs-params">()</span>;  <br><span class="hljs-keyword">static</span> &#123;  <br>    registerNatives();  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>private：私有的</li><li>static：静态的</li><li>native：该方法在外部定义</li></ul><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h3><blockquote><p>返回此Object的运行时类。返回的Class对象是被代表类的静态同步方法锁定的对象。实际的结果类型是 <code>Class&lt;? extends |X|&gt;</code> ，其中 <code>|X|</code>是被调用 <code>getClass</code> 的表达式的静态类型的擦除。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass();<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>final：方法不能被继承</li><li>native：该方法在外部定义</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><blockquote><p>返回该对象的哈希代码值。支持这个方法是为了让哈希表受益，比如java.util.HashMap提供的哈希表。hashCode的一般契约是：</p><ul><li>在一个Java应用程序的执行过程中，只要对同一个对象调用多次<strong>hashCode</strong>方法就必须一致地返回相同的整数，前提是对象上的<strong>equals</strong>比较信息没有被修改。这个整数不需要在一个应用程序的一个执行过程中和同一个应用程序的另一个执行过程中保持一致。</li><li>如果根据<strong>equals(Object)</strong> 方法，两个对象是相等的，那么在两个对象上分别调用<strong>hashCode</strong>方法必须产生相同的整数结果。</li><li>如果两个对象根据<strong>equals(Object)</strong> 方法是不相等的，那么在这两个对象上调用hashCode方法必须产生不同的整数结果，这一点并不要求。然而，程序员应该知道，为不相等的对象产生不同的整数结果可能会提高哈希表的性能。  </li></ul><p>在合理可行的情况下，由Object类定义的hashCode方法确实为不同的对象返回不同的整数。(这通常是通过将对象的内部地址转换为整数来实现的，但这种实现技术并不是Java™编程语言所要求的）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>native：该方法在外部定义</li><li>Returns：返回<code>int</code>值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();  <br>System.out.println(o.hashCode());<br><br><span class="hljs-comment">// 结果460141958</span><br></code></pre></td></tr></table></figure><h3 id="equals-Object-obj"><a href="#equals-Object-obj" class="headerlink" title="equals(Object obj)"></a>equals(Object obj)</h3><blockquote><p>表示其他对象是否 “等于 “这个对象。<strong>equals</strong>方法实现了对非空对象引用的等价关系。</p><ul><li>它是自反性的：对于任何非空的参考值<em>x</em>，<strong>x.equals(x)</strong> 应该返回<strong>true</strong>。</li><li>它是对称性的：对于任何非空的参考值<strong>x</strong>和<strong>y</strong>，当且仅当<strong>y.equals(x)</strong> 返回<strong>true</strong>时，<strong>x.equals(y)</strong> 应该返回<strong>true</strong>。</li><li>它是传递性的：对于任何非空参考值<strong>x</strong>、<strong>y</strong>和<strong>z</strong>，如果<strong>x.equals(y)</strong> 返回<strong>true</strong>，<strong>y.equals(z)</strong> 返回<strong>true</strong>，那么<strong>x.equals(z)</strong> 应该返回<strong>true</strong>。</li><li>它是一致性的：对于任何非空的参考值x和y，如果在对象上的等价比较中使用的信息没有被修改，那么多次调用x.equals(y)会一致地返回<strong>true</strong>或一致地返回<strong>false</strong>。</li><li>对于任何非空的引用值<strong>x</strong>，<strong>x.equals(null)</strong> 应该返回<strong>false</strong>。</li></ul><p>请注意，一般来说，只要重写了<code>hashCode</code>方法，就必须重写这个方法，这样才能保持<code>hashCode</code>方法的一般契约，即相等的对象必须有相等的哈希代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;  <br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span> == obj);  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>Params：obj - 与之比较的参考对象</li><li>Returns：返回布尔值 <strong>true / false</strong></li></ul><h4 id="示例-equals-Object-obj"><a href="#示例-equals-Object-obj" class="headerlink" title="示例-equals(Object obj)"></a>示例-equals(Object obj)</h4><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.crudclass.data.citation;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descriptions</span>: 用户  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span>: User  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: LiWenBo  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/11 14:00  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>  <br>  <br>    <span class="hljs-comment">/** 姓名 */</span>  <br>    <span class="hljs-keyword">private</span> String name;  <br>  <br>    <span class="hljs-comment">/** 年龄 */</span>  <br>    <span class="hljs-keyword">private</span> Integer age;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, Integer age)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>        <span class="hljs-built_in">this</span>.age = age;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> age;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.age = age;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +  <br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +  <br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +  <br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.crudclass.data.citation;  <br>  <br><span class="hljs-keyword">import</span> java.util.*;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descriptions</span>:  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span>: CitationClass  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: LiWenBo  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/11 9:59  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CitationClass</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>  <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>);  <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> user;  <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> user1;  <br>        <span class="hljs-comment">// 自反性</span><br>        System.out.println(user.equals(user));   <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 对称性</span><br>        System.out.println(user.equals(user1));  <span class="hljs-comment">// true</span><br>        System.out.println(user1.equals(user));  <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 传递性</span><br>        System.out.println(user1.equals(user2)); <span class="hljs-comment">// true</span><br>        System.out.println(user.equals(user2));  <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 一致性</span><br>        System.out.println(user.equals(user1));  <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 对于任何非空的引用值x，x.equals(null)应该返回false。</span><br>        System.out.println(user.equals(<span class="hljs-literal">null</span>));   <span class="hljs-comment">// false</span><br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><blockquote><p>创建并返回此对象的一个副本。”复制 “的确切含义可能取决于对象的类别。对于任何对象x</p><ul><li>x.clone() != x，是真的</li><li>x.clone().getClass() == x.getClass()，是真的，但这些并不是绝对的要求。</li><li>x.clone().equals(x)，将会是真的，这不是一个绝对的要求</li></ul><p>按照惯例，返回的对象应该通过调用<strong>super.clone</strong>来获得。如果一个类和它的所有超类（除了<strong>Object</strong>）都遵守这个惯例，那么<strong>x.clone().getClass() == x.getClass()</strong> 的情况就会出现。根据惯例，这个方法返回的对象应该独立于这个对象（被克隆的）。为了实现这种独立性，可能需要在返回之前修改<strong>super.clone</strong>返回的对象的一个或多个字段。通常情况下，这意味着复制任何构成被克隆对象内部 “深层结构 “的可变对象，并将这些对象的引用替换为对副本的引用。如果一个类只包含原始字段或对不可变对象的引用，那么通常情况下，由super.clone返回的对象中没有字段需要被修改。<strong>Object</strong>类的<strong>clone</strong>方法执行了一个特殊的克隆操作。首先，如果这个对象的类没有实现<strong>Cloneable</strong>接口，那么会抛出一个<strong>CloneNotSupportedException</strong>。请注意，所有的<strong>数组都被认为实现了Cloneable接口</strong>，数组类型<strong>T[]</strong> 的克隆方法的返回类型是<strong>T[]<strong>，其中</strong>T</strong>是任何引用或原始类型。否则，这个方法会创建一个这个对象的类的新实例，并用这个对象的相应字段的内容来初始化它的所有字段，就像通过赋值一样；字段的内容本身不会被克隆。因此，这个方法执行了这个对象的 “浅拷贝”，而不是 “深拷贝 “操作。<strong>Object</strong>类本身并没有实现<strong>Cloneable</strong>接口，所以在一个类为<strong>Object</strong>的对象上调用<strong>clone</strong>方法会导致在运行时抛出一个异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException;<br></code></pre></td></tr></table></figure><ul><li>protected：半公开的</li><li>native：该方法在外部定义</li><li>Returns：该实例的一个克隆</li><li>Throws：<strong>CloneNotSupportedException</strong> - 如果该对象的类不实现<strong>Cloneable</strong>接口。重写克隆方法的子类也可以抛出这个异常，以表明一个实例不能被克隆。</li></ul><h4 id="示例-clone"><a href="#示例-clone" class="headerlink" title="示例-clone()"></a>示例-clone()</h4><p>User</p><p>新增如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现接口</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span><br><br><span class="hljs-comment">// 添加如下</span><br><span class="hljs-comment">/** 我的车 */</span>  <br><span class="hljs-keyword">private</span> Car car;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, Integer age, Car car)</span> &#123;  <br>    <span class="hljs-built_in">this</span>.name = name;  <br>    <span class="hljs-built_in">this</span>.age = age;  <br>    <span class="hljs-built_in">this</span>.car = car;  <br>&#125;<br><br><span class="hljs-keyword">public</span> Car <span class="hljs-title function_">getCar</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> car;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCar</span><span class="hljs-params">(Car car)</span> &#123;  <br>    <span class="hljs-built_in">this</span>.car = car;  <br>&#125;<br><br><span class="hljs-comment">/** 浅拷贝 */</span><br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;  <br>    <span class="hljs-keyword">return</span> (User) <span class="hljs-built_in">super</span>.clone();  <br>&#125;  <br><span class="hljs-comment">// 修改toString方法</span><br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +  <br>            <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +  <br>            <span class="hljs-string">&quot;, age=&quot;</span> + age +  <br>            <span class="hljs-string">&quot;, car=&quot;</span> + car.toString() +  <br>            <span class="hljs-string">&#x27;&#125;&#x27;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>Car</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.crudclass.data.citation;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descriptions</span>: 车  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@classname</span>: Car  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: LiWenBo  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/11 16:13  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;  <br>  <br>    <span class="hljs-comment">/** 车辆牌号 */</span>  <br>    <span class="hljs-keyword">private</span> String brand;  <br>  <br>    <span class="hljs-comment">/** 车型号 */</span>  <br>    <span class="hljs-keyword">private</span> String model;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String brand, String model)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.brand = brand;  <br>        <span class="hljs-built_in">this</span>.model = brand;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBrand</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> brand;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBrand</span><span class="hljs-params">(String brand)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.brand = brand;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getModel</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> model;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setModel</span><span class="hljs-params">(String model)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.model = model;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car&#123;&quot;</span> + <span class="hljs-string">&quot;brand=&#x27;&quot;</span> + brand + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, model=&#x27;&quot;</span> + model + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&#x27;&#125;&#x27;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>Main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// main 方法如下变更</span><br><span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;蒙A 99999&quot;</span>, <span class="hljs-string">&quot;宝马M3&quot;</span>);  <br>  <br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>, car);  <br><span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> (User) user.clone();  <br>  <br>System.out.println(<span class="hljs-string">&quot;user= &quot;</span> + user.toString());    <span class="hljs-comment">// user= User&#123;name=&#x27;张三&#x27;, age=18, car=Car&#123;brand=&#x27;蒙A 99999&#x27;, model=&#x27;蒙A 99999&#x27;&#125;&#125;</span><br>System.out.println(<span class="hljs-string">&quot;user1= &quot;</span> + user1.toString());  <span class="hljs-comment">// user1= User&#123;name=&#x27;张三&#x27;, age=18, car=Car&#123;brand=&#x27;蒙A 99999&#x27;, model=&#x27;蒙A 99999&#x27;&#125;&#125;</span><br>user.setName(<span class="hljs-string">&quot;张四&quot;</span>);  <br>user.setAge(<span class="hljs-number">19</span>);  <br>car.setBrand(<span class="hljs-string">&quot;吉A 11111&quot;</span>);  <br>car.setModel(<span class="hljs-string">&quot;奥迪A7&quot;</span>);  <br>System.out.println(<span class="hljs-string">&quot;user= &quot;</span> + user.toString());   <span class="hljs-comment">// user= User&#123;name=&#x27;张四&#x27;, age=19, car=Car&#123;brand=&#x27;吉A 11111&#x27;, model=&#x27;奥迪A7&#x27;&#125;&#125;</span><br>System.out.println(<span class="hljs-string">&quot;user1= &quot;</span> + user1.toString()); <span class="hljs-comment">// user1= User&#123;name=&#x27;张三&#x27;, age=18, car=Car&#123;brand=&#x27;吉A 11111&#x27;, model=&#x27;奥迪A7&#x27;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><ul><li><p>方式一<br>  Car类实现拷贝方法，修改User类<code>clone()</code>如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;  <br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) <span class="hljs-built_in">super</span>.clone();  <br>user.setCar(<span class="hljs-built_in">this</span>.car.clone());  <br><span class="hljs-keyword">return</span> user;  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二<br>  修改User类<code>clone()</code>如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;  <br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) <span class="hljs-built_in">super</span>.clone();  <br>user.setCar(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-built_in">this</span>.getCar().getBrand(),<span class="hljs-built_in">this</span>.getCar().getModel()));  <br><span class="hljs-keyword">return</span> user;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>输出变为<br>user= User{name=’张三’, age=18, car=Car{brand=’蒙A 99999’, model=’蒙A 99999’}}<br>user1= User{name=’张三’, age=18, car=Car{brand=’蒙A 99999’, model=’蒙A 99999’}}<br>user= User{name=’张四’, age=19, car=Car{brand=’吉A 11111’, model=’奥迪A7’}}<br>user1= User{name=’张三’, age=18, car=Car{brand=’蒙A 99999’, model=’蒙A 99999’}}  </p><h3 id="Object1"><a href="#Object1" class="headerlink" title="[[Object1]]"></a>[[Object1]]</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java.long</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object类 2</title>
    <link href="/blog/2022/06/13/java/source_code/java.long/object/Object1/"/>
    <url>/blog/2022/06/13/java/source_code/java.long/object/Object1/</url>
    
    <content type="html"><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><blockquote><p>返回该对象的字符串表示。一般来说，<code>toString</code>方法返回一个 “以文字表示 “该对象的字符串。其结果应该是一个简明但内容丰富的表示，便于人们阅读。我们建议所有的子类都覆盖这个方法。<br>对象类的<code>toString</code>方法返回一个字符串，该字符串由对象的实例类的名称、at-sign字符<code>@</code>和对象的无符号十六进制哈希代码组成。该方法返回一个字符串，等于：<br>getClass().getName() + ‘@’ + Integer.toHexString(hashCode())</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>Returns：该对象的String类型字符串表示</li><li>getClass().getName()：返回这个Class对象所代表的实体（类、接口、数组类、原始类型或空）的名称，为一个字符串。</li><li>Integer.toHexString(hashCode())：返回整数参数的字符串表示，是以16为基数的无符号整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();  <br>System.out.println(o.getClass().getName());  <br>System.out.println(o.hashCode());  <br>System.out.println(Integer.toHexString(o.hashCode()));  <br>System.out.println(o.toString());<br><br><span class="hljs-comment">// 结果</span><br><br>java.lang.Object<br><span class="hljs-number">460141958</span><br>1b6d3586<br>java.lang.Object@1b6d3586<br></code></pre></td></tr></table></figure><h3 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h3><blockquote><p>唤醒一个在此对象的监视器上等待的单线程。如果有任何线程在此对象上等待，则会选择其中一个线程被唤醒。这个选择是任意的，由实现者决定。一个线程通过调用其中一个wait方法在对象的监视器上进行等待。被唤醒的线程将不能继续工作，直到当前线程放弃对该对象的锁。被唤醒的线程将以通常的方式与任何其他可能积极竞争同步该对象的线程竞争；例如，被唤醒的线程在成为下一个锁定该对象的线程时不享有可靠的特权或劣势。这个方法只能由作为这个对象的监视器的所有者的线程来调用。一个线程通过以下三种方式之一成为该对象监视器的所有者：</p><ul><li>通过执行该对象的一个同步实例方法。</li><li>通过执行对该对象进行同步的同步语句的主体。</li><li>对于类的对象，通过执行该类的一个同步静态方法。</li></ul><p>每次只有一个线程可以拥有一个对象的监视器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>final：方法不能被继承</li><li>native：该方法在外部定义</li><li>Throws：IllegalMonitorStateException – 如果当前线程不是此对象的监视器的所有者，则为 “不”。</li></ul><h3 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a>notifyAll()</h3><blockquote><p>唤醒所有在这个对象的监视器上等待的线程。一个线程通过调用其中的一个wait方法来等待一个对象的监视器。被唤醒的线程将不能继续工作，直到当前线程放弃对该对象的锁。被唤醒的线程将以通常的方式与任何其他可能积极竞争同步该对象的线程竞争；例如，被唤醒的线程在成为下一个锁定该对象的线程时不享有可靠的特权或劣势。这个方法只能由这个对象的监视器的所有者的线程来调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>final：方法不能被继承</li><li>native：该方法在外部定义</li><li>Throws：<strong>IllegalMonitorStateException</strong> – 如果当前线程不是此对象的监视器的所有者，则为 “不”。</li></ul><h3 id="wait-long-timeout"><a href="#wait-long-timeout" class="headerlink" title="wait(long timeout)"></a>wait(long timeout)</h3><blockquote><p>导致当前线程等待，直到另一个线程调用此对象的<code>notify()</code>方法或<code>notifyAll()</code>方法，或经过一个指定的时间量。当前线程必须拥有这个对象的监视器。该方法使当前线程（称为<strong>T</strong>）将自己置于该对象的等待集中，然后放弃对该对象的任何和所有同步要求。对于线程调度来说，线程<strong>T</strong>会被禁用，并处于休眠状态，直到四种情况中的一种发生。</p><ul><li>其他一些线程为这个对象调用了<code>notify</code>方法，线程<strong>T</strong>恰好被随机选择为被唤醒的线程。</li><li>另外一些线程调用了这个对象的<code>notifyAll</code>方法。</li><li>其他一些线程打断了线程<strong>T</strong>。</li><li>指定的实际时间已经过去了，或多或少。然而，如果超时为零，那么实际时间就不会被考虑在内，线程只是简单地等待，直到被通知。</li></ul><p>然后，线程T被从该对象的等待集中移除，并重新启用线程调度。然后，它以通常的方式与其他线程竞争对该对象的同步权；一旦它获得了对该对象的控制权，它对该对象的所有同步要求就会恢复到原状–也就是说，恢复到调用等待方法时的情况。然后，线程T从等待方法的调用中返回。因此，从等待方法返回时，对象和线程T的同步状态与调用等待方法时的状态完全一样。<br>一个线程也可以在没有被通知、中断或超时的情况下唤醒，即所谓的假性唤醒。虽然这种情况在实践中很少发生，但应用程序必须通过测试本应导致线程被唤醒的条件来防范它，如果条件不满足，则继续等待。换句话说，等待应该总是发生在循环中，比如这个循环：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (obj) &#123;<br>    <span class="hljs-keyword">while</span> (&lt;condition does not hold&gt;)<br>        obj.wait(timeout);<br>        ... <span class="hljs-comment">// 根据情况采取适当的行动</span><br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>(关于这个话题的更多信息，请参见Doug Lea的《Java并发编程（第二版）》（Addison-Wesley，2000）中的第3.2.3节，或Joshua Bloch的《有效的Java编程语言指南》（Addison-Wesley，2001）中的第50项。如果当前线程在等待前或等待中被任何线程打断，那么会抛出一个<strong>InterruptedException</strong>。这个异常不会被抛出，直到这个对象的锁状态如上所述被恢复。请注意，<strong>wait</strong>方法将当前线程放入该对象的等待集，它只解锁该对象；在线程等待时，当前线程可能被同步的任何其他对象仍被锁定。这个方法只能由这个对象的监视器的所有者的线程来调用。关于一个线程成为监视器所有者的方式，请参见<strong>notify</strong>方法的描述。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>final：方法不能被继承</li><li>native：该方法在外部实现</li><li>Params：timeout等待的最长时间，以毫秒为单位</li><li>Throws：<ul><li><strong>IllegalArgumentException</strong> - 如果timeout的值是负的。</li><li><strong>IllegalMonitorStateException</strong> - 如果当前线程不是该对象的监视器的所有者。</li><li><strong>InterruptedException</strong> - 如果任何线程在当前线程等待通知之前或期间中断了当前线程。当这个异常被抛出时，当前线程的中断状态被清除。</li></ul></li></ul><h3 id="wait-long-timeout-int-nanos"><a href="#wait-long-timeout-int-nanos" class="headerlink" title="wait(long timeout, int nanos)"></a>wait(long timeout, int nanos)</h3><blockquote><p>导致当前线程等待，直到另一个线程调用此对象的notify()方法或notifyAll()方法，或其他线程中断当前线程，或一定量的实际时间已经过去。这个方法类似于一个参数的等待方法，但它允许更精细地控制在放弃之前等待通知的时间量。真正的时间量以纳秒为单位，由以下公式给出<br><strong>1000000*timeout+nanos</strong><br>在所有其他方面，这个方法与一个参数的方法<code>wait(long)</code>做的事情相同。特别是，<strong>wait(0, 0)与wait(0)的意思相同</strong>。<br>当前线程必须拥有这个对象的监视器。该线程释放该监视器的所有权，并等到以下两个条件中的一个发生：</p><ul><li>另一个线程通过调用<code>notify</code>方法或<code>notifyAll</code>方法，通知在此对象的监视器上等待的线程醒来。</li><li>由<strong>timeout</strong>毫秒加<strong>nanos</strong>纳秒参数指定的超时时间已经过去了<br>然后线程等待，直到它能重新获得监视器的所有权并恢复执行。<br>在单参数版本中，中断和假性唤醒是可能的，这个方法应该总是在一个循环中使用</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (obj) &#123;<br>    <span class="hljs-keyword">while</span> (&lt;condition does not hold&gt;)<br>        obj.wait(timeout, nanos);<br>        ... <span class="hljs-comment">// 根据情况采取适当的行动</span><br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个方法只能由作为这个对象的监视器的所有者的线程来调用。关于线程成为监视器所有者的方式，请参见notify方法的描述。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, <span class="hljs-type">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>    <span class="hljs-keyword">if</span> (timeout &lt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;timeout value is negative&quot;</span>);  <br>    &#125;   <br>    <span class="hljs-keyword">if</span> (nanos &lt; <span class="hljs-number">0</span> || nanos &gt; <span class="hljs-number">999999</span>) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(  <br>                            <span class="hljs-string">&quot;nanosecond timeout value out of range&quot;</span>);  <br>    &#125;    <br>    <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0</span>) &#123;timeout++;&#125;   <br>    wait(timeout);  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>final：该方法不能被继承</li><li>Params：<ul><li>timeout - 以毫秒为单位的最大等待时间。</li><li>nanos - 附加时间，单位是纳秒，范围是0-999999。</li></ul></li><li>Throws：<ul><li><strong>IllegalArgumentException</strong> - 如果timeout的值是负数或者nanos的值不在0-999999范围内。</li><li><strong>IllegalMonitorStateException</strong> - 如果当前线程不是这个对象的监视器的所有者。</li><li><strong>InterruptedException</strong> - 如果任何线程在当前线程等待通知之前或期间中断了当前线程。当这个异常被抛出时，当前线程的中断状态被清除。</li></ul></li></ul><h3 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>    wait(<span class="hljs-number">0</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public：公开的</li><li>final：该方法不能被继承</li><li>Throws：<ul><li><strong>IllegalMonitorStateException</strong> - 如果当前线程不是该对象的监视器的所有者。</li><li><strong>InterruptedException</strong> - 如果任何线程在当前线程等待通知之前或期间中断了当前线程。当这个异常被抛出时，当前线程的中断状态被清除</li></ul></li></ul><h3 id="wait-wait-long-timeout-int-nanos-wait-long-timeout"><a href="#wait-wait-long-timeout-int-nanos-wait-long-timeout" class="headerlink" title="wait(),wait(long timeout, int nanos),wait(long timeout)"></a>wait(),wait(long timeout, int nanos),wait(long timeout)</h3><p>根据实现可以发现方法<code>wait()</code>和<code>wait(long timeout, int nanos)</code>最终都是调用<code>wait(long timeout)</code>；</p><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h3><blockquote><p>当垃圾收集器确定不再有对该对象的引用时，由垃圾收集器在该对象上调用。子类重写<code>finalize</code>方法以处理系统资源或执行其他清理工作。<code>finalize</code>的一般契约是，如果以及当<strong>Java™虚拟机</strong>确定不再有任何方法可以让尚未死亡的任何线程访问这个对象时，它就会被调用，除非是由于其他一些准备被最终确定的对象或类的最终确定所采取的行动。<code>finalize</code>方法可以采取任何行动，包括让这个对象再次被其他线程使用；然而，<code>finalize</code>的通常目的是在对象被不可逆转地丢弃之前执行清理行动。例如，代表输入/输出连接的对象的<code>finalize</code>方法可以执行显式<strong>I/O</strong>事务，以便在对象被永久丢弃之前断开连接。<strong>Object</strong>类的<code>finalize</code>方法不执行任何特殊动作；它只是正常返回。<strong>Object</strong>的子类可以覆盖这个定义。Java编程语言并不保证哪个线程会调用任何给定对象的<code>finalize</code>方法。然而，可以保证的是，调用<code>finalize</code>的线程在调用<code>finalize</code>时不会持有任何用户可见的同步锁。如果<code>finalize</code>方法抛出了一个未捕获的异常，该异常将被忽略，该对象的<code>finalization</code>将被终止。在对一个对象调用finalize方法后，不会有进一步的行动，直到Java虚拟机再次确定不再有任何方法可以让这个对象被任何尚未死亡的线程访问，包括其他对象或准备被最终确定的类的可能行动，这时对象可能被丢弃。对于任何给定的对象，Java虚拟机调用finalize方法的次数不会超过一次。<code>finalize</code>方法抛出的任何异常都会导致该对象的最终确定被停止，但其他方面则被忽略。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123; &#125;<br></code></pre></td></tr></table></figure><ul><li>protected：半公开的</li><li>Throws：Throwable - 该方法引发的异常。</li></ul><h4 id="示例-finalize"><a href="#示例-finalize" class="headerlink" title="示例-finalize()"></a>示例-finalize()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>);  <br>    System.gc();  <br>    Thread.sleep(<span class="hljs-number">1000</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>打印</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User finalize()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java源码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java.long</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Errors during downloading metadata for repository &#39;AppStream&#39;</title>
    <link href="/blog/2022/05/31/linux/error/error1/"/>
    <url>/blog/2022/05/31/linux/error/error1/</url>
    
    <content type="html"><![CDATA[<h3 id="Errors-during-downloading-metadata-for-repository-‘AppStream’"><a href="#Errors-during-downloading-metadata-for-repository-‘AppStream’" class="headerlink" title="Errors during downloading metadata for repository ‘AppStream’"></a>Errors during downloading metadata for repository ‘AppStream’</h3><h4 id="错误产生"><a href="#错误产生" class="headerlink" title="错误产生"></a>错误产生</h4><ol><li>阿里云服务器</li><li>linux版本centOS8.2</li><li>执行 yum install -y [软件名]</li></ol><h4 id="错误内容"><a href="#错误内容" class="headerlink" title="错误内容"></a>错误内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">CentOS-8 - AppStream                                                                                                                           22 kB/s | 2.3 kB     00:00    <br>Errors during downloading metadata <span class="hljs-keyword">for</span> repository <span class="hljs-string">&#x27;AppStream&#x27;</span>:<br>  - Status code: 404 <span class="hljs-keyword">for</span> http://mirrors.cloud.aliyuncs.com/centos/8/AppStream/x86_64/os/repodata/repomd.xml (IP: 100.100.2.148)<br>Error: Failed to download metadata <span class="hljs-keyword">for</span> repo <span class="hljs-string">&#x27;AppStream&#x27;</span>: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried<br></code></pre></td></tr></table></figure><h4 id="错误解决方法"><a href="#错误解决方法" class="headerlink" title="错误解决方法"></a>错误解决方法</h4><ol><li><p>进入<a href="https://mirrors.aliyun.com/repo/">阿里云开源镜像站-repo</a></p></li><li><p>下载：Centos-vault-8.5.2111.repo</p></li><li><p>进入文件夹</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/yum.repos.d/<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># CentOS-AppStream.repo  CentOS-centosplus.repo  CentOS-Debuginfo.repo  CentOS-Extras.repo     CentOS-Media.repo       CentOS-Sources.repo</span><br><br><span class="hljs-comment"># CentOS-Base.repo       CentOS-CR.repo          CentOS-epel.repo       CentOS-fasttrack.repo  CentOS-PowerTools.repo  CentOS-Vault.repo</span><br></code></pre></td></tr></table></figure></li><li><p>删除所有后缀为<code>.repo</code>的文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> *.repo<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-AppStream.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-Base.repo&#x27;</span>? y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-centosplus.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-CR.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-Debuginfo.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-epel.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-Extras.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-fasttrack.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-Media.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-PowerTools.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-Sources.repo&#x27;</span>? Y<br><span class="hljs-built_in">rm</span>: remove regular file <span class="hljs-string">&#x27;CentOS-Vault.repo&#x27;</span>? Y<br></code></pre></td></tr></table></figure></li><li><p>上传Centos-vault-8.5.2111.repo</p></li><li><p>执行<code>yum makecache</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">CentOS-8.5.2111 - Base - mirrors.aliyun.com                                                                                                   854 kB/s | 4.6 MB     00:05<br>CentOS-8.5.2111 - Extras - mirrors.aliyun.com                                                                                                  65 kB/s |  10 kB     00:00<br>CentOS-8.5.2111 - AppStream - mirrors.aliyun.com                                                                                              573 kB/s | 8.4 MB     00:15<br>Metadata cache created.<br></code></pre></td></tr></table></figure></li></ol><h3 id="原文https-blog-csdn-net-u010349629-article-details-123283436"><a href="#原文https-blog-csdn-net-u010349629-article-details-123283436" class="headerlink" title="原文https://blog.csdn.net/u010349629/article/details/123283436"></a><a href="https://blog.csdn.net/u010349629/article/details/123283436">原文https://blog.csdn.net/u010349629/article/details/123283436</a></h3>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux-error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 搭建 gogs</title>
    <link href="/blog/2022/05/31/linux/gogs/"/>
    <url>/blog/2022/05/31/linux/gogs/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux-搭建-gogs"><a href="#Linux-搭建-gogs" class="headerlink" title="Linux 搭建 gogs"></a>Linux 搭建 gogs</h3><p><a href="https://blog.csdn.net/qq_36025814/category_11565429.html">GOGS-CSDN</a><br><a href="https://gogs.io/">Gogs首页</a><br><a href="https://gogs.io/docs">Gogs使用文档</a><br><a href="https://gogs.io/docs/installation/install_from_binary">Goga二进制安装方法</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adduser git<br></code></pre></td></tr></table></figure><h4 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2. 安装git"></a>2. 安装git</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y git<br></code></pre></td></tr></table></figure><h4 id="3-下载对应包-https-gogs-io-docs-installation-install-from-binary"><a href="#3-下载对应包-https-gogs-io-docs-installation-install-from-binary" class="headerlink" title="3. 下载对应包 https://gogs.io/docs/installation/install_from_binary"></a>3. 下载对应包 <a href="https://gogs.io/docs/installation/install_from_binary">https://gogs.io/docs/installation/install_from_binary</a></h4><h4 id="4-在合适位置创建并上传二进制包"><a href="#4-在合适位置创建并上传二进制包" class="headerlink" title="4. 在合适位置创建并上传二进制包"></a>4. 在合适位置创建并上传二进制包</h4><p>本人安装位置 <code>/</code> 下创建 tool文件夹并上传文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> tool<br></code></pre></td></tr></table></figure><h4 id="5-解压TAR-GZ"><a href="#5-解压TAR-GZ" class="headerlink" title="5. 解压TAR.GZ"></a>5. 解压<code>TAR.GZ</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf gogs_0.12.7_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure><p>解压后在当前文件夹下出现<code>gogs</code>文件夹</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-给git用户权限"><a href="#1-给git用户权限" class="headerlink" title="1. 给git用户权限"></a>1. 给git用户权限</h4><p>在当前文件夹下将gogs文件夹用户更改为git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> -R git:git ./gogs<br></code></pre></td></tr></table></figure><h4 id="2-进入gogs文件夹"><a href="#2-进入gogs文件夹" class="headerlink" title="2. 进入gogs文件夹"></a>2. 进入gogs文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> gogs<br></code></pre></td></tr></table></figure><h4 id="3-切换用户"><a href="#3-切换用户" class="headerlink" title="3. 切换用户"></a>3. 切换用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su git<br></code></pre></td></tr></table></figure><h4 id="4-执行命令-gogs-web"><a href="#4-执行命令-gogs-web" class="headerlink" title="4. 执行命令./gogs web"></a>4. 执行命令<code>./gogs web</code></h4><h4 id="5-访问ip-3000-install"><a href="#5-访问ip-3000-install" class="headerlink" title="5. 访问ip:3000/install"></a>5. 访问<code>ip:3000/install</code></h4><p>如果使用的云服务器在服务器防火墙页开通<code>3000</code>端口</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99.jpg" alt="阿里云防火墙示例"></p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/gogs%E9%85%8D%E7%BD%AE%E9%A1%B5.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="gogs配置页如图"></p><p><strong>配置</strong>：</p><ol><li>数据库类型：SQLite3</li><li>仓库目录：选择个人核实位置，我的位置<code>/tool/gogs/git/gogs-repositories</code></li><li>域名：改为自己的ip</li><li>应用URL：改为自己ip</li><li>其它选项默认</li></ol><p><strong>注意</strong>：</p><p>因为只给git用户gogs文件夹的权限所以想要给其他位置设立git仓库，需要给git添加权限</p><h4 id="6-点击立即安装"><a href="#6-点击立即安装" class="headerlink" title="6. 点击立即安装"></a>6. 点击<code>立即安装</code></h4><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><h4 id="1-http-ip-3000-user-login"><a href="#1-http-ip-3000-user-login" class="headerlink" title="1. http://ip:3000/user/login"></a>1. <a href="http://ip:3000/user/login">http://ip:3000/user/login</a></h4><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/gogs%E7%99%BB%E5%BD%95%E9%A1%B5.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="gogs登录页"></p><h4 id="2-登陆"><a href="#2-登陆" class="headerlink" title="2. 登陆"></a>2. 登陆</h4><p>注册第一个用户为管理员用户</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/gogs%E6%B3%A8%E5%86%8C%E9%A1%B5.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="gogs注册页"></p><h4 id="3-登录后主页"><a href="#3-登录后主页" class="headerlink" title="3. 登录后主页"></a>3. 登录后主页</h4><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/gogs%E4%B8%BB%E9%A1%B5.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="gogs主页"></p><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p>如上所说，命令<code>./gogs web</code>在关闭终端的时候也会停止，可以通过以下方式保留。</p><h4 id="1-通过后台守护进程启动"><a href="#1-通过后台守护进程启动" class="headerlink" title="1. 通过后台守护进程启动"></a>1. 通过后台守护进程启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> ./gogs web &amp;<br></code></pre></td></tr></table></figure><h4 id="2-通过daemon的方式启动"><a href="#2-通过daemon的方式启动" class="headerlink" title="2. 通过daemon的方式启动"></a>2. 通过<code>daemon</code>的方式启动</h4><ol><li><p>找到gogs解压文件夹并进入<code>gogs/scripts/systemd</code>下</p></li><li><p>打开gogs.service</p></li><li><p>更改如下值</p><ol><li><p>ExecStart：启动 ./gogs web 命令的路径</p></li><li><p>WorkingDirectory：gogs 所在文件夹的路径</p></li><li><p>User：执行运行命令<code>./</code>gogs web`命令的用户名</p></li><li><p>Group：执行运行命令<code>./</code>gogs web`命令的用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 部分示意</span><br>User=git<br>Group=git<br>WorkingDirectory=/tool/gogs<br>ExecStart=/tool/gogs/gogs web<br>Restart=always<br>Environment=USER=git HOME=/home/git<br></code></pre></td></tr></table></figure></li><li><p>将该好的文件复制到<code>/usr/lib/systemd/system</code>下</p></li><li><p>依次执行以下命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> gogs.service<br>systemctl start gogs.service<br>systemctl status gogs.service<br><span class="hljs-comment"># 结果</span><br>● gogs.service - Gogs<br>  Loaded: loaded (/usr/lib/systemd/system/gogs.service; enabled; vendor preset: disabled)<br>Active: active (running) since Tue 2022-05-31 15:55:57 CST; 1h 5min ago<br>Main PID: 53371 (gogs)<br>    Tasks: 6 (<span class="hljs-built_in">limit</span>: 10836)<br>  Memory: 54.0M<br>  CGroup: /system.slice/gogs.service<br>          └─53371 /tool/gogs/gogs web<br><br>May 31 15:55:57 iZbp191eo8bqtd9wf5f0pqZ systemd[1]: Started Gogs.<br>May 31 15:55:57 iZbp191eo8bqtd9wf5f0pqZ gogs[53371]: 2022/05/31 15:55:57 [TRACE] Log mode: File (Info)<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>通过nginx代理</p><ol><li><p>在 nginx.conf 文件中，将下面的 server 部分增加至 http 分区内并重载配置：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">location / <span class="hljs-punctuation">&#123;</span><br>    proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:3000;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>配置子路径</p><p> 同上增加如下内容：</p></li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">location /gogs/ <span class="hljs-punctuation">&#123;</span><br>        proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//127.0.0.1:3000/;</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>  子路由有<code>/</code>开头，必须以<code>/</code>结尾<br>  找到gogs的app.ini在<code>[server]</code>下增加如下内容<br>  PROTOCOL         = http<br>  HTTP_ADDR        = 127.0.0.1<br>  EXTERNAL_URL     = <a href="http://(ip/%E5%9F%9F%E5%90%8D%EF%BC%89/gogs/">http://（ip/域名）/gogs/</a><br>  EXTERNAL_URL需要和nginx中配置的内容相同</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux-software</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMq to Docker</title>
    <link href="/blog/2022/05/30/docker/ActiveMQ/"/>
    <url>/blog/2022/05/30/docker/ActiveMQ/</url>
    
    <content type="html"><![CDATA[<h3 id="ActiveMq-to-Docker"><a href="#ActiveMq-to-Docker" class="headerlink" title="ActiveMq to Docker"></a>ActiveMq to Docker</h3><h4 id="win环境"><a href="#win环境" class="headerlink" title="win环境"></a>win环境</h4><h5 id="1-拉去镜像"><a href="#1-拉去镜像" class="headerlink" title="1.拉去镜像"></a>1.拉去镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 搜索镜像</span><br>docker search ActiveMQ<br><span class="hljs-comment"># 拉去镜像</span><br>docker pull webcenter/activemq<br><span class="hljs-comment"># 结果</span><br>Using default tag: latest<br>latest: Pulling from webcenter/activemq<br>7dcf5a444392: Pull complete<br>9eebba75a87f: Pull complete<br>1f0440d87cc7: Pull complete<br>dacd0555c1b4: Pull complete<br>b0f19aa05a94: Pull complete<br>4796f64423b2: Pull complete<br>5d994b710cb9: Pull complete<br>313a84c05d3c: Pull complete<br>1d6a562461f1: Pull complete<br>e25558998b21: Pull complete<br>1423ae5a1b0b: Pull complete<br>8d4e082d1ca6: Pull complete<br>098d68aaa4ae: Pull complete<br>Digest: sha256:35015988c4047a2ab1888466f5aae30420f7addde4c467e5db9ae64eea6b47b0<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> webcenter/activemq:latest<br>docker.io/webcenter/activemq:latest<br><span class="hljs-comment"># 查看镜像</span><br>docker images<br></code></pre></td></tr></table></figure><h5 id="自定义位置创建文件夹文件夹关系如下"><a href="#自定义位置创建文件夹文件夹关系如下" class="headerlink" title="自定义位置创建文件夹文件夹关系如下"></a>自定义位置创建文件夹文件夹关系如下</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">activemq<br>    - log<br></code></pre></td></tr></table></figure><h5 id="执行docker-run"><a href="#执行docker-run" class="headerlink" title="执行docker run"></a>执行<code>docker run</code></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name=activemq -itd -p 8161:8161 -p 61616:61616 -e ACTIVEMQ_ADMIN_LOGIN=admin -e ACTIVEMQ_ADMIN_PASSWORD=123456 -v 系统盘符:路径\activemq:/data/activemq -v 系统盘符:路径\activemq\<span class="hljs-built_in">log</span>:/var/log/activemq webcenter/activemq:latest<br></code></pre></td></tr></table></figure><p>参数解释：</p><ul><li>端口 61616 是 ActiveMq 的容器使用端口</li><li>端口 8161 是 web 页面管理端口</li><li>系统盘符:路径\activemq 是将activeMQ运行文件挂载到该目录</li><li>系统盘符:路径\activemq\log是将activeMQ运行日志挂载到该目录</li><li><code>-e ACTIVEMQ_ADMIN_LOGIN=admin</code> 指定登录名</li><li><code>-e ACTIVEMQ_ADMIN_PASSWORD=123456</code> 登录密码</li></ul><p>执行后如图：</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1653897193(1).jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="结果图"></p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/1653897237(1).jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="访问http://localhost:8161/admin/"></p>]]></content>
    
    
    <categories>
      
      <category>ActiveMq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker-windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMq to SpringBoot</title>
    <link href="/blog/2022/05/30/spring/SpringToActiveMq/"/>
    <url>/blog/2022/05/30/spring/SpringToActiveMq/</url>
    
    <content type="html"><![CDATA[<h3 id="ActiveMq-to-SpringBoot"><a href="#ActiveMq-to-SpringBoot" class="headerlink" title="ActiveMq to SpringBoot"></a>ActiveMq to SpringBoot</h3><p><strong>springboot版本：</strong>2.7.0</p><h3 id="必要包"><a href="#必要包" class="headerlink" title="必要包"></a>必要包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.messaginghub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pooled-jms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="全部pom-xml"><a href="#全部pom-xml" class="headerlink" title="全部pom.xml"></a>全部<code>pom.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.crudclass<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>springboot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.messaginghub<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pooled-jms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="ActiveMq相关yml配置文件"><a href="#ActiveMq相关yml配置文件" class="headerlink" title="ActiveMq相关yml配置文件"></a>ActiveMq相关yml配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># ActiveMQ 配置文件</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">activemq:</span><br>    <span class="hljs-attr">broker-url:</span> <span class="hljs-string">tcp://localhost:61616</span><br>    <span class="hljs-comment">#  默认的ActiveMq URL 是否应该在内存中。如果指定了一个明确的经纪商，则忽略不计。</span><br>    <span class="hljs-attr">in-memory:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># ActiveMq的登录用户。</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">admin</span><br>    <span class="hljs-comment"># ActiveMq的登录密码。</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment"># 在考虑完成关闭前要等待的时间。</span><br>    <span class="hljs-attr">close-timeout:</span> <span class="hljs-string">15s</span><br>    <span class="hljs-comment"># 在重新发送回滚的消息之前，是否停止消息的发送。事务。这意味着，当启用该功能时，消息的顺序不会被保留。</span><br>    <span class="hljs-attr">non-blocking-redelivery:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 在消息发送时等待响应的时间。把它设置为 0 就可以永远等待。</span><br>    <span class="hljs-attr">send-timeout:</span> <span class="hljs-string">0ms</span><br>    <span class="hljs-comment"># 是否信任所有软件包。</span><br>    <span class="hljs-attr">packages:</span><br>      <span class="hljs-attr">trust-all:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 逗号分隔的特定软件包列表(当不信任所有包)</span><br>      <span class="hljs-attr">trusted:</span><br>    <span class="hljs-attr">pool:</span><br>      <span class="hljs-comment"># 是否应该创建一个JmsPoolConnectionFactory，而不是一个普通的ConnectionFactory。</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 当请求连接而池子已满时，是否进行阻塞。将其设置为false来代替抛出一个 &quot;JMSException&quot;</span><br>      <span class="hljs-attr">block-if-full:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 如果池子仍然是满的，在抛出异常之前的阻塞期</span><br>      <span class="hljs-attr">block-if-full-timeout:</span> <span class="hljs-string">1ms</span><br>      <span class="hljs-comment"># 连接空闲超时。</span><br>      <span class="hljs-attr">idle-timeout:</span> <span class="hljs-string">30s</span><br>      <span class="hljs-comment"># 池化连接的最大数量。</span><br>      <span class="hljs-attr">max-connections:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 池中每个连接的最大池化会话数。</span><br>      <span class="hljs-attr">max-sessions-per-connection:</span> <span class="hljs-number">500</span><br>      <span class="hljs-comment"># 空闲连接驱逐线程运行之间的睡眠时间。当为负数时。没有空闲连接驱逐线程运行。</span><br>      <span class="hljs-attr">time-between-expiration-check:</span> <span class="hljs-string">-1ms</span><br>      <span class="hljs-comment"># 是否只使用一个匿名的 &quot;MessageProducer &quot;实例。将其设置为false以每次需要创建一个 &quot;MessageProducer &quot;时。</span><br>      <span class="hljs-attr">use-anonymous-producers:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="相关java代码"><a href="#相关java代码" class="headerlink" title="相关java代码"></a>相关java代码</h3><h4 id="队列模式实例"><a href="#队列模式实例" class="headerlink" title="队列模式实例"></a>队列模式实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ?;<br><br><span class="hljs-keyword">import</span> org.apache.activemq.command.ActiveMQQueue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> javax.jms.Queue;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveMQConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQQueue</span>(<span class="hljs-string">&quot;queue&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ?;<br><br><span class="hljs-keyword">import</span> org.springframework.jms.annotation.JmsListener;<br><span class="hljs-keyword">import</span> org.springframework.jms.core.JmsMessagingTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.jms.Queue;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActiveMQTool</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Queue queue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送消息内容 :&quot;</span> + msg);<br>        <span class="hljs-built_in">this</span>.jmsMessagingTemplate.convertAndSend(<span class="hljs-built_in">this</span>.queue, msg);<br>    &#125;<br><br>    <span class="hljs-meta">@JmsListener(destination = &quot;sms.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveMsg</span><span class="hljs-params">(String text)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到消息 : &quot;</span>+text);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ?;<br><br><span class="hljs-keyword">import</span> ?.ActiveMQTool;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootApplicationTests</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    ActiveMQTool activeMQTool;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        activeMQTool.sendMsg(<span class="hljs-string">&quot;测试&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ActiveMq</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础四</title>
    <link href="/blog/2022/03/20/java/basic4/"/>
    <url>/blog/2022/03/20/java/basic4/</url>
    
    <content type="html"><![CDATA[<h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li>哔哩哔哩 <a href="https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0">遇见狂神说</a></li><li>Java 核心技术卷一（原书第十版）</li><li><a href="https://www.runoob.com/java/java-basic-datatypes.html">菜鸟教程</a></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol><li><p>值可以发生变化的</p></li><li><p>变量必须先声明类型</p></li><li><p>变量是基本的储存单元,其要素包括变量名,变量类型,变量作用域.</p><blockquote><p>​type  varName [=value]   [{,varName[=value]}]</p><p>数据类型 变量命  =值; 可以使用逗号隔开来声明多个变量</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> a,b,c,d;<br></code></pre></td></tr></table></figure></li><li><p>注意</p><ol><li>每个变量必须有类型,可以是基础类型也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句,因此每一个声明都有分号<code>;</code>结束</li></ol></li><li><p>变量作用域</p><ol><li><p>类变量</p></li><li><p>实例变量 ( 从属于<code>对象</code>  , 如果不自行初始化 , 默认为这个类型的默认值)</p><ol><li>boolean 默认为 <code>false</code></li><li>数值类型默认值为 <code>0</code> 或 <code>0.0</code></li><li>除基本类型其他都为**<code>null</code>**</li></ol></li><li><p>局部变量</p></li><li><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>   <span class="hljs-comment">// 类变量</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i= <span class="hljs-number">1</span>;<br>   <br>   <span class="hljs-comment">// 实例变量</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> method&#123;<br>      <span class="hljs-comment">//局部变量</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li><p>初始化后不能在改变的值</p></li><li><p>可以理解为特殊的变量，他的值被设定后在程序运行过程中不允许被改变。</p></li><li><p>利用<code>final</code>关键字指示常量</p></li><li><p>定义</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// final 常量类型 常量名 = 常量值 . </span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">I</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li><li><p>常量名一般使用大写字符</p></li><li><p>一个常量在类中被多个方法使用成为类常量。类常量的定义位于<code>main</code>方法的外部，如果类常量被声明成<code>public</code>，那么它也可以被其他类使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constants</span><br>&#123;<br>   <span class="hljs-comment">// 类常量</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INT__TWO</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] ages)</span><br>   &#123;<br>      ........<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ol><li>所有变量 , 方法名 , 类名 , <strong>见名知意</strong></li><li>类成员变量 / 局部变量 / 方法名 : 首字母小写和驼峰命名</li><li>常量 : 大写字母和下划线 ( 由<code>final</code>修饰符修饰的 )</li><li>类名 : 首字母大写驼峰命名</li></ol><p>注意：</p><ol><li>Java 中字母大小写敏感。</li><li>声明一个变量，必须用赋值语句对变量惊醒初始化，请勿使用未初始化的变量。</li><li>变量的声明尽量靠近第一次使用塔的地方。</li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ol><li><p>算数运算符 : + , - , * , / , %  , ++ , –</p><ul><li><p><code>+</code> : 加法运算，字符串连接运算</p></li><li><p><code>-</code> : 减法运算</p></li><li><p><code>*</code> : 乘法运算</p></li><li><p><code>/</code> : 除法运算</p></li><li><p><code>%</code> : 取模运算，两个数字相除取余数</p></li><li><p><code>++</code> : 自增 1</p></li><li><p><code>--</code> : 自减 1</p></li><li><p>代码展示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++; <span class="hljs-comment">// a++先赋值后自增 1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ++a; <span class="hljs-comment">// ++a先自增 1 后赋值</span><br>System.out.println(b); <span class="hljs-comment">// 输出结果 1</span><br>System.out.println(c); <span class="hljs-comment">// 输出结果 3</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>赋值运算符 : = <code>变量名称=表达式内容</code></p></li><li><p>关系运算符 : &gt; , &lt; , &lt;= , &gt;= , == , != , ipstanceof</p><ul><li><code>&gt;</code> : 大于</li><li><code>&lt;</code> : 小于</li><li><code>&lt;=</code> : 小于等于</li><li><code>&gt;=</code> : 大于等于</li><li><code>==</code> : 恒等</li><li><code>!=</code> : 不等</li></ul><blockquote><p>1.ipstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> obj <span class="hljs-keyword">instanceof</span> Class<br></code></pre></td></tr></table></figure><blockquote><p>2.其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。</p><p>3<strong>注意</strong>：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。</p></blockquote></li><li><p>逻辑运算符 : &amp;&amp; , || , !</p><ul><li><table><thead><tr><th align="left">运算符</th><th align="left">用法</th><th align="left">含义</th><th align="left">说明</th><th align="left">实例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">a&amp;&amp;b</td><td align="left">短路与</td><td align="left">ab 全为 true 时，计算结果为 true，否则为 false。</td><td align="left">2&gt;1&amp;&amp;3&lt;4</td><td align="left">true</td></tr><tr><td align="left">||</td><td align="left">a||b</td><td align="left">短路或</td><td align="left">ab 全为 false 时，计算结果为 false，否则为 true。</td><td align="left">2&lt;1||3&gt;4</td><td align="left">false</td></tr><tr><td align="left">!</td><td align="left">!a</td><td align="left">逻辑非</td><td align="left">a 为 true 时，值为 false，a 为 false 时，值为 true</td><td align="left">!(2&gt;4)</td><td align="left">true</td></tr><tr><td align="left">|</td><td align="left">a|b</td><td align="left">逻辑或</td><td align="left">ab 全为 false 时，计算结果为 false，否则为 true</td><td align="left">1&gt;2|3&gt;5</td><td align="left">false</td></tr><tr><td align="left">&amp;</td><td align="left">a&amp;b</td><td align="left">逻辑与</td><td align="left">ab 全为 true 时，计算结果为 true，否则为 false</td><td align="left">1&lt;2&amp;3&lt;5</td><td align="left">true</td></tr></tbody></table></li><li>&amp;&amp; 与 &amp; 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false）</li><li>|| 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true）</li><li><strong>注意</strong>：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。</li><li><blockquote><p>逻辑运算符的优先级为：！运算级别最高，&amp;&amp; 运算高于 || 运算。！运算符的优先级高于算术运算符，而 &amp;&amp; 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。</p></blockquote></li></ul></li><li><p>位运算符 : &amp; (“and”), | (“or”), ^ (“xor”), ~ (“not”), &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;</p></li><li><p>条件运算符 : ? :</p></li><li><p>扩展赋值运算符 : += , -= , *= , /=</p></li><li><p>运算符优先级</p><table><thead><tr><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>[].()(方法调用)</td><td>从左向右</td></tr><tr><td>! ~ ++ – + (一元运算) - (一元运算) () (强制类型转换) new</td><td>从右向左</td></tr><tr><td>*，/，%</td><td>从左向右</td></tr><tr><td>+，-</td><td>从左向右</td></tr><tr><td>&lt;&lt;，&gt;&gt;，&gt;&gt;&gt;</td><td>从左向右</td></tr><tr><td>&lt;，&lt;=，&gt;，&gt;=，instanceof</td><td>从左向右</td></tr><tr><td>==，!=</td><td>从左向右</td></tr><tr><td>&amp;</td><td>从左向右</td></tr><tr><td>^</td><td>从左向右</td></tr><tr><td>`</td><td>`</td></tr><tr><td>&amp;&amp;</td><td>从左向右</td></tr><tr><td>`</td><td></td></tr><tr><td>?:</td><td>从右向左</td></tr><tr><td>=，+=，-=，*=，/=，%=，&amp;=，`</td><td>=`，^=，&lt;&lt;=，&gt;&gt;=，&gt;&gt;&gt;=</td></tr></tbody></table></li></ol><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><blockquote><p>在<code>Math</code>类中，包含了各种各样的数学函数。</p></blockquote><p>例如：</p><ol><li>通过<code>Math.sqrt(x)</code>计算一个数值的平方根</li><li>通过<code>Math.pow(x,y)</code>计算x的a次幂，<code>pow</code>方法中有<code>两个double的参数</code>所以此方法返回的结果也是<code>double</code>型。</li><li>常用的函数<ul><li>Math.sin | 计算正弦</li><li>Math.cos | 计算余弦</li><li>Math.tan | 计算正切</li><li>Math.atan | 计算反正切</li><li>Math.exp | 计算自然数底数 <em>e</em> 的参数次方</li><li>Math.log | 计算对数</li><li>Math.PI | π</li><li>Math.E | <em>e</em></li></ul></li></ol><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><blockquote><p>枚举类型包括有限个命名的值</p></blockquote><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span><br>&#123;<br>   SMALL, MEDIUM, LARGR, EXTRA_LARGE<br>&#125;;<br></code></pre></td></tr></table></figure><p>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Size</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Size.SMALL;<br></code></pre></td></tr></table></figure><ol><li>在比较枚举类型的值时，不需要调用<code>equals</code>，可以直接使用<code>==</code>。</li><li>可以在来句类型中添加构造器，方法和域。</li><li>所有的枚举类型都是<code>Enum</code>的子类。</li><li>方法<code>.toString</code> 返回枚举常量名。此方法的逆方法是<code>Enum.valueOf(ClassName.class,&quot;枚举常量名&quot;)</code></li><li>每个枚举类型都有一个静态方法<code>values</code>，它返回次枚举类型的全部枚举值。<code>Size[] values = Size.values();</code></li></ol><p>注意：</p><ol><li>如果使用<code>strictfp</code>关键字修饰的方法必须严格的使用浮点计算来生成结果</li><li>如果<code>strictfp</code>修饰了类，这个类中所有的方法必须严格使用浮点计算。</li><li><code>Math</code>类为了达到最快的性能，所有方法都使用计算机浮点单元中的例程，如果可预测的结果比运行速度更重要的话，那么就应该使用<code>StrictMath</code>类</li></ol><h3 id="Java-中类型转换"><a href="#Java-中类型转换" class="headerlink" title="Java 中类型转换"></a>Java 中类型转换</h3><h4 id="由低到高-自动类型转换"><a href="#由低到高-自动类型转换" class="headerlink" title="由低到高 自动类型转换"></a>由低到高 自动类型转换</h4><ol><li><code>byte</code>，<code>short</code>，<code>char</code> - &gt;<code>int</code> - &gt; <code>long</code> - &gt; <code>float</code> - &gt; <code>double</code></li><li>图示：<br><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220329170434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="20220329170434"></li><li>运算中,不同类型的数据先转换为同一类型,然后进行运算<ul><li>如果两个操作数中有一个是<code>double</code>类型，另一个操作数会转换为<code>double</code>类型。</li><li>如果其中一个是<code>float</code>类型，另一个操作数会转换成<code>float</code>类型</li><li>如果其中一个是<code>long</code>类型，另一个操作数会转换成<code>long</code>类型</li><li>否则，两个操作数都会转换成<code>int</code>类型。</li></ul></li></ol><h4 id="由高到底-强制类型转换"><a href="#由高到底-强制类型转换" class="headerlink" title="由高到底 强制类型转换"></a>由高到底 强制类型转换</h4><p>强制类型转换语法是在圆括号中给出想要转换的目标类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.9</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)x ;<br></code></pre></td></tr></table></figure><p>如上<code>y</code>的结果为9，强制类型转换通过截断小数部分将浮点值转换成整型。可以通过<code>Math.round</code>方法对浮点数进行舍入运算，用来得到最接近的整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.9</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)Math.round(x);<br></code></pre></td></tr></table></figure><p>如上此时得到的<code>y</code>的值为10。</p><p>注意：</p><ol><li><p>不能对布尔值转换。</p></li><li><p>不能把对象类型转换成不相关的类型。</p></li><li><p>由容量高想向容量低转换 强制转换 [(类型)变量名]。</p></li><li><p>转换时可能出现内存溢出或丢失精度。</p></li><li><p>如果将一个数值从一个类型强制转换成另一个类型，而又超出目标类型的表示范围，那么结果会截断成一个完全不同的值。</p></li><li><p>如果运算符得到一个值，其类型与左侧的类型不同，皆会发生强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>x += <span class="hljs-number">3.5</span>;<span class="hljs-comment">// 这是合法的      </span><br></code></pre></td></tr></table></figure><p>结果 x 等同于 <code>x = (int)(x+3.5)</code> 结果为 4.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础五</title>
    <link href="/blog/2022/03/20/java/basic5/"/>
    <url>/blog/2022/03/20/java/basic5/</url>
    
    <content type="html"><![CDATA[<h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li>Java 核心技术卷一（原书第十版）</li><li><a href="https://www.runoob.com/java/java-string.html">菜鸟教程</a></li></ul><blockquote><p>从概念上讲，Java字符串就是Unicode字符序列。Java没有内置的字符串类型，而是标准的Java类库中提供了一个预定义类，叫<code>String</code>。</p></blockquote><h3 id="String的定义"><a href="#String的定义" class="headerlink" title="String的定义"></a>String的定义</h3><h4 id="1-最简单的定义"><a href="#1-最简单的定义" class="headerlink" title="1.最简单的定义"></a>1.最简单的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 直接创建 储存在公共池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-通过构造函数创建"><a href="#2-通过构造函数创建" class="headerlink" title="2.通过构造函数创建"></a>2.通过构造函数创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对象创建 储存在堆中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-图示"><a href="#3-图示" class="headerlink" title="3.图示"></a>3.图示</h4><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220401172007.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="来自菜鸟教程"></p><p><a href="https://www.runoob.com/java/java-string.html">【图片出处】</a></p><h3 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-comment">//          012345678910</span><br><span class="hljs-comment">// String位置下标从0开始</span><br><span class="hljs-comment">// 通过方法substring提取一个子串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> s.substring(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>System.out.println(sz);<br></code></pre></td></tr></table></figure><p>输出结果为<code>hel</code><br>方法substring的第一个参数是字符串截取字符开始数字，第二个参数是截取字符串截至的位置，字符串第一个字符位置是从<code>0</code>开始计算。</p><h3 id="字符串的操作"><a href="#字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h3><h4 id="1-字符串的拼接"><a href="#1-字符串的拼接" class="headerlink" title="1.字符串的拼接"></a>1.字符串的拼接</h4><blockquote><p>可以通过<code>+</code>拼接两个字符串</p></blockquote><ol><li><p>字符串和字符串拼接</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello &quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s1 + s2;<br>        System.out.println(s3);<br>    &#125;<br></code></pre></td></tr></table></figure><p> 输出结果为<code>Hello World</code></p></li><li><p>字符串和其他类型拼接</p><blockquote><p>当一个字符串与一个非字符串拼接时，后者会转换成字符串。</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello &quot;</span>;<br>    <span class="hljs-type">int</span>  <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2020</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> s1 + s2;<br>    System.out.println(s3);<br>&#125;<br></code></pre></td></tr></table></figure><p> 输出结果为<code>Hello 2020</code><br> <strong>注</strong>：任何一个Java对象都可以转换成自付出。</p></li></ol><h4 id="2-不可变字符串"><a href="#2-不可变字符串" class="headerlink" title="2.不可变字符串"></a>2.不可变字符串</h4><h3 id="Java-流程控制"><a href="#Java-流程控制" class="headerlink" title="Java 流程控制"></a>Java 流程控制</h3><h3 id="一-Scanner-对象"><a href="#一-Scanner-对象" class="headerlink" title="一. Scanner 对象"></a>一. Scanner 对象</h3><ul><li><p>Scanner 可以实现人机交互 , java.util.Scanner 是Java 1.5 的新特性</p></li><li><p>基本用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br></code></pre></td></tr></table></figure></li><li><p>使用 : 通过 Scanner 的 <code>next()</code> 和 <code>nextLine()</code> 方法获取输入的字符串 , 在读取前我们一般需要 使用 <code>hasNext()</code> 与 <code>hasNextLine()</code> 判断是否还有输入数据 . </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一串字符&quot;</span>);<br><span class="hljs-comment">/// 判断是否输入 字符串</span><br><span class="hljs-keyword">if</span>(scanner.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();<br>    System.out.println(<span class="hljs-string">&quot;输入的字符串: &quot;</span>+str);<br>&#125;<br><span class="hljs-comment">// 结束</span><br>scannr.close();<br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 使用</span><br>Scanner scanner = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;请输入一串字符&quot;</span>);<br><span class="hljs-comment">/// 判断是否输入 字符串</span><br><span class="hljs-keyword">if</span>(scanner.has<span class="hljs-constructor">NextLine()</span>)&#123;<br>    String str = scanner.next<span class="hljs-constructor">Line()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;输入的字符串: &quot;</span>+str);<br>&#125;<br><span class="hljs-comment">// 结束</span><br>scannr.close<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><ul><li><code>next()</code> , <code>nextLine()</code> 的区别<ul><li>next()<ol><li>读取到有效字符才可以结束输入 !</li><li>输入有效字符之前有空白 , next()  自动去除</li><li>只有输入有效字符才把后面的输入的空白座位分隔符或者结束符</li><li><strong><code>next()</code></strong> 不能获取有空格的字符串</li></ol></li><li>nextLine()<ol><li>以 <code>Enter</code> 为结束符 , <code>newxLine()</code> 获取<code>Enter</code> 之前的所有数据</li><li>可以有空格留空</li></ol></li></ul></li><li>nextLine() 使用频率更高</li></ul><h3 id="二-顺序结构"><a href="#二-顺序结构" class="headerlink" title="二. 顺序结构"></a>二. 顺序结构</h3><ul><li>Java 基本结构就是顺序结构 , 除非特别指示 , 否则就按照顺序一句一句执行 . </li><li>顺序结构是最简单的算法结构 . </li><li>语句与语句之间 , 框与框之间是按照从上到下的顺序进行的 , 他由若干个依次执行的处理步骤组成的 , 他是任何一个算法都离不开的一种基本算法结构 . </li></ul><h3 id="三-选择结构"><a href="#三-选择结构" class="headerlink" title="三. 选择结构"></a>三. 选择结构</h3><ol><li><p><code>if</code> 选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br><span class="hljs-comment">// 表达式值为 true 走这里</span><br>&#125;<br><br><span class="hljs-comment">// if 双选择结构</span><br><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br><span class="hljs-comment">// 表达式值为 true 走这里</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 表达式为 false 走这里</span><br>&#125;<br><br><span class="hljs-comment">// if 多选择结构</span><br><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<br> <span class="hljs-comment">// 表达式1值为 true 走这里</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<br><span class="hljs-comment">// 表达式值2为 true 走这里</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br><span class="hljs-comment">// 表达式3值为 true 走这里</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 当以上表达式为 false 走这里</span><br>&#125;<br><br><span class="hljs-comment">// 嵌套 if 结构 互相互不干扰</span><br><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br><span class="hljs-comment">// 表达式3值为 true 走这里</span><br>    <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br><span class="hljs-comment">// 表达式3值为 true 走这里</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 当以上表达式为 false 走这里</span><br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 当以上表达式为 false 走这里</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>switch</code> 多选择结构 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123; <span class="hljs-comment">// expression 可以为byte,short,int,char,String(jdk 7 之后)</span><br>    <span class="hljs-comment">//可以添加 任意数量的 case 语句 value必须为字符串常量或字面量</span><br>    <span class="hljs-keyword">case</span> value :　<br>        <span class="hljs-comment">// 可以添加相关逻辑</span><br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// break 可有可无 无break继续走下面的case(case穿透) 有break 终止 </span><br>    <span class="hljs-keyword">case</span> value :　<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value :　<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> : <span class="hljs-comment">// 可有可无 有默认执行</span><br>        <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 如果 expression 类型为String 通过 hashCode() 判断</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="四-循环结构"><a href="#四-循环结构" class="headerlink" title="四. 循环结构"></a>四. 循环结构</h3><ol><li><p><code>while</code> 循环</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123; <span class="hljs-comment">// 表达式为 true 时 就会循环执行 </span><br>    <span class="hljs-comment">// 循环体</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>大多数情况下会让表达式失效 值为 <code>false</code> 停止执行</p></li><li><p>循环条件为 <code>true</code> 会造成 一直循环死循环, 业务逻辑中避免出现死循环,死循环会导致程序崩溃或降低性能</p></li></ol></li><li><p><code>do</code> … <code>while</code> 循环</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-comment">// 循环体</span><br>&#125;<span class="hljs-keyword">while</span>(布尔表达式);<br></code></pre></td></tr></table></figure></li><li><p> 表达式不满足时也至少循环执行一次</p></li><li><p><code>while</code> 先判断后执行 <code>do</code> … <code>while</code> 先执行一次在判断</p></li></ol></li><li><p><code>for</code> 循环</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(定义初始循环控制变量并赋值;布尔表达式;循环控制变量变更)&#123;<br>    <span class="hljs-comment">// 循环体</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>for</code> 循环的两种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] x = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>];<br><span class="hljs-comment">// 普通 for 循环</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x.length-<span class="hljs-number">1</span> ; i &gt;= <span class="hljs-number">0</span> ;i--)&#123;<br>    System.out.println(x[i]);<br>&#125;<br><span class="hljs-comment">// 增强 for 循环</span><br><span class="hljs-keyword">for</span>(String i : x)&#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>for</code> 循环 更灵活,更高效</p></li></ol></li></ol><h3 id="五-break-和continue"><a href="#五-break-和continue" class="headerlink" title="五. break 和continue"></a>五. <code>break</code> 和<code>continue</code></h3><ol><li><strong>break</strong><ul><li><code>break</code>控制循环的流程 .</li><li><code>break</code>用于强行退出循环 , 不再进行剩下的循环 . </li><li><code>break</code>语句也在<code>switch</code>语句中使用 . </li></ul></li><li><strong>continue</strong><ul><li><code>continue</code>用于终止某次循环 . </li><li>结束本次循环 , 不再进行执行循环体中尚未执行的语句 , 进行下一次循环 . </li></ul></li></ol><h3 id="六-goto关键字"><a href="#六-goto关键字" class="headerlink" title="六. goto关键字"></a>六. <code>goto</code>关键字</h3><ol><li><p><code>goto</code> 是Java的一个保留字 , 但并未在语言中得到正式使用 ; Java 中没有goto</p></li><li><p><code>标签</code>: 是指后面跟一个冒号的标识符 , 例如 : label:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 不建议使用</span><br>outer:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">500</span> ; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ; j &lt; i/<span class="hljs-number">2</span> ; j++)&#123;<br>        <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span> outer;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础三</title>
    <link href="/blog/2022/03/20/java/basic3/"/>
    <url>/blog/2022/03/20/java/basic3/</url>
    
    <content type="html"><![CDATA[<h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li>哔哩哔哩 <a href="https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0">遇见狂神说</a></li><li>Java 核心技术卷一（原书第十版）</li><li><a href="https://www.runoob.com/java/java-basic-datatypes.html">菜鸟教程</a></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>Java是一种强类型语言,必须为每一个变量声明一种类型。<br>在Java中一共有八种基本类型，其中四种整形，两种浮点类型，一种用于表示Unicode编码的字符单元的字符类型char和一种标识真值得boolean类型。</p></blockquote><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><blockquote><p>整型用于表示没有小数部分的数值，它允许是负数。</p></blockquote><table><thead><tr><th>类型</th><th>储存需求</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>1 字节</td><td>-128 ~ 127</td><td><code>0</code></td></tr><tr><td>short</td><td>2 字节</td><td>-32768 ~ 32767</td><td><code>0</code></td></tr><tr><td>int</td><td>4 字节</td><td>-2147483648 ~ 2147483647</td><td><code>0</code></td></tr><tr><td>long</td><td>8 字节</td><td>-9223372036854775808 ~ 9223372036854775807</td><td><code>0L</code></td></tr></tbody></table><blockquote><p>注：</p><ol><li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一。</li><li>short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一。</li><li>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li></ol></blockquote><h5 id="整型定义"><a href="#整型定义" class="headerlink" title="整型定义"></a>整型定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// 常用 </span><br><span class="hljs-type">long</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<span class="hljs-comment">// 常用</span><br><br><span class="hljs-type">short</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><blockquote><p>浮点型用于表示小数部分的数值。</p></blockquote><table><thead><tr><th>类型</th><th>储存需求</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>flot</td><td>4 字节</td><td>大约±3.40282347E=38F(有效数位为6~7位)</td><td><code>0.0F</code></td></tr><tr><td>double</td><td>8 字节</td><td>大约±1.79769313486231570E+308(有效位数为15位)</td><td><code>0.0D</code></td></tr></tbody></table><blockquote><p>注：</p><ol><li>float 数据类型是单精度。</li><li>double 数据类型是双精度。</li><li>float 在储存大型浮点数组的时候可节省内存空间。</li><li>浮点数的默认类型为 double 类型。</li><li>float在很少的情况下使用，如单精度数据的库，或需要存储大量数据。</li><li>所有浮点数值计算都遵循IEEE 754规范。具体来说下面用于表示溢出和出错的三种特殊的浮点数值：<ul><li>正无穷大</li><li>负无穷大</li><li>NaN(不是一个数字)<br>例如，一个正整数除以0的结果为正无穷大。计算0/0或者负数的平方根结果为NaN</li></ul></li></ol></blockquote><hr><blockquote><p>IEEE 754规定了四种表示浮点数值的方式：单精确度（32位）、双精确度（64位）、延伸单精确度（43比特以上，很少使用）与延伸双精确度（79比特以上，通常以80位实现）。只有32位模式有强制要求，其他都是选择性的。大部分编程语言都有提供IEEE浮点数格式与算术，但有些将其列为非必需的。例如，IEEE 754问世之前就有的C语言，有包括IEEE算术，但不算作强制要求（C语言的float通常是指IEEE单精确度，而double是指双精确度）。<br>来源：<a href="https://baike.baidu.com/item/IEEE%20754/3869922?fr=aladdin">百度百科</a></p></blockquote><h5 id="浮点型定义"><a href="#浮点型定义" class="headerlink" title="浮点型定义"></a>浮点型定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 浮点数 表现的字长有限也是离散的存舍入误差 大约 接近但不等于</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最好不使用浮点数比较 可以使用  BigDecimal</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.1F</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.23232D</span>;<br></code></pre></td></tr></table></figure><h4 id="Unicode和char类型"><a href="#Unicode和char类型" class="headerlink" title="Unicode和char类型"></a><code>Unicode</code>和<code>char</code>类型</h4><blockquote><p>char类型原本表示单个字符，现在有些Unicode字符可以用一个char表示，另外一些Unicode字符需要用两个char表示。<br>char类型的字面量值要用单引号括起来。<br>char默认值<code>u0000</code><br>最小值是 <code>\u0000</code>（十进制等效值为 0）。<br>最大值是 <code>\uffff</code>（即为 65535）。<br>char 数据类型可以储存任何字符。<br>char类型的值可以标识为十六进制值，其范围从<code>\u0000</code>到<code>\Uffff</code>，例如：<code>\u2122</code>标识注册符号（™）还有一些特殊字符的转义序列如下</p></blockquote><table><thead><tr><th>转义序列</th><th>名称</th><th>Unicode值</th></tr></thead><tbody><tr><td>\b</td><td>退格</td><td>\u0008</td></tr><tr><td>\t</td><td>制表</td><td>\u0009</td></tr><tr><td>\n</td><td>换行</td><td>\u000a</td></tr><tr><td>\r</td><td>回车</td><td>\u000d</td></tr><tr><td>&quot;</td><td>双引号</td><td>\u0022</td></tr><tr><td>&#39;</td><td>单引号</td><td>\u0027</td></tr><tr><td>\</td><td>反斜杠</td><td>\u005c</td></tr></tbody></table><hr><blockquote><p>Unicode：统一码（Unicode），也叫万国码、单一码，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。来源：<a href="https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E7%A0%81/2985798?fromtitle=Unicode&fromid=750500&fr=aladdin#1">百度百科</a></p></blockquote><h5 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h5><ol><li>Unicode转义序列会在解析代码之前。</li><li>在程序中不建议使用char类型，除非确实需要处理UTF-16代码单元。最好使用字符串作为抽象数据类型处理（String类型）。</li></ol><h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a><code>boolean</code>类型</h4><blockquote><p>boolean 类型有两个值，fals和true，用来判断逻辑条件。整型数值和布尔值不能进行相互转换。<br>boolean默认值：false。</p></blockquote><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><h5 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h5><p>二进制（binary），发现者莱布尼茨，是在数学和数字电路中以2为基数的记数系统，是以2为基数代表系统的二进位制。这一系统中，通常用两个不同的符号0（代表零）和1（代表一）来表示   。数字电子电路中，逻辑门的实现直接应用了二进制，现代的计算机和依赖计算机的设备里都使用二进制。每个数字称为一个比特（Bit，Binary digit的缩写）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java中二进制 </span><br><span class="hljs-type">int</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b10</span>;<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457?fr=aladdin">详细信息</a></p><h5 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h5><p>八进制，Octal，缩写OCT或O，一种以8为基数的计数法，采用0，1，2，3，4，5，6，7八个数字，逢八进1。一些编程语言中常常以数字0开始表明该数字是八进制。八进制的数和二进制数可以按位对应（八进制一位对应二进制三位），因此常应用在计算机语言中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java中八进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> <span class="hljs-number">010</span>;<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E5%85%AB%E8%BF%9B%E5%88%B6/4230825?fr=aladdin">详细信息</a></p><h5 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h5><p>即1.满十进一，满二十进二，以此类推……2.按权展开，第一位权为10^0，第二位10^1……以此类推，第N位10^（N-1），该数的数值等于每位位的数值*该位对应的权值之和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java中十进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6/6521392?fr=aladdin">详细信息</a></p><h5 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h5><p>十六进制（简写为hex或下标16）是一种基数为16的计数系统，是一种逢16进1的进位制。通常用数字0、1、2、3、4、5、6、7、8、9和字母A、B、C、D、E、F（a、b、c、d、e、f）表示，其中:A<del>F表示10</del>15，这些称作十六进制数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// java中十六进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">aaaa</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x10</span>;<br></code></pre></td></tr></table></figure><p><a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/4162457?fr=aladdin">详细信息</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础二</title>
    <link href="/blog/2022/03/20/java/basic2/"/>
    <url>/blog/2022/03/20/java/basic2/</url>
    
    <content type="html"><![CDATA[<h3 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h3><ul><li>哔哩哔哩 <a href="https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0">遇见狂神说</a></li><li>Java 核心技术卷一（原书第十版）</li><li><a href="https://www.runoob.com/java/java-basic-syntax.html">菜鸟教程</a></li></ul><h3 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h3><blockquote><p>编写 Java 程序时，应注意以下几点：<br>    1. 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。<br>    2. 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。<br>    3. 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。<br>    4. 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。<br>    5. 主方法入口：所有的 Java 程序由 public static void main(String[] args) 方法开始执行。</p></blockquote><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220324150930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图片来源菜鸟教程"></p><h3 id="Java-标识符"><a href="#Java-标识符" class="headerlink" title="Java 标识符"></a>Java 标识符</h3><blockquote><p><em><strong>Java 所有组成部分都需要名字. 类名,变量名及方法名都被称为标识符.</strong></em></p></blockquote><ul><li><em><strong>所有标识符都应该以字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 开始</strong></em></li><li><em><strong>首字母之后可以是字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 和数字 随意组合</strong></em></li><li><em><strong>不能使用关键字作为变量名或方法名 .</strong></em></li><li><em><strong>标识符是大小写敏感的 .</strong></em></li><li><del><em><strong>可以使用中文命名,但是一般不建议这样使用,也不建议使用拼音</strong></em></del></li></ul><h3 id="Java-修饰符"><a href="#Java-修饰符" class="headerlink" title="Java 修饰符"></a>Java 修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><h3 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h3><p>Java 中主要有如下几种类型的变量</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><h3 id="Java-关键字"><a href="#Java-关键字" class="headerlink" title="Java 关键字"></a>Java 关键字</h3><table><thead><tr><th>类别</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>私有的</td></tr><tr><td></td><td>protected</td><td>受保护的</td></tr><tr><td></td><td>public</td><td>公共的</td></tr><tr><td></td><td>default</td><td>默认</td></tr><tr><td>类、方法和变量修饰符</td><td>abstract</td><td>声明抽象</td></tr><tr><td></td><td>class</td><td>类</td></tr><tr><td></td><td>extends</td><td>扩充,继承</td></tr><tr><td></td><td>final</td><td>最终值,不可改变的</td></tr><tr><td></td><td>implements</td><td>实现（接口）</td></tr><tr><td></td><td>interface</td><td>接口</td></tr><tr><td></td><td>native</td><td>本地，原生方法（非 Java 实现）</td></tr><tr><td></td><td>new</td><td>新,创建</td></tr><tr><td></td><td>static</td><td>静态</td></tr><tr><td></td><td>strictfp</td><td>严格,精准</td></tr><tr><td></td><td>synchronized</td><td>线程,同步</td></tr><tr><td></td><td>transient</td><td>短暂</td></tr><tr><td></td><td>volatile</td><td>易失</td></tr><tr><td>程序控制语句</td><td>break</td><td>跳出循环</td></tr><tr><td></td><td>case</td><td>定义一个值以供 switch 选择</td></tr><tr><td></td><td>continue</td><td>继续</td></tr><tr><td></td><td>default</td><td>默认</td></tr><tr><td></td><td>do</td><td>运行</td></tr><tr><td></td><td>else</td><td>否则</td></tr><tr><td></td><td>for</td><td>循环</td></tr><tr><td></td><td>if</td><td>如果</td></tr><tr><td></td><td>instanceof</td><td>实例</td></tr><tr><td></td><td>return</td><td>返回</td></tr><tr><td></td><td>switch</td><td>根据值选择执行</td></tr><tr><td></td><td>while</td><td>循环</td></tr><tr><td>错误处理</td><td>assert</td><td>断言表达式是否为真</td></tr><tr><td></td><td>catch</td><td>捕捉异常</td></tr><tr><td></td><td>finally</td><td>有没有异常都执行</td></tr><tr><td></td><td>throw</td><td>抛出一个异常对象</td></tr><tr><td></td><td>throws</td><td>声明一个异常可能被抛出</td></tr><tr><td></td><td>try</td><td>捕获异常</td></tr><tr><td>包相关</td><td>import</td><td>引入</td></tr><tr><td></td><td>package</td><td>包</td></tr><tr><td>基本类型</td><td>boolean</td><td>布尔型</td></tr><tr><td></td><td>byte</td><td>字节型</td></tr><tr><td></td><td>char</td><td>字符型</td></tr><tr><td></td><td>double</td><td>双精度浮点</td></tr><tr><td></td><td>float</td><td>单精度浮点</td></tr><tr><td></td><td>int</td><td>整型</td></tr><tr><td></td><td>long</td><td>长整型</td></tr><tr><td></td><td>short</td><td>短整型</td></tr><tr><td>变量引用</td><td>super</td><td>父类,超类</td></tr><tr><td></td><td>this</td><td>本类</td></tr><tr><td></td><td>void</td><td>无返回值</td></tr><tr><td>保留关键字</td><td>goto</td><td>是关键字，但不能使用</td></tr><tr><td></td><td>const</td><td>是关键字，但不能使用</td></tr></tbody></table><h4 id="Java-注释"><a href="#Java-注释" class="headerlink" title="Java 注释"></a>Java 注释</h4><ol><li><p>单行注释<code>// 文本</code></p><blockquote><p>从<code>//</code>开始到本行结束</p></blockquote></li><li><p>多行注释<code>/* 文本 */</code></p><blockquote><p>从<code>/*</code>到<code>*/</code>结束</p></blockquote></li><li><p>文本注释<code>/** 文本 */</code></p><blockquote><p>从<code>/**</code>到<code>*/</code>结束，这种注释用来自动生成文档</p></blockquote><ol><li><p>类注释</p><blockquote><p>必须放在<code>impot</code>语句之后类定义之前。</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> ...<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类描述</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br> &#123;<br>   <br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>方法注释</p><blockquote><p>每一个方法注释必须放在所描述方法之前。</p></blockquote><p> 标记</p><ul><li>@param：变量描述，一个方法的所有此标记必须全放在一起。可以使用HTML标记</li><li>@return：当方法添加return返回部分。此标记描述返回部分。可以使用HTML标记</li><li>@throws：用于表示这个方法有可能抛出的异常。</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法描述</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> 参数描述</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回结果描述</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br> &#123;<br>   <span class="hljs-keyword">return</span> i;<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>域注释</p><blockquote><p>只需对共有域（通常指的是静态常量）建立文档。</p></blockquote></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描述</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">I</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li><p>通用注释</p><ul><li>@author 姓名</li><li>@version 版本</li><li>@since 开始版本</li><li>@deprecated 这个标记将对类，方法或变量添加一个不在使用的注释。</li><li>@see 引用</li></ul></li><li><p>包与概述注释<br> 可以直接将类、方法和变量的注释放置在 Java 源文件中，只要用<code>/**...*/</code><br> 文档注释界定就可以了。但是，要想产生包注释，就需要在每一个包目录中添加一个单独的文件。可以<br> 有如下两个选择:</p><ol><li>提供一个以package.htunl 命名的HTML 文件。在标记 sbody一.-1body-之间的所有<br>文本都会被抽取出来。</li><li>提供一个以package-info java 命名的Java 文件。<br>这个文件必须包含一个初始的以<code>/**</code>和<code>*/</code>界定的Javadoc 注释，跟随在一个包语向之后。它不应该包含更多的代码或注释。还可以为所有的源文件提供一个概述性的注释。这个注释将被放置在一个名为 overview.html 的文件中，这个文件位于包含所有源文件的父目录中。标记<body>-…</body>-之间的所<br>有文本将被抽取出来。当用户从导航栏中选择 “Overview”时，就会显示出这些注释内容。</li></ol></li><li><p>注释抽取<br> 在包含原文件的根目录下执行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在目录docDirectory生成</span><br>javadoc -d docDirectory nameOfPackage<br><span class="hljs-comment"># 在当前目录生成</span><br>javadoc nameOfPackage<br></code></pre></td></tr></table></figure><p> 此时文件会存储在docDirectory目录下，如果是多包的情况包名用，号分隔即可。</p></li></ol></li><li><p>有趣的代码注释 哈哈</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">*             ,%%%%%%%%,</span><br><span class="hljs-comment">*           ,%%/\%%%%/\%%</span><br><span class="hljs-comment">*          ,%%%\c &quot;&quot; J/%%%</span><br><span class="hljs-comment">* %.       %%%%/ o  o \%%%</span><br><span class="hljs-comment">* `%%.     %%%%    _  |%%%</span><br><span class="hljs-comment">*  `%%     `%%%%(__Y__)%%&#x27;</span><br><span class="hljs-comment">*  //       ;%%%%`\-/%%%&#x27;</span><br><span class="hljs-comment">* ((       /  `%%%%%%%&#x27;</span><br><span class="hljs-comment">*  \\    .&#x27;          |</span><br><span class="hljs-comment">*   \\  /       \  | |</span><br><span class="hljs-comment">*    \\/         ) | |</span><br><span class="hljs-comment">*     \         /_ | |__</span><br><span class="hljs-comment">*     (___________))))))) </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础一</title>
    <link href="/blog/2022/03/20/java/basic1/"/>
    <url>/blog/2022/03/20/java/basic1/</url>
    
    <content type="html"><![CDATA[<h3 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h3><ul><li>哔哩哔哩：<a href="https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0">遇见狂神说</a></li><li>Java 核心技术卷一（原书第十版）</li><li><a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程</a></li></ul><h3 id="Java-简介"><a href="#Java-简介" class="headerlink" title="Java 简介"></a>Java 简介</h3><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。<br>Java分为三个体系：</p><ul><li>JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）</li><li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li></ul><p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 “2”：J2EE 更名为 Java EE，J2SE 更名为Java SE，J2ME 更名为 Java ME。</p><p>Java语言的发展状况</p><table><thead><tr><th>版本</th><th>年份</th><th>语言特性</th><th>类与接口的数量</th></tr></thead><tbody><tr><td>1.0</td><td>1996</td><td>语言本身</td><td>211</td></tr><tr><td>1.1</td><td>1997</td><td>内部类</td><td>477</td></tr><tr><td>1.2</td><td>1998</td><td>strictfp修饰符</td><td>1524</td></tr><tr><td>1.3</td><td>2000</td><td>无</td><td>1840</td></tr><tr><td>1.4</td><td>2002</td><td>断言</td><td>2723</td></tr><tr><td>5.0</td><td>2004</td><td>泛类型，“for each”循环，可变元参数，自动装箱，元数据，枚举，静态导入</td><td>3279</td></tr><tr><td>6</td><td>2006</td><td>无</td><td>3793</td></tr><tr><td>7</td><td>2011</td><td>基于字符串的switch，钻石操作符，二进制字面量，异常处理改进</td><td>4024</td></tr><tr><td>8</td><td>2014</td><td>lambda表达式，包含默认方法的接口，流和日期/时间库</td><td>4240</td></tr></tbody></table><h3 id="java的特性和优势"><a href="#java的特性和优势" class="headerlink" title="java的特性和优势"></a>java的特性和优势</h3><ol><li>简单性<blockquote><p>语法简单，体积小</p></blockquote></li><li>面向对象<blockquote><p>面向对象设计是一种程序设计技术。他将重点放在数据(即对象)和对象的接口上。Java 语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）。Java 语言全面支持动态绑定，Java语言是一个纯的面向对象程序设计语言。<br>对比面向过程，是两种不同的处理问题的角度，面向过程更注重事情的每一个步骤及顺序，面向对象更注重事情的参与者（对象），及各自需要什么。面向过程比较直接高效，而面向对象更易于复用。</p></blockquote></li><li>分布式<blockquote><p>java有丰富的例程库，用于处理Http和FTP之类的TCP/IP协议。Java应用程序能够通过URL打开和访问网络上的对象，其编写程度和访问本地文件一样。<br>TCP/IP协议：TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。</p></blockquote></li><li>健壮性<blockquote><p>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证。Java投入大量精力进行早期的问题检测，后期动态的检测（运行时），Java采用的指针模型可以消除重写内存和损坏数据的可能性。</p></blockquote></li><li>安全性<blockquote><p>Java可以防范各种攻击，其中就有，运行时堆栈溢出。如蠕虫和病毒的常用攻击手段；破坏自己的进程空间之外的内存；未经授权读写文件。Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵。</p></blockquote></li><li>体系结构中立<blockquote><p>编译器会生成一个体系结构中立的目标文件格式（后缀为 class 的文件），这是一种编译过的代码，只要有Java运行时系统，这些编译后的代码可以在许多处理器上运行。</p></blockquote></li><li>可移植性<blockquote><p>移植性来源于体系结构中立性，Java中数据类型具有固定的大小，消除了代码移植时的一个问题；二进制数据以固定格式进行存储和传输，消除了字节顺序的困扰；Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的。</p></blockquote></li><li>解释性<blockquote><p>Java解释器可以在任何移植了解释器的机器上执行Java字节码。</p></blockquote></li><li>高性能<blockquote><p>字节码可以（在运行时刻）动态地翻译成对应运行这个程序的特定CPU的机器码。</p></blockquote></li><li>多线程<blockquote><p>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread(Runnable) 的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</p></blockquote></li><li>动态性<blockquote><p>Java 语言的设计目标之一是适应于动态变化的环境。Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p></blockquote></li><li>使用的人多</li></ol><p><a href="https://www.tiobe.com/tiobe-index/">TIOBE</a><br><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220324131319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_aHR0cHM6Ly9hbmluY2hvZnRpbWUuZ2l0aHViLmlvLw==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="语言排行"></p><h3 id="JDK-JRE-JVM的关系"><a href="#JDK-JRE-JVM的关系" class="headerlink" title="JDK,JRE,JVM的关系"></a>JDK,JRE,JVM的关系</h3><ol><li><p>JDK  : Java Development Kit java 开发者工具包含JRE和JVM</p></li><li><p>JRE  : Java Runtime Environment JAVA 运行环境包含JVM</p></li><li><p>JVM : Java Virtual Machine JAVA 虚拟机</p></li></ol><h3 id="删除JDK-windows-环境"><a href="#删除JDK-windows-环境" class="headerlink" title="删除JDK( windows 环境)"></a>删除JDK( windows 环境)</h3><ol><li>删除  java <del><em><strong>环境变量</strong></em></del> ( JAVA_HOME , Path 下 JAVA相关)</li><li>删除 java 目录 或 卸载 java</li><li>java -version 测试</li></ol><h3 id="安装JDK-windows环境"><a href="#安装JDK-windows环境" class="headerlink" title="安装JDK ( windows环境)"></a>安装JDK ( windows环境)</h3><ol><li><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">根据不同系统下载对应版本下载JDK8</a></p></li><li><p>双击安装 JDK</p></li><li><p>记住安装目录</p></li><li><p>配置环境变量</p><ol><li><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p></li><li><p>系统变量添加 JAVA_HOME</p><ul><li>变量名: JAVA_HOME 变量值 : E:\Tools\JDK-8</li></ul></li><li><p>用户变量 在Path 下添加</p><ul><li>%JAVA_HOME%\bin</li><li>%JAVA_HOME%\jre\bin</li></ul></li><li><p>打开 cmd java -version 测试 JDK是否安装成功</p></li></ol></li></ol><blockquote><p>详细安装过程可以参考<a href="https://www.runoob.com/java/java-environment-setup.html">菜鸟编程</a></p></blockquote><h3 id="一个简单的Java应用程序Hello-World"><a href="#一个简单的Java应用程序Hello-World" class="headerlink" title="一个简单的Java应用程序Hello World"></a>一个简单的Java应用程序Hello World</h3><ol><li><p>新建文件 HelloWorld.java 首字母大写</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] ages)</span>&#123;<br>      System.out.print(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>根据Java语言规范，<code>main</code>方法必须声明为<code>public</code>格式</p></blockquote></li><li><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前文件夹目录下运行 </span><br>javac HelloWorld.java<br><span class="hljs-comment"># 在当前文件夹编译生成HelloWorld.class</span><br><span class="hljs-comment"># 在当前文件夹目录下运行</span><br>java HelloWorld.class<br><span class="hljs-comment"># 控制台打印 </span><br>Hello World!<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
