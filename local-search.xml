<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo Fluid主题_config.yml</title>
    <link href="/project/2022/03/21/hexo/hexo%20Fluid%20config/"/>
    <url>/project/2022/03/21/hexo/hexo%20Fluid%20config/</url>
    
    <content type="html"><![CDATA[<h3 id="Hexo-Fluid-主题的-config-yml内容"><a href="#Hexo-Fluid-主题的-config-yml内容" class="headerlink" title="Hexo Fluid 主题的 _config.yml内容"></a>Hexo Fluid 主题的 _config.yml内容</h3><p>版本：version：1.8.14</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># Hexo Theme Fluid</span><span class="hljs-comment"># Author: Fluid-dev</span><span class="hljs-comment"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span><span class="hljs-comment">#</span><span class="hljs-comment"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span><span class="hljs-comment"># 你可以从指南中获得更详细的说明</span><span class="hljs-comment">#</span><span class="hljs-comment"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span><span class="hljs-comment"># You can get more detailed help from the guide</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 全局</span><span class="hljs-comment"># Global</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 用于浏览器标签的图标</span><span class="hljs-comment"># Icon for browser tab</span><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/fluid.png</span><span class="hljs-comment"># 用于苹果设备的图标</span><span class="hljs-comment"># Icon for Apple touch</span><span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/fluid.png</span><span class="hljs-comment"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span><span class="hljs-comment"># Title separator in browser tab, eg: article - site</span><span class="hljs-attr">tab_title_separator:</span> <span class="hljs-string">&quot; - &quot;</span><span class="hljs-comment"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span><span class="hljs-comment"># Force all links to be HTTPS (applicable to HTTP mixed error)</span><span class="hljs-attr">force_https:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># 代码块的增强配置</span><span class="hljs-comment"># Enhancements to code blocks</span><span class="hljs-attr">code:</span>  <span class="hljs-comment"># 是否开启复制代码的按钮</span>  <span class="hljs-comment"># Enable copy code button</span>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 代码语言</span>  <span class="hljs-comment"># Code language</span>  <span class="hljs-attr">language:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span>  <span class="hljs-comment"># 代码高亮</span>  <span class="hljs-comment"># Code highlight</span>  <span class="hljs-attr">highlight:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 代码块是否显示行号</span>    <span class="hljs-comment"># If true, the code block display line numbers</span>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span>    <span class="hljs-comment"># Highlight library</span>    <span class="hljs-comment"># Options: highlightjs | prismjs</span>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span>    <span class="hljs-attr">highlightjs:</span>      <span class="hljs-comment"># 在链接中挑选 style 填入</span>      <span class="hljs-comment"># Select a style in the link</span>      <span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github gist&quot;</span>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span>    <span class="hljs-attr">prismjs:</span>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span>      <span class="hljs-comment"># Select the style button on the right side of the link page, you can also set the CSS link</span>      <span class="hljs-comment"># See: https://prismjs.com/</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;tomorrow night&quot;</span>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span>      <span class="hljs-comment"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 一些好玩的功能</span><span class="hljs-comment"># Some fun features</span><span class="hljs-attr">fun_features:</span>  <span class="hljs-comment"># 为 subtitle 添加打字机效果</span>  <span class="hljs-comment"># Typing animation for subtitle</span>  <span class="hljs-attr">typing:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 打印速度，数字越大越慢</span>    <span class="hljs-comment"># Typing speed, the larger the number, the slower</span>    <span class="hljs-attr">typeSpeed:</span> <span class="hljs-number">70</span>    <span class="hljs-comment"># 游标字符</span>    <span class="hljs-comment"># Cursor character</span>    <span class="hljs-attr">cursorChar:</span> <span class="hljs-string">&quot;_&quot;</span>    <span class="hljs-comment"># 是否循环播放效果</span>    <span class="hljs-comment"># If true, loop animation</span>    <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 在指定页面开启，不填则在所有页面开启</span>    <span class="hljs-comment"># Enable in specified page, all pages by default</span>    <span class="hljs-comment"># Options: home | post | tag | category | about | links | page | 404</span>    <span class="hljs-attr">scope:</span> []  <span class="hljs-comment"># 为文章内容中的标题添加锚图标</span>  <span class="hljs-comment"># Add an anchor icon to the title on the post page</span>  <span class="hljs-attr">anchorjs:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">element:</span> <span class="hljs-string">h1,h2,h3,h4,h5,h6</span>    <span class="hljs-comment"># Options: left | right</span>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span>    <span class="hljs-comment"># Options: hover | always | touch</span>    <span class="hljs-attr">visible:</span> <span class="hljs-string">hover</span>    <span class="hljs-comment"># Options: § | # | ❡</span>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 加载进度条</span>  <span class="hljs-comment"># Progress bar when loading</span>  <span class="hljs-attr">progressbar:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">height_px:</span> <span class="hljs-number">3</span>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#29d&quot;</span>    <span class="hljs-comment"># See: https://github.com/rstacruz/nprogress</span>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">showSpinner:</span> <span class="hljs-literal">false</span>, <span class="hljs-attr">trickleSpeed:</span> <span class="hljs-number">100</span> &#125;<span class="hljs-comment"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span><span class="hljs-comment"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span><span class="hljs-attr">dark_mode:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span>  <span class="hljs-comment"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span>  <span class="hljs-comment"># Options: auto | light | dark</span>  <span class="hljs-attr">default:</span> <span class="hljs-string">auto</span><span class="hljs-comment"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span><span class="hljs-comment"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span><span class="hljs-comment"># See: https://www.webdesignrankings.com/resources/lolcolors/</span><span class="hljs-attr">color:</span>  <span class="hljs-comment"># body 背景色</span>  <span class="hljs-comment"># Color of body background</span>  <span class="hljs-attr">body_bg_color:</span> <span class="hljs-string">&quot;#eee&quot;</span>  <span class="hljs-comment"># 暗色模式下的 body 背景色，下同</span>  <span class="hljs-comment"># Color in dark mode, the same below</span>  <span class="hljs-attr">body_bg_color_dark:</span> <span class="hljs-string">&quot;#181c27&quot;</span>  <span class="hljs-comment"># 顶部菜单背景色</span>  <span class="hljs-comment"># Color of navigation bar background</span>  <span class="hljs-attr">navbar_bg_color:</span> <span class="hljs-string">&quot;#2f4154&quot;</span>  <span class="hljs-attr">navbar_bg_color_dark:</span> <span class="hljs-string">&quot;#1f3144&quot;</span>  <span class="hljs-comment"># 顶部菜单字体色</span>  <span class="hljs-comment"># Color of navigation bar text</span>  <span class="hljs-attr">navbar_text_color:</span> <span class="hljs-string">&quot;#fff&quot;</span>  <span class="hljs-attr">navbar_text_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span>  <span class="hljs-comment"># 副标题字体色</span>  <span class="hljs-comment"># Color of navigation bar text</span>  <span class="hljs-attr">subtitle_color:</span> <span class="hljs-string">&quot;#fff&quot;</span>  <span class="hljs-attr">subtitle_color_dark:</span> <span class="hljs-string">&quot;#d0d0d0&quot;</span>  <span class="hljs-comment"># 全局字体色</span>  <span class="hljs-comment"># Color of global text</span>  <span class="hljs-attr">text_color:</span> <span class="hljs-string">&quot;#3c4858&quot;</span>  <span class="hljs-attr">text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-comment"># 全局次级字体色（摘要、简介等位置）</span>  <span class="hljs-comment"># Color of global secondary text (excerpt, introduction, etc.)</span>  <span class="hljs-attr">sec_text_color:</span> <span class="hljs-string">&quot;#718096&quot;</span>  <span class="hljs-attr">sec_text_color_dark:</span> <span class="hljs-string">&quot;#a7a9ad&quot;</span>  <span class="hljs-comment"># 主面板背景色</span>  <span class="hljs-comment"># Color of main board</span>  <span class="hljs-attr">board_color:</span> <span class="hljs-string">&quot;#fff&quot;</span>  <span class="hljs-attr">board_color_dark:</span> <span class="hljs-string">&quot;#252d38&quot;</span>  <span class="hljs-comment"># 文章正文字体色</span>  <span class="hljs-comment"># Color of post text</span>  <span class="hljs-attr">post_text_color:</span> <span class="hljs-string">&quot;#2c3e50&quot;</span>  <span class="hljs-attr">post_text_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-comment"># 文章正文字体色（h1 h2 h3...）</span>  <span class="hljs-comment"># Color of Article heading (h1 h2 h3...)</span>  <span class="hljs-attr">post_heading_color:</span> <span class="hljs-string">&quot;#1a202c&quot;</span>  <span class="hljs-attr">post_heading_color_dark:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-comment"># 文章超链接字体色</span>  <span class="hljs-comment"># Color of post link</span>  <span class="hljs-attr">post_link_color:</span> <span class="hljs-string">&quot;#0366d6&quot;</span>  <span class="hljs-attr">post_link_color_dark:</span> <span class="hljs-string">&quot;#1589e9&quot;</span>  <span class="hljs-comment"># 超链接悬浮时字体色</span>  <span class="hljs-comment"># Color of link when hovering</span>  <span class="hljs-attr">link_hover_color:</span> <span class="hljs-string">&quot;#30a9de&quot;</span>  <span class="hljs-attr">link_hover_color_dark:</span> <span class="hljs-string">&quot;#30a9de&quot;</span>  <span class="hljs-comment"># 超链接悬浮背景色</span>  <span class="hljs-comment"># Color of link background when hovering</span>  <span class="hljs-attr">link_hover_bg_color:</span> <span class="hljs-string">&quot;#f8f9fa&quot;</span>  <span class="hljs-attr">link_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#364151&quot;</span>  <span class="hljs-comment"># 分隔线和表格边线的颜色</span>  <span class="hljs-comment"># Color of horizontal rule and table border</span>  <span class="hljs-attr">line_color:</span> <span class="hljs-string">&quot;#eaecef&quot;</span>  <span class="hljs-attr">line_color_dark:</span> <span class="hljs-string">&quot;#435266&quot;</span>  <span class="hljs-comment"># 滚动条颜色</span>  <span class="hljs-comment"># Color of scrollbar</span>  <span class="hljs-attr">scrollbar_color:</span> <span class="hljs-string">&quot;#c4c6c9&quot;</span>  <span class="hljs-attr">scrollbar_color_dark:</span> <span class="hljs-string">&quot;#687582&quot;</span>  <span class="hljs-comment"># 滚动条悬浮颜色</span>  <span class="hljs-comment"># Color of scrollbar when hovering</span>  <span class="hljs-attr">scrollbar_hover_color:</span> <span class="hljs-string">&quot;#a6a6a6&quot;</span>  <span class="hljs-attr">scrollbar_hover_color_dark:</span> <span class="hljs-string">&quot;#9da8b3&quot;</span>  <span class="hljs-comment"># 按钮背景色</span>  <span class="hljs-comment"># Color of button</span>  <span class="hljs-attr">button_bg_color:</span> <span class="hljs-string">&quot;transparent&quot;</span>  <span class="hljs-attr">button_bg_color_dark:</span> <span class="hljs-string">&quot;transparent&quot;</span>  <span class="hljs-comment"># 按钮悬浮背景色</span>  <span class="hljs-comment"># Color of button when hovering</span>  <span class="hljs-attr">button_hover_bg_color:</span> <span class="hljs-string">&quot;#f2f3f5&quot;</span>  <span class="hljs-attr">button_hover_bg_color_dark:</span> <span class="hljs-string">&quot;#46647e&quot;</span><span class="hljs-comment"># 主题字体配置</span><span class="hljs-comment"># Font</span><span class="hljs-attr">font:</span>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span>  <span class="hljs-attr">font_family:</span>  <span class="hljs-attr">letter_spacing:</span> <span class="hljs-number">0.</span><span class="hljs-string">02em</span>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><span class="hljs-attr">custom_js:</span><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><span class="hljs-comment"># The usage is the same as custom_js</span><span class="hljs-attr">custom_css:</span><span class="hljs-comment"># 网页访问统计</span><span class="hljs-comment"># Analysis of website visitors</span><span class="hljs-attr">web_analytics:</span>  <span class="hljs-comment"># 网页访问统计</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span>  <span class="hljs-comment"># Baidu analytics, get the string behind `hm.js?`</span>  <span class="hljs-comment"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span>  <span class="hljs-attr">baidu:</span>  <span class="hljs-comment"># Google 统计的 Tracking ID</span>  <span class="hljs-comment"># Google analytics, set Tracking ID</span>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span>  <span class="hljs-attr">google:</span>  <span class="hljs-comment"># Google gtag.js 的媒体资源 ID</span>  <span class="hljs-comment"># Google gtag.js GA_MEASUREMENT_ID</span>  <span class="hljs-comment"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span>  <span class="hljs-attr">gtag:</span>  <span class="hljs-comment"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span>  <span class="hljs-comment"># Tencent analytics, set APP ID</span>  <span class="hljs-comment"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span>  <span class="hljs-attr">tencent:</span>    <span class="hljs-attr">sid:</span>    <span class="hljs-attr">cid:</span>  <span class="hljs-comment"># 51.la 站点统计 ID</span>  <span class="hljs-comment"># 51.la analytics</span>  <span class="hljs-comment"># See: https://www.51.la/user/site/index</span>  <span class="hljs-attr">woyaola:</span>  <span class="hljs-comment"># 51.la 站点统计 ID，参见</span>  <span class="hljs-comment"># 友盟/cnzz 站点统计 web_id</span>  <span class="hljs-comment"># cnzz analytics</span>  <span class="hljs-comment"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span>  <span class="hljs-attr">cnzz:</span>  <span class="hljs-comment"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span>  <span class="hljs-comment"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span>  <span class="hljs-attr">leancloud:</span>    <span class="hljs-attr">app_id:</span>    <span class="hljs-attr">app_key:</span>    <span class="hljs-comment"># REST API 服务器地址，国际版不填</span>    <span class="hljs-comment"># Only the Chinese mainland users need to set</span>    <span class="hljs-attr">server_url:</span>    <span class="hljs-comment"># 统计页面时获取路径的属性</span>    <span class="hljs-comment"># Get the attribute of the page path during statistics</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span>    <span class="hljs-comment"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span>    <span class="hljs-comment"># If ture, ignore localhost &amp; 127.0.0.1</span>    <span class="hljs-attr">ignore_local:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span><span class="hljs-comment"># Lazy loading of images and comment plugin on the page</span><span class="hljs-attr">lazyload:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 加载时的占位图片</span>  <span class="hljs-comment"># The placeholder image when loading</span>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span>  <span class="hljs-comment"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span>  <span class="hljs-comment"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span>  <span class="hljs-comment"># The factor of viewport height that triggers loading</span>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span><span class="hljs-comment"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span><span class="hljs-comment"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span><span class="hljs-attr">iconfont:</span> <span class="hljs-string">//at.alicdn.com/t/font_1736178_lbnruvf0jn.css</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 页头</span><span class="hljs-comment"># Header</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 导航栏的相关配置</span><span class="hljs-comment"># Navigation bar</span><span class="hljs-attr">navbar:</span>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;Fluid&quot;</span>  <span class="hljs-comment"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span>  <span class="hljs-comment"># Navigation bar frosted glass special animation. It is an experimental feature</span>  <span class="hljs-attr">ground_glass:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 模糊像素，只能为数字，数字越大模糊度越高</span>    <span class="hljs-comment"># Number of blurred pixel. the larger the number, the higher the blur</span>    <span class="hljs-attr">px:</span> <span class="hljs-number">3</span>    <span class="hljs-comment"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span>    <span class="hljs-comment"># Ratio of opacity, 1.0 is completely opaque</span>    <span class="hljs-comment"># available: 0 - 1.0</span>    <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.7</span>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span>  <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span>  <span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;    <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><span class="hljs-comment"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span><span class="hljs-comment"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span><span class="hljs-attr">search:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span>  <span class="hljs-comment"># Path for search index file, it can be a relative path or an absolute path</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">/local-search.xml</span>  <span class="hljs-comment"># 文件生成在本地的位置，必须是相对路径</span>  <span class="hljs-comment"># The location where the index file is generated locally, it must be a relative location</span>  <span class="hljs-attr">generate_path:</span> <span class="hljs-string">/local-search.xml</span>  <span class="hljs-comment"># 搜索的范围</span>  <span class="hljs-comment"># Search field</span>  <span class="hljs-comment"># Options: post | page | all</span>  <span class="hljs-attr">field:</span> <span class="hljs-string">post</span>  <span class="hljs-comment"># 搜索是否扫描正文</span>  <span class="hljs-comment"># If true, search will scan the post content</span>  <span class="hljs-attr">content:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 首屏图片的相关配置</span><span class="hljs-comment"># Config of the big image on the first screen</span><span class="hljs-attr">banner:</span>  <span class="hljs-comment"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span>  <span class="hljs-comment"># Scrolling parallax</span>  <span class="hljs-attr">parallax:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span>  <span class="hljs-comment"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span>  <span class="hljs-attr">width_height_ratio:</span> <span class="hljs-number">1.0</span><span class="hljs-comment"># 向下滚动的箭头</span><span class="hljs-comment"># Scroll down arrow</span><span class="hljs-attr">scroll_down_arrow:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 头图高度不小于指定比例，才显示箭头</span>  <span class="hljs-comment"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span>  <span class="hljs-comment"># Available: 0 - 100</span>  <span class="hljs-attr">banner_height_limit:</span> <span class="hljs-number">80</span>  <span class="hljs-comment"># 翻页后自动滚动</span>  <span class="hljs-comment"># Auto scroll after page turning</span>  <span class="hljs-attr">scroll_after_turning_page:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 向顶部滚动的箭头</span><span class="hljs-comment"># Scroll top arrow</span><span class="hljs-attr">scroll_top_arrow:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># Open Graph metadata</span><span class="hljs-comment"># See: https://hexo.io/docs/helpers.html#open-graph</span><span class="hljs-attr">open_graph:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">twitter_card:</span> <span class="hljs-string">summary_large_image</span>  <span class="hljs-attr">twitter_id:</span>  <span class="hljs-attr">twitter_site:</span>  <span class="hljs-attr">google_plus:</span>  <span class="hljs-attr">fb_admins:</span>  <span class="hljs-attr">fb_app_id:</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 页脚</span><span class="hljs-comment"># Footer</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">footer:</span>  <span class="hljs-comment"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span>  <span class="hljs-comment"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><span class="hljs-string">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><span class="hljs-string">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><span class="hljs-string">  &#x27;</span>  <span class="hljs-comment"># 展示网站的 PV、UV 统计数</span>  <span class="hljs-comment"># Display website PV and UV statistics</span>  <span class="hljs-attr">statistics:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span>    <span class="hljs-comment"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span>    <span class="hljs-comment"># Options: busuanzi | leancloud</span>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 国内大陆服务器的备案信息</span>  <span class="hljs-comment"># For Chinese mainland website policy, other areas keep disable</span>  <span class="hljs-attr">beian:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># ICP证号</span>    <span class="hljs-attr">icp_text:</span> <span class="hljs-string">京ICP证123456号</span>    <span class="hljs-comment"># 公安备案号，不填则只显示ICP</span>    <span class="hljs-attr">police_text:</span> <span class="hljs-string">京公网安备12345678号</span>    <span class="hljs-comment"># 公安备案的编号，用于URL跳转查询</span>    <span class="hljs-attr">police_code:</span> <span class="hljs-number">12345678</span>    <span class="hljs-comment"># 公安备案的图片. 为空时不显示备案图片</span>    <span class="hljs-attr">police_icon:</span> <span class="hljs-string">/img/police_beian.png</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 首页</span><span class="hljs-comment"># Home Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">index:</span>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span>  <span class="hljs-comment"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-comment"># 头图高度，屏幕百分比</span>  <span class="hljs-comment"># Height ratio of banner image</span>  <span class="hljs-comment"># Available: 0 - 100</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span>  <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span>  <span class="hljs-comment"># Opacity of the banner mask, 1.0 is completely opaque</span>  <span class="hljs-comment"># Available: 0 - 1.0</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 首页副标题的独立设置</span>  <span class="hljs-comment"># Independent config of home page subtitle</span>  <span class="hljs-attr">slogan:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span>    <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;An elegant Material-Design theme for Hexo&quot;</span>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>    <span class="hljs-comment"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>    <span class="hljs-attr">api:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 请求地址</span>      <span class="hljs-comment"># Request url</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-comment"># 请求方法</span>      <span class="hljs-comment"># Request method</span>      <span class="hljs-comment"># Available: GET | POST | PUT</span>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span>      <span class="hljs-comment"># 请求头</span>      <span class="hljs-comment"># Request headers</span>      <span class="hljs-attr">headers:</span> &#123;&#125;      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>      <span class="hljs-comment"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span>      <span class="hljs-attr">keys:</span> []  <span class="hljs-comment"># 自动截取文章摘要</span>  <span class="hljs-comment"># Auto extract post</span>  <span class="hljs-attr">auto_excerpt:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 打开文章的标签方式</span>  <span class="hljs-comment"># The browser tag to open the post</span>  <span class="hljs-comment"># Available: _blank | _self</span>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span>  <span class="hljs-comment"># 是否显示文章信息（时间、分类、标签）</span>  <span class="hljs-comment"># Meta information of post</span>  <span class="hljs-attr">post_meta:</span>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span>  <span class="hljs-comment"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span>  <span class="hljs-attr">post_sticky:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 文章页</span><span class="hljs-comment"># Post Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">post:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">70</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span>  <span class="hljs-comment"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span>  <span class="hljs-attr">default_index_img:</span>  <span class="hljs-comment"># 文章标题下方的元信息</span>  <span class="hljs-comment"># Meta information below title</span>  <span class="hljs-attr">meta:</span>    <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>    <span class="hljs-comment"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span>    <span class="hljs-attr">author:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>    <span class="hljs-comment"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span>    <span class="hljs-attr">date:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span>      <span class="hljs-comment"># ISO-8601 date format</span>      <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL a&quot;</span>    <span class="hljs-comment"># 字数统计</span>    <span class="hljs-comment"># Word count</span>    <span class="hljs-attr">wordcount:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 估计阅读全文需要的时长</span>    <span class="hljs-comment"># Estimated reading time</span>    <span class="hljs-attr">min2read:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-comment"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span>      <span class="hljs-comment"># Average word length (chars count in word), ZH ≈ 2, EN ≈ 5</span>      <span class="hljs-attr">awl:</span> <span class="hljs-number">2</span>      <span class="hljs-comment"># 每分钟阅读字数，如果大部分是技术文章可适度调低</span>      <span class="hljs-comment"># Words per minute</span>      <span class="hljs-attr">wpm:</span> <span class="hljs-number">60</span>    <span class="hljs-comment"># 浏览量计数</span>    <span class="hljs-comment"># Number of visits</span>    <span class="hljs-attr">views:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 统计数据来源</span>      <span class="hljs-comment"># Data Source</span>      <span class="hljs-comment"># Options: busuanzi | leancloud</span>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span>  <span class="hljs-comment"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span>  <span class="hljs-attr">updated:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span>    <span class="hljs-comment"># ISO-8601 date format</span>    <span class="hljs-comment"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>    <span class="hljs-attr">date_format:</span> <span class="hljs-string">&quot;LL a&quot;</span>    <span class="hljs-comment"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span>    <span class="hljs-comment"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span>    <span class="hljs-attr">relative:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 提示标签类型</span>    <span class="hljs-comment"># Note class</span>    <span class="hljs-comment"># Options: default | primary | info | success | warning | danger | light</span>    <span class="hljs-attr">note_class:</span> <span class="hljs-string">info</span>  <span class="hljs-comment"># 侧边栏展示当前分类下的文章</span>  <span class="hljs-comment"># Sidebar of category</span>  <span class="hljs-attr">category_bar:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span>    <span class="hljs-comment"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 置于板块的左侧或右侧</span>    <span class="hljs-comment"># place in the board</span>    <span class="hljs-comment"># Options: left | right</span>    <span class="hljs-attr">placement:</span> <span class="hljs-string">left</span>    <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>    <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span>    <span class="hljs-comment"># Options: date | title | or other field of front-matter</span>    <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;title&quot;</span>    <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>    <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>    <span class="hljs-attr">post_limit:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 侧边栏展示文章目录</span>  <span class="hljs-comment"># Table of contents (TOC) in the sidebar</span>  <span class="hljs-attr">toc:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 置于板块的左侧或右侧</span>    <span class="hljs-comment"># place in the board</span>    <span class="hljs-comment"># Options: left | right</span>    <span class="hljs-attr">placement:</span> <span class="hljs-string">right</span>    <span class="hljs-comment"># 目录会选择这些节点作为标题</span>    <span class="hljs-comment"># TOC will select these nodes as headings</span>    <span class="hljs-attr">headingSelector:</span> <span class="hljs-string">&quot;h1,h2,h3,h4,h5,h6&quot;</span>    <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span>    <span class="hljs-comment"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span>    <span class="hljs-attr">collapseDepth:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 版权声明，会显示在每篇文章的结尾</span>  <span class="hljs-comment"># Copyright, will be displayed at the end of each post</span>  <span class="hljs-attr">copyright:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># CreativeCommons license</span>    <span class="hljs-comment"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span>    <span class="hljs-attr">license:</span> <span class="hljs-string">&#x27;BY&#x27;</span>    <span class="hljs-comment"># 显示作者</span>    <span class="hljs-attr">author:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 显示发布日期</span>    <span class="hljs-comment"># Show post date</span>    <span class="hljs-attr">post_date:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span>    <span class="hljs-comment"># 显示更新日期</span>    <span class="hljs-comment"># Show update date</span>    <span class="hljs-attr">update_date:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;LL&quot;</span>  <span class="hljs-comment"># 文章底部上一篇下一篇功能</span>  <span class="hljs-comment"># Link to previous/next post</span>  <span class="hljs-attr">prev_next:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 文章图片标题</span>  <span class="hljs-comment"># Image caption</span>  <span class="hljs-attr">image_caption:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 文章图片可点击放大</span>  <span class="hljs-comment"># Zoom feature of images</span>  <span class="hljs-attr">image_zoom:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;, &#x27;&#x27;]</span>    <span class="hljs-comment"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\d&#123;3,4&#125;\\/\\d&#123;3,4&#125;\\/&#x27;,&#x27;&#x27;]</span>    <span class="hljs-attr">img_url_replace:</span> [<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]  <span class="hljs-comment"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span>  <span class="hljs-comment"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span>  <span class="hljs-attr">footnote:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span>    <span class="hljs-comment"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class="hljs-doctag">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span>    <span class="hljs-attr">header:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span>  <span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span>  <span class="hljs-attr">math:</span>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span>    <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>    <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># Options: mathjax | katex</span>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span>  <span class="hljs-comment"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span>  <span class="hljs-attr">mermaid:</span>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;  <span class="hljs-comment"># 评论插件</span>  <span class="hljs-comment"># Comment plugin</span>  <span class="hljs-attr">comments:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 评论插件</span><span class="hljs-comment"># Comment plugins</span><span class="hljs-comment">#</span><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># Utterances</span><span class="hljs-comment"># 基于 GitHub Issues</span><span class="hljs-comment"># Based on GitHub Issues</span><span class="hljs-comment"># See: https://utteranc.es</span><span class="hljs-attr">utterances:</span>  <span class="hljs-attr">repo:</span>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><span class="hljs-comment"># Disqus</span><span class="hljs-comment"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span><span class="hljs-comment"># Based on third-party service</span><span class="hljs-comment"># See: https://disqus.com</span><span class="hljs-attr">disqus:</span>  <span class="hljs-attr">shortname:</span>  <span class="hljs-comment"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span>  <span class="hljs-comment"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span>  <span class="hljs-comment"># See: https://github.com/SukkaW/DisqusJS</span>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">apikey:</span><span class="hljs-comment"># Gitalk</span><span class="hljs-comment"># 基于 GitHub Issues</span><span class="hljs-comment"># Based on GitHub Issues</span><span class="hljs-comment"># See: https://github.com/gitalk/gitalk#options</span><span class="hljs-attr">gitalk:</span>  <span class="hljs-attr">clientID:</span>  <span class="hljs-attr">clientSecret:</span>  <span class="hljs-attr">repo:</span>  <span class="hljs-attr">owner:</span>  <span class="hljs-attr">admin:</span> [<span class="hljs-string">&#x27;name&#x27;</span>]  <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]  <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span>  <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 默认 proxy 可能会失效，解决方法请见下方链接</span>  <span class="hljs-comment"># The default proxy may be invalid, refer to the links for solutions</span>  <span class="hljs-comment"># https://github.com/gitalk/gitalk/issues/429</span>  <span class="hljs-comment"># https://github.com/Zibri/cloudflare-cors-anywhere</span>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><span class="hljs-comment"># Valine</span><span class="hljs-comment"># 基于 LeanCloud</span><span class="hljs-comment"># Based on LeanCloud</span><span class="hljs-comment"># See: https://valine.js.org/</span><span class="hljs-attr">valine:</span>  <span class="hljs-attr">appId:</span>  <span class="hljs-attr">appKey:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span>  <span class="hljs-attr">placeholder:</span>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]  <span class="hljs-attr">requiredFields:</span> []  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">serverURLs:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">emojiCDN:</span>  <span class="hljs-attr">emojiMaps:</span>  <span class="hljs-attr">enableQQ:</span> <span class="hljs-literal">false</span><span class="hljs-comment"># Waline</span><span class="hljs-comment"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span><span class="hljs-comment"># Derived from Valine, with self-hosted service and new features</span><span class="hljs-comment"># See: https://waline.js.org/</span><span class="hljs-attr">waline:</span>  <span class="hljs-attr">serverURL:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span>  <span class="hljs-attr">placeholder:</span>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]  <span class="hljs-attr">requiredMeta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>]  <span class="hljs-attr">lang:</span> <span class="hljs-string">&#x27;zh-CN&#x27;</span>  <span class="hljs-attr">emoji:</span> [<span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]  <span class="hljs-attr">dark:</span> <span class="hljs-string">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">&#x27;retro&#x27;</span>  <span class="hljs-attr">avatarCDN:</span> <span class="hljs-string">&#x27;https://seccdn.libravatar.org/avatar/&#x27;</span>  <span class="hljs-attr">avatarForce:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">wordLimit:</span> <span class="hljs-number">0</span>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 畅言 Changyan</span><span class="hljs-comment"># 基于第三方的服务</span><span class="hljs-comment"># Based on third-party service, insufficient support for regions outside China</span><span class="hljs-comment"># http://changyan.kuaizhan.com</span><span class="hljs-attr">changyan:</span>  <span class="hljs-attr">appid:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment"># 来必力 Livere</span><span class="hljs-comment"># 基于第三方的服务</span><span class="hljs-comment"># Based on third-party service</span><span class="hljs-comment"># See: https://www.livere.com</span><span class="hljs-attr">livere:</span>  <span class="hljs-attr">uid:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment"># Remark42</span><span class="hljs-comment"># 需要自托管服务端</span><span class="hljs-comment"># Based on self-hosted service</span><span class="hljs-comment"># See: https://remark42.com</span><span class="hljs-attr">remark42:</span>  <span class="hljs-attr">host:</span>  <span class="hljs-attr">site_id:</span>  <span class="hljs-attr">max_shown_comments:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">locale:</span> <span class="hljs-string">zh</span>  <span class="hljs-attr">components:</span> [<span class="hljs-string">&#x27;embed&#x27;</span>]<span class="hljs-comment"># Twikoo</span><span class="hljs-comment"># 基于腾讯云开发</span><span class="hljs-comment"># Based on Tencent CloudBase</span><span class="hljs-comment"># See: https://twikoo.js.org</span><span class="hljs-attr">twikoo:</span>  <span class="hljs-attr">envId:</span>  <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><span class="hljs-comment"># Cusdis</span><span class="hljs-comment"># 基于第三方服务或自托管服务</span><span class="hljs-comment"># Based on third-party or self-hosted service</span><span class="hljs-comment"># See https://cusdis.com</span><span class="hljs-attr">cusdis:</span>  <span class="hljs-attr">host:</span>  <span class="hljs-attr">app_id:</span>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-cn</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 归档页</span><span class="hljs-comment"># Archive Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">archive:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 分类页</span><span class="hljs-comment"># Category Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">category:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span>  <span class="hljs-comment"># Sort field for categories, with a minus sign is reverse order</span>  <span class="hljs-comment"># Options: length | name</span>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">&quot;-length&quot;</span>  <span class="hljs-comment"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span>  <span class="hljs-comment"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span>  <span class="hljs-attr">collapse_depth:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>  <span class="hljs-comment"># Sort field for posts, with a minus sign is reverse order</span>  <span class="hljs-comment"># Options: date | title | or other field of front-matter</span>  <span class="hljs-attr">post_order_by:</span> <span class="hljs-string">&quot;-date&quot;</span>  <span class="hljs-comment"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>  <span class="hljs-comment"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>  <span class="hljs-attr">post_limit:</span> <span class="hljs-number">10</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 标签页</span><span class="hljs-comment"># Tag Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">tag:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">80</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">tagcloud:</span>    <span class="hljs-attr">min_font:</span> <span class="hljs-number">15</span>    <span class="hljs-attr">max_font:</span> <span class="hljs-number">30</span>    <span class="hljs-attr">unit:</span> <span class="hljs-string">px</span>    <span class="hljs-attr">start_color:</span> <span class="hljs-string">&quot;#BBBBEE&quot;</span>    <span class="hljs-attr">end_color:</span> <span class="hljs-string">&quot;#337ab7&quot;</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 关于页</span><span class="hljs-comment"># About Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">about:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span>  <span class="hljs-comment"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span>  <span class="hljs-comment"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span>  <span class="hljs-attr">icons:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-douban-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://douban.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;豆瓣&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-wechat-fill&quot;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span> &#125;<span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 自定义页</span><span class="hljs-comment"># Custom Page</span><span class="hljs-comment">#</span><span class="hljs-comment"># 通过 hexo new page 命令创建的页面</span><span class="hljs-comment"># Custom Page through `hexo new page`</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">page:</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 404页</span><span class="hljs-comment"># 404 Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">page404:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">85</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 重定向到首页的延迟(毫秒)</span>  <span class="hljs-comment"># Delay in redirecting to home page (milliseconds)</span>  <span class="hljs-attr">redirect_delay:</span> <span class="hljs-number">5000</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 友链页</span><span class="hljs-comment"># Links Page</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">links:</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span>  <span class="hljs-comment"># 友链的成员项</span>  <span class="hljs-comment"># Member item of page</span>  <span class="hljs-attr">items:</span>    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Blog&quot;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题博客&quot;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span>,      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span>    &#125;    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Docs&quot;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题使用指南&quot;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span>    &#125;    <span class="hljs-bullet">-</span> &#123;      <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;Fluid Repo&quot;</span>,      <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;主题 GitHub 仓库&quot;</span>,      <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,      <span class="hljs-attr">avatar:</span> <span class="hljs-string">&quot;/img/favicon.png&quot;</span>    &#125;  <span class="hljs-comment"># 当成员头像加载失败时，替换为指定图片</span>  <span class="hljs-comment"># When the member avatar fails to load, replace the specified image</span>  <span class="hljs-attr">onerror_avatar:</span> <span class="hljs-string">/img/avatar.png</span>  <span class="hljs-comment"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span>  <span class="hljs-comment"># Custom content at the bottom of the links</span>  <span class="hljs-attr">custom:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：https://hexo.fluid-dev.com&lt;/li&gt;&lt;li&gt;图片：https://hexo.fluid-dev.com/img/favicon.png&lt;/li&gt;&lt;/ul&gt;&#x27;</span>  <span class="hljs-comment"># 评论插件</span>  <span class="hljs-comment"># Comment plugin</span>  <span class="hljs-attr">comments:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><span class="hljs-comment">#---------------------------</span><span class="hljs-comment"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span><span class="hljs-comment"># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span><span class="hljs-comment"># ** 如果你不知道如何设置，请不要做任何改动 **</span><span class="hljs-comment">#</span><span class="hljs-comment"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span><span class="hljs-comment"># Be aware that you would better use the same version as default ones to avoid potential problems.</span><span class="hljs-comment"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span><span class="hljs-comment">#---------------------------</span><span class="hljs-attr">static_prefix:</span>  <span class="hljs-comment"># 内部静态</span>  <span class="hljs-comment"># Internal static</span>  <span class="hljs-attr">internal_js:</span> <span class="hljs-string">/js</span>  <span class="hljs-attr">internal_css:</span> <span class="hljs-string">/css</span>  <span class="hljs-attr">internal_img:</span> <span class="hljs-string">/img</span>  <span class="hljs-attr">anchor:</span> <span class="hljs-string">https://lib.baomitu.com/anchor-js/4.3.1/</span>  <span class="hljs-attr">github_markdown:</span> <span class="hljs-string">https://lib.baomitu.com/github-markdown-css/4.0.0/</span>  <span class="hljs-attr">jquery:</span> <span class="hljs-string">https://lib.baomitu.com/jquery/3.6.0/</span>  <span class="hljs-attr">bootstrap:</span> <span class="hljs-string">https://lib.baomitu.com/twitter-bootstrap/4.6.1/</span>  <span class="hljs-attr">prismjs:</span> <span class="hljs-string">https://lib.baomitu.com/prism/1.26.0/</span>  <span class="hljs-attr">tocbot:</span> <span class="hljs-string">https://lib.baomitu.com/tocbot/4.18.0/</span>  <span class="hljs-attr">typed:</span> <span class="hljs-string">https://lib.baomitu.com/typed.js/2.0.12/</span>  <span class="hljs-attr">fancybox:</span> <span class="hljs-string">https://lib.baomitu.com/fancybox/3.5.7/</span>  <span class="hljs-attr">nprogress:</span> <span class="hljs-string">https://lib.baomitu.com/nprogress/0.2.0/</span>  <span class="hljs-attr">mathjax:</span> <span class="hljs-string">https://lib.baomitu.com/mathjax/3.2.0/</span>  <span class="hljs-attr">katex:</span> <span class="hljs-string">https://lib.baomitu.com/KaTeX/0.15.2/</span>  <span class="hljs-attr">busuanzi:</span> <span class="hljs-string">https://busuanzi.ibruce.info/busuanzi/2.3/</span>  <span class="hljs-attr">clipboard:</span> <span class="hljs-string">https://lib.baomitu.com/clipboard.js/2.0.10/</span>  <span class="hljs-attr">mermaid:</span> <span class="hljs-string">https://lib.baomitu.com/mermaid/8.13.10/</span>  <span class="hljs-attr">valine:</span> <span class="hljs-string">https://lib.baomitu.com/valine/1.4.16/</span>  <span class="hljs-attr">waline:</span> <span class="hljs-string">https://lib.baomitu.com/waline/1.5.2/</span>  <span class="hljs-attr">gitalk:</span> <span class="hljs-string">https://lib.baomitu.com/gitalk/1.7.2/</span>  <span class="hljs-attr">disqusjs:</span> <span class="hljs-string">https://lib.baomitu.com/disqusjs/1.3.0/</span>  <span class="hljs-attr">twikoo:</span> <span class="hljs-string">https://lib.baomitu.com/twikoo/1.4.17/</span>  <span class="hljs-attr">hint:</span> <span class="hljs-string">https://lib.baomitu.com/hint.css/2.7.0/</span></code></pre></div><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">GitHub<code>_config.yml</code></a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Fluid主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题之Fluid</title>
    <link href="/project/2022/03/21/hexo/hexo2/"/>
    <url>/project/2022/03/21/hexo/hexo2/</url>
    
    <content type="html"><![CDATA[<h3 id="Fluid简介"><a href="#Fluid简介" class="headerlink" title="Fluid简介"></a>Fluid简介</h3><p>一款 Material Design 风格的 Hexo 博客主题</p><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321172250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="https://hexo.fluid-dev.com/"></p><h3 id="安装主题-version：1-8-14"><a href="#安装主题-version：1-8-14" class="headerlink" title="安装主题(version：1.8.14)"></a>安装主题(version：1.8.14)</h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客根目录执行命令：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install --save hexo-theme-fluid</code></pre></div><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml"><code>_config.yml</code></a>内容复制过去。</p><div class="note note-warning">            <p><code>_config.fluid.yml</code>和hexo的<code>_config.yml</code>同级,可以根据个人需求配置主题相关内容,无法访问可以查看博客<strong>Hexo Fluid主题_config.yml</strong></p>          </div><h3 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span></code></pre></div><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><p>首次使用主题的「关于页」需要手动创建：</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">about</span></code></pre></div><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><div class="code-wrapper"><pre><code class="hljs md">---title: 标题<span class="hljs-section">layout: about</span><span class="hljs-section">---</span>这里写关于页的正文，支持 Markdown, HTML</code></pre></div><div class="note note-warning">            <p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>          </div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>更详细的配置信息等请参考<a href="https://hexo.fluid-dev.com/docs/">官方文档</a></p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">Hexo Fluid GitHub</a></li><li><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></li><li><a href="https://hexo.fluid-dev.com/">Fluid’s blog</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Fluid主题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用</title>
    <link href="/project/2022/03/21/hexo/hexo1/"/>
    <url>/project/2022/03/21/hexo/hexo1/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h3><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h3 id="安装-windows环境"><a href="#安装-windows环境" class="headerlink" title="安装(windows环境)"></a>安装(windows环境)</h3><blockquote><p>Hexo 安装版本相关信息<br>    hexo: 5.4.1<br>    hexo-cli: 4.3.0<br>    os: win32 10.0.22000<br>    node: 16.14.0<br>    v8: 9.4.146.24-node.20<br>    uv: 1.43.0<br>    zlib: 1.2.11<br>    brotli: 1.0.9<br>    ares: 1.18.1<br>    modules: 93<br>    nghttp2: 1.45.1<br>    napi: 8<br>    llhttp: 6.0.4<br>    openssl: 1.1.1m+quic<br>    cldr: 40.0<br>    icu: 70.1<br>    tz: 2021a3<br>    unicode: 14.0<br>    ngtcp2: 0.1.0-DEV<br>    nghttp3: 0.1.0-DEV</p></blockquote><h4 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h4><ul><li><a href="http://nodejs.cn/">Node.js中文网</a></li><li><a href="https://nodejs.org/zh-cn/">Node.js官网</a></li></ul><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h4><ul><li><a href="https://git-scm.com/">Git官网</a></li></ul><h4 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h4><ol><li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p> <div class="code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli</code></pre></div></li><li><p>进阶安装和使用,对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p> <div class="code-wrapper"><pre><code class="hljs bash">npm install hexo</code></pre></div> <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="进行中图示"></div><div class="group-image-wrap"><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="成功后图示"></div></div></div></li><li><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p> <div class="code-wrapper"><pre><code class="hljs bash">Usage: hexo &lt;<span class="hljs-built_in">command</span>&gt;Commands:<span class="hljs-built_in">help</span>     在一个命令上获得帮助。init     创建一个新的Hexo文件夹。version  显示版本信息。Global Options:--config  指定配置文件，而不是使用 _config.yml--cwd     指定CWD--debug   在终端显示所有粗略的信息--draft   显示帖子草稿--safe    禁用所有插件和脚本--silent  隐藏控制台中的输出如需更多帮助，你可以使用 <span class="hljs-string">&quot;hexo help [command]&quot;</span>获得详细信息或者你可以查看文档：http://hexo.io/docs/</code></pre></div></li><li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p> <div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</code></pre></div></li><li><p>注意事项</p><blockquote><p>Node.js 版本限制<br> 我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">Node.js</a> 版本。</p></blockquote><p> <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321144759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图示"></p></li></ol></li></ol><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><h4 id="1-hexo-init-lt-folder-gt"><a href="#1-hexo-init-lt-folder-gt" class="headerlink" title="1. hexo init &lt;folder&gt;"></a>1. <code>hexo init &lt;folder&gt;</code></h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 因为没有把Hexo目录下的node_modules添加到环境变量所以需要npx</span>npx hexo init hexo<span class="hljs-comment"># 成功后</span>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO  Install dependenciesINFO  Start blogging with Hexo!</code></pre></div><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="图示1"></p><h5 id="2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt"><a href="#2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt" class="headerlink" title="2. 成功以后通过命令行进入对应文件夹 cd &lt;folder&gt;"></a>2. 成功以后通过命令行进入对应文件夹 <code>cd &lt;folder&gt;</code></h5><p><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="文件夹内图示"></p><h4 id="3-通过命令行执行-npm-install"><a href="#3-通过命令行执行-npm-install" class="headerlink" title="3. 通过命令行执行 npm install"></a>3. 通过命令行执行 <code>npm install</code></h4><h4 id="4-配置-config-yml-依据-官方中文文档配置-https-hexo-io-zh-cn-docs"><a href="#4-配置-config-yml-依据-官方中文文档配置-https-hexo-io-zh-cn-docs" class="headerlink" title="4. 配置 _config.yml 依据[官方中文文档配置](https://hexo.io/zh-cn/docs/"></a>4. 配置 <code>_config.yml</code> 依据[官方中文文档配置](<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></h4><h4 id="configuration"><a href="#configuration" class="headerlink" title="configuration)"></a>configuration)</h4><h4 id="5-运行hexo"><a href="#5-运行hexo" class="headerlink" title="5. 运行hexo"></a>5. 运行hexo</h4><ul><li><p>可以通过<a href="https://code.visualstudio.com/">vscode</a>打开根目录,执行npm脚本<code>server hexo server</code></p><blockquote><p><strong>注</strong>:可能需要安装插件 <a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script">npm</a>; <a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">npm Intellisense</a></p></blockquote></li><li><p>或者通过命令运行hexo</p>  <div class="code-wrapper"><pre><code class="hljs bash">PS E:\<span class="hljs-built_in">test</span>\hexo&gt; npx hexo serverINFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</code></pre></div><p>  通过访问<a href="http://localhost:4000/">http://localhost:4000/</a>在浏览器中查看</p><p>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321151723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10" alt="hexo默认主题展示"></p></li></ul><h4 id="6-指令"><a href="#6-指令" class="headerlink" title="6. 指令"></a>6. 指令</h4><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 生成静态文件。</span>hexo generate <span class="hljs-comment"># 清除缓存文件 db.json 和已生成的静态文件 public。</span>hexo clean<span class="hljs-comment"># 部署网站。</span>hexo deploy<span class="hljs-comment"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span>hexo server</code></pre></div><p>更多指令详细信息可以访问官网<a href="https://hexo.io/zh-cn/docs/commands">指令</a></p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://hexo.io/zh-cn/">Hexo中文官网</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础八</title>
    <link href="/project/2022/03/20/java/basic8/"/>
    <url>/project/2022/03/20/java/basic8/</url>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><h3 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h3><h3 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h3><h3 id="内部类及OOP实战"><a href="#内部类及OOP实战" class="headerlink" title="内部类及OOP实战"></a>内部类及OOP实战</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础七</title>
    <link href="/project/2022/03/20/java/basic7/"/>
    <url>/project/2022/03/20/java/basic7/</url>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础六</title>
    <link href="/project/2022/03/20/java/basic6/"/>
    <url>/project/2022/03/20/java/basic6/</url>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一-数组的概述"><a href="#一-数组的概述" class="headerlink" title="一. 数组的概述"></a>一. 数组的概述</h3><h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><p>数组是相同类型数据的有序集合 . 是相同类型的若干数据 , 按照一定的先后次序排列组合而成 . 其中每一个数据称作一个数组元素 , 每个数组元素可以通过一个下标来访问它 .</p><h4 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h4><ul><li>其长度是确定的 . 数组一旦被创建 , 他的大小就是不可以改变的 .</li><li>其元素必须是想同类型 , 不允许出现混合类型 .</li><li>数组中元素可以是任意数据类型 , 包括基本数据类型和引用类型</li><li>数组变量属引用类型 , 数组也可以看成是对象 , 数组中的每个元素相当于该对象成员的变量 . 数组本身就是对象 , java中对象实在堆中 , 因此数组无论保存原始类型还是其他对像类型 , **数组对象本身是在堆中 **. </li></ul><h3 id="二-数组的声明和创建"><a href="#二-数组的声明和创建" class="headerlink" title="二. 数组的声明和创建"></a>二. 数组的声明和创建</h3><ol><li>首先必须声明数组变量 , 才能在程序中使用数组 .</li></ol><div class="code-wrapper"><pre><code class="hljs java">dataType [] array;dataType array[];</code></pre></div><ol start="2"><li>java语言使用 <code>new</code> 操作符来创建数组 .</li></ol><div class="code-wrapper"><pre><code class="hljs java">dataType[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];</code></pre></div><ol start="3"><li>数组元素通过索引访问 , 数组索引从 <code>0</code> 开始</li><li>数组长度 <code>arrays.length</code></li></ol><h3 id="三-数组使用"><a href="#三-数组使用" class="headerlink" title="三. 数组使用"></a>三. 数组使用</h3><h4 id="声明一个数组元素"><a href="#声明一个数组元素" class="headerlink" title="声明一个数组元素"></a>声明一个数组元素</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 声明一个元素2</span><span class="hljs-type">int</span> num[];<span class="hljs-type">int</span>[] num;</code></pre></div><h4 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h4><div class="code-wrapper"><pre><code class="hljs java">num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 创建一个空间为10 的数组</span></code></pre></div><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><div class="code-wrapper"><pre><code class="hljs java">num[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">// 给数组赋值</span></code></pre></div><h4 id="创建并赋值"><a href="#创建并赋值" class="headerlink" title="创建并赋值"></a>创建并赋值</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] i = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;</code></pre></div><h4 id="数组的默认初始化"><a href="#数组的默认初始化" class="headerlink" title="数组的默认初始化"></a>数组的默认初始化</h4><p>数组是引用类型 , 它的元素相当于类的实例变量 , 因此数组一经分配空间 , 其中每个元素也被按照实例变量同样的方式被隐式初始化 . </p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arrays = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; <span class="hljs-type">int</span> &lt; arrays.length ; i++)&#123;    System.out.println(arrays[i]);&#125;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> array : arrays)&#123;    System.out.println(array);&#125;</code></pre></div><h4 id="数组做方法入参"><a href="#数组做方法入参" class="headerlink" title="数组做方法入参"></a>数组做方法入参</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arrays = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;printArrays(arrays);<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arrays)</span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> array : arrays)&#123;    System.out.println(array);&#125;&#125;</code></pre></div><h4 id="数组做返回值"><a href="#数组做返回值" class="headerlink" title="数组做返回值"></a>数组做返回值</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];arrays = valueArrays(arrays);<span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] valueArrays(<span class="hljs-type">int</span>[] array)&#123;    <span class="hljs-type">int</span>[] arrays = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array.length];    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; <span class="hljs-type">int</span> &lt; arrays.length ; i++)&#123;    arrays[i] = i;&#125;    <span class="hljs-keyword">return</span> arrays;&#125;</code></pre></div><h3 id="四-多维数组"><a href="#四-多维数组" class="headerlink" title="四. 多维数组"></a>四. 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 例</span>String[][] str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];</code></pre></div><h4 id="多维数组的动态初始化（以二维数组为例）"><a href="#多维数组的动态初始化（以二维数组为例）" class="headerlink" title="多维数组的动态初始化（以二维数组为例）"></a>多维数组的动态初始化（以二维数组为例）</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 格式 : type[][] typeName = new type[typeLength1][typeLength2];</span><span class="hljs-comment">// type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数</span><span class="hljs-comment">// 例</span><span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];</code></pre></div><h4 id="多维数组的引用（以二维数组为例"><a href="#多维数组的引用（以二维数组为例" class="headerlink" title="多维数组的引用（以二维数组为例)"></a>多维数组的引用（以二维数组为例)</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 对二维数组中的每个元素，引用方式为 arrayName[index1][index2]</span>num[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];</code></pre></div><h3 id="五-Arrays-类"><a href="#五-Arrays-类" class="headerlink" title="五. Arrays 类"></a>五. Arrays 类</h3><p><code>java.util.Arrays</code> 类能方便地操作数组，它提供的所有方法都是静态的。</p><ul><li>给数组赋值：通过 fill 方法。</li><li>对数组排序：通过 sort 方法,按升序。</li><li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li><li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li></ul><table><thead><tr><th align="left">序号</th><th align="left">方法和说明</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public static int binarySearch(Object[] a, Object key)</strong> 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td></tr><tr><td align="left">2</td><td align="left"><strong>public static boolean equals(long[] a, long[] a2)</strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td align="left">3</td><td align="left"><strong>public static void fill(int[] a, int val)</strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td align="left">4</td><td align="left"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr></tbody></table><h3 id="六-稀疏数组"><a href="#六-稀疏数组" class="headerlink" title="六. 稀疏数组"></a>六. 稀疏数组</h3><p>当一个数组中大部分元素为<strong>0</strong>时 , 或者为统一数值时 , 可以通过稀疏数组来保存数据 . </p><h4 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h4><ul><li>记录数组一共有几行几列 , 有多少个不同值 .</li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中 , 从而缩小程序的规模 .</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;       <span class="hljs-comment">/**</span><span class="hljs-comment">        * 初始化二维数组</span><span class="hljs-comment">        * &lt;p&gt;</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 1 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 2 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        * &lt;/p&gt;</span><span class="hljs-comment">        */</span>       <span class="hljs-comment">//初始化原数组</span>       <span class="hljs-type">int</span>[][] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];       array[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;       array[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>] = <span class="hljs-number">2</span>;       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : array)&#123;           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item : row)&#123;               System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,item);           &#125;       &#125;       System.out.println(<span class="hljs-string">&quot;---------&gt; 二维数组转稀疏数组&quot;</span>);       <span class="hljs-comment">/**</span><span class="hljs-comment">        * 稀疏数组</span><span class="hljs-comment">        * &lt;p&gt;</span><span class="hljs-comment">        *     11 11 2</span><span class="hljs-comment">        *     1  2  1</span><span class="hljs-comment">        *     2  4  2</span><span class="hljs-comment">        * &lt;/p&gt;</span><span class="hljs-comment">        */</span>       <span class="hljs-comment">//得到非0数据数</span>       <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">11</span>;j++)&#123;               <span class="hljs-keyword">if</span>(array[i][j] != <span class="hljs-number">0</span>)&#123;                   sum++;               &#125;           &#125;       &#125;       <span class="hljs-comment">//创建稀疏数组</span>       <span class="hljs-type">int</span>[][] sparseArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];       <span class="hljs-comment">//给稀疏数组赋值</span>       sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">11</span>;       sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">11</span>;       sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;       <span class="hljs-comment">//将非0的数放入稀疏数组</span>       <span class="hljs-comment">//count：标识第几个非0数</span>       <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">11</span>;j++)&#123;               <span class="hljs-keyword">if</span>(array[i][j] != <span class="hljs-number">0</span>)&#123;                   count++;                   sparseArray[count][<span class="hljs-number">0</span>] = i;                   sparseArray[count][<span class="hljs-number">1</span>] = j;                   sparseArray[count][<span class="hljs-number">2</span>] = array[i][j];               &#125;           &#125;       &#125;       <span class="hljs-comment">//遍历稀疏数组</span>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;sparseArray.length;i++)&#123;           System.out.printf(<span class="hljs-string">&quot;%d%d%d\t&quot;</span>,sparseArray[i][<span class="hljs-number">0</span>],sparseArray[i][<span class="hljs-number">1</span>],sparseArray[i][<span class="hljs-number">2</span>]);       &#125;       System.out.println(<span class="hljs-string">&quot;-----------&gt;稀疏数组转回原始数组&quot;</span>);       <span class="hljs-comment">/**</span><span class="hljs-comment">        * 恢复的二维数组</span><span class="hljs-comment">        * &lt;p&gt;</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 1 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 2 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        *     0 0 0 0 0 0 0 0 0 0 0</span><span class="hljs-comment">        * &lt;/p&gt;</span><span class="hljs-comment">        */</span>       <span class="hljs-type">int</span>[][] oldArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];       <span class="hljs-comment">//将原来非0的数填充回去</span>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;=count;i++)&#123;         oldArray[sparseArray[i][<span class="hljs-number">0</span>]][sparseArray[i][<span class="hljs-number">1</span>]] = sparseArray[i][<span class="hljs-number">2</span>];       &#125;       <span class="hljs-comment">//遍历刚转回的原始数组</span>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : oldArray)&#123;           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item : row)&#123;               System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,item);           &#125;       &#125;   &#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础五</title>
    <link href="/project/2022/03/20/java/basic5/"/>
    <url>/project/2022/03/20/java/basic5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java方法详解"><a href="#Java方法详解" class="headerlink" title="Java方法详解"></a>Java方法详解</h1><h3 id="一-什么是方法"><a href="#一-什么是方法" class="headerlink" title="一. 什么是方法"></a>一. 什么是方法</h3><ul><li>方法是语句的集合,他们在一起执行一个功能<ul><li>方法是解决一类问题的步骤的有序集合</li><li>方法包含于类和对象中</li><li>方法在程序中创建其他地方引用</li></ul></li><li>设计方法的原则 : 方法的本意是功能块 , 就是实现某个功能的语句块集合 . 我们设计方法的时候最好保持方法的原子性 , <strong>就是一个方法只完成一个功能,这样有利于以后的扩展</strong></li></ul><h3 id="二-方法的定义及调用"><a href="#二-方法的定义及调用" class="headerlink" title="二. 方法的定义及调用"></a>二. 方法的定义及调用</h3><ol><li><p>方法的定义 : <strong>方法包含一个方法头和一个方法体</strong> .</p><ul><li><p><strong>修饰符</strong> : 定义该方法的访问类型 . </p></li><li><p><strong>返回值类型</strong> : 方法可能有返回值 .  此方法没有返回值时关键字是 <code>void</code> , 此方法有返回值时返回值类型是要返回值得类型 . </p></li><li><p><strong>方法名</strong> : 方法的实际名称 .</p></li><li><p><strong>参数类型</strong> ：当方法被调用时传递给方法的参数 , 方法既可以有参也可以无参 . </p><ul><li><strong>形式参数</strong> : 在方法被调用时用于接受外界输入的数据 . </li><li><strong>实参</strong> : 调用方法时实际传给方法的数据 . </li></ul></li><li><p><strong>方法体</strong> :包含具体语句 , 定义该方法的功能 .  </p></li><li><p>示例:</p><div class="code-wrapper"><pre><code class="hljs java">修饰符 返回值类型 方法名(参数类型 参数名称 , ....)&#123;    方法体    <span class="hljs-keyword">return</span> 返回值;&#125;</code></pre></div></li></ul></li><li><p>方法的调用 : </p><ul><li><p>调用方法 : 对象名.方法名(方法参数,方法参数,……) . </p></li><li><p>当方法返回一个值得时候</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> max(<span class="hljs-number">30</span>,<span class="hljs-number">40</span>);<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">int</span> j)</span>&#123;    <span class="hljs-keyword">if</span>(i==j)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;<span class="hljs-keyword">if</span>(i&gt;j)&#123;        <span class="hljs-keyword">return</span> i;    &#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> j;    &#125;&#125;</code></pre></div></li><li><p>如果方法没有返回值</p><div class="code-wrapper"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;无参 !!&quot;</span>);</code></pre></div></li></ul></li></ol><h3 id="三-方法的重载"><a href="#三-方法的重载" class="headerlink" title="三. 方法的重载"></a>三. 方法的重载</h3><ol><li>定义 : 重载就是在一个类中 , 有相同的函数名称 , 参数数量 , 类型不同 , 顺序不同 , 返回类型不同的函数.</li><li>方法的重载规则 : <ul><li>方法名必须相同</li><li>参数列表不同<ul><li>参数个数不同</li><li>参数类型不同</li><li>参数类型排序不同</li></ul></li><li>方法的返回类型可以相同也可以不相同</li><li>只有返回类型不同不足以成为方法的重载</li></ul></li></ol><h3 id="四-命令行传参"><a href="#四-命令行传参" class="headerlink" title="四. 命令行传参"></a>四. 命令行传参</h3><p>在运行一个程序的时候传递给他消息 . 这是靠传递命令行参数 <code>main()</code>函数实现 . </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;        System.out.println(args.length);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs kotlin">javac Test.javajava 报名.Test <span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> param<span class="hljs-number">3</span></code></pre></div><h3 id="五-可变参数"><a href="#五-可变参数" class="headerlink" title="五. 可变参数"></a>五. 可变参数</h3><p>一个方法只能传递一个可变参数 , 他必须是方法的最后一个参数 . 任何普通参数必须在他之前声明 . </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span>... i)</span>&#123;&#125;test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;)</code></pre></div><h3 id="六-递归"><a href="#六-递归" class="headerlink" title="六. 递归"></a>六. 递归</h3><p>方法自己调用自己</p><ul><li>递归头 : 终止调用自身 . </li><li>递归体 : 调用自身的条件 . </li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 示例</span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    &#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> n*f(n-<span class="hljs-number">1</span>);    &#125;&#125;</code></pre></div><p><strong>注意</strong> : 能不用就不用递归 ;</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础四</title>
    <link href="/project/2022/03/20/java/basic4/"/>
    <url>/project/2022/03/20/java/basic4/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-流程控制"><a href="#Java-流程控制" class="headerlink" title="Java 流程控制"></a>Java 流程控制</h1><h3 id="一-Scanner-对象"><a href="#一-Scanner-对象" class="headerlink" title="一. Scanner 对象"></a>一. Scanner 对象</h3><ul><li><p>Scanner 可以实现人机交互 , java.util.Scanner 是Java 1.5 的新特性</p></li><li><p>基本用法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);</code></pre></div></li><li><p>使用 : 通过 Scanner 的 <code>next()</code> 和 <code>nextLine()</code> 方法获取输入的字符串 , 在读取前我们一般需要 使用 <code>hasNext()</code> 与 <code>hasNextLine()</code> 判断是否还有输入数据 . </p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 使用</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);System.out.println(<span class="hljs-string">&quot;请输入一串字符&quot;</span>);<span class="hljs-comment">/// 判断是否输入 字符串</span><span class="hljs-keyword">if</span>(scanner.hasNext())&#123;    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> scanner.next();    System.out.println(<span class="hljs-string">&quot;输入的字符串: &quot;</span>+str);&#125;<span class="hljs-comment">// 结束</span>scannr.close();</code></pre></div><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 使用</span>Scanner scanner = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;请输入一串字符&quot;</span>);<span class="hljs-comment">/// 判断是否输入 字符串</span><span class="hljs-keyword">if</span>(scanner.has<span class="hljs-constructor">NextLine()</span>)&#123;    String str = scanner.next<span class="hljs-constructor">Line()</span>;    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;输入的字符串: &quot;</span>+str);&#125;<span class="hljs-comment">// 结束</span>scannr.close<span class="hljs-literal">()</span>;</code></pre></div><ul><li><code>next()</code> , <code>nextLine()</code> 的区别<ul><li>next()<ol><li>读取到有效字符才可以结束输入 !</li><li>输入有效字符之前有空白 , next()  自动去除</li><li>只有输入有效字符才把后面的输入的空白座位分隔符或者结束符</li><li><strong><code>next()</code></strong> 不能获取有空格的字符串</li></ol></li><li>nextLine()<ol><li>以 <code>Enter</code> 为结束符 , <code>newxLine()</code> 获取<code>Enter</code> 之前的所有数据</li><li>可以有空格留空</li></ol></li></ul></li><li>nextLine() 使用频率更高</li></ul><h3 id="二-顺序结构"><a href="#二-顺序结构" class="headerlink" title="二. 顺序结构"></a>二. 顺序结构</h3><ul><li>Java 基本结构就是顺序结构 , 除非特别指示 , 否则就按照顺序一句一句执行 . </li><li>顺序结构是最简单的算法结构 . </li><li>语句与语句之间 , 框与框之间是按照从上到下的顺序进行的 , 他由若干个依次执行的处理步骤组成的 , 他是任何一个算法都离不开的一种基本算法结构 . </li></ul><h3 id="三-选择结构"><a href="#三-选择结构" class="headerlink" title="三. 选择结构"></a>三. 选择结构</h3><ol><li><p><code>if</code> 选择结构</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<span class="hljs-comment">// 表达式值为 true 走这里</span>&#125;<span class="hljs-comment">// if 双选择结构</span><span class="hljs-keyword">if</span>(布尔表达式)&#123;<span class="hljs-comment">// 表达式值为 true 走这里</span>&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">// 表达式为 false 走这里</span>&#125;<span class="hljs-comment">// if 多选择结构</span><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">// 表达式1值为 true 走这里</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">// 表达式值2为 true 走这里</span>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">// 表达式3值为 true 走这里</span>&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">// 当以上表达式为 false 走这里</span>&#125;<span class="hljs-comment">// 嵌套 if 结构 互相互不干扰</span><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">// 表达式3值为 true 走这里</span>    <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">// 表达式3值为 true 走这里</span>&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">// 当以上表达式为 false 走这里</span>&#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">// 当以上表达式为 false 走这里</span>&#125;</code></pre></div></li><li><p><code>switch</code> 多选择结构 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123; <span class="hljs-comment">// expression 可以为byte,short,int,char,String(jdk 7 之后)</span>    <span class="hljs-comment">//可以添加 任意数量的 case 语句 value必须为字符串常量或字面量</span>    <span class="hljs-keyword">case</span> value :　        <span class="hljs-comment">// 可以添加相关逻辑</span>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// break 可有可无 无break继续走下面的case(case穿透) 有break 终止 </span>    <span class="hljs-keyword">case</span> value :　        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">case</span> value :　        <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">default</span> : <span class="hljs-comment">// 可有可无 有默认执行</span>        <span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">// 如果 expression 类型为String 通过 hashCode() 判断</span></code></pre></div></li></ol><h3 id="四-循环结构"><a href="#四-循环结构" class="headerlink" title="四. 循环结构"></a>四. 循环结构</h3><ol><li><p><code>while</code> 循环</p><ol><li><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123; <span class="hljs-comment">// 表达式为 true 时 就会循环执行 </span>    <span class="hljs-comment">// 循环体</span>&#125;</code></pre></div></li><li><p>大多数情况下会让表达式失效 值为 <code>false</code> 停止执行</p></li><li><p>循环条件为 <code>true</code> 会造成 一直循环死循环, 业务逻辑中避免出现死循环,死循环会导致程序崩溃或降低性能</p></li></ol></li><li><p><code>do</code> … <code>while</code> 循环</p><ol><li><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;    <span class="hljs-comment">// 循环体</span>&#125;<span class="hljs-keyword">while</span>(布尔表达式);</code></pre></div></li><li><p> 表达式不满足时也至少循环执行一次</p></li><li><p><code>while</code> 先判断后执行 <code>do</code> … <code>while</code> 先执行一次在判断</p></li></ol></li><li><p><code>for</code> 循环</p><ol><li><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(定义初始循环控制变量并赋值;布尔表达式;循环控制变量变更)&#123;    <span class="hljs-comment">// 循环体</span>&#125;</code></pre></div></li><li><p><code>for</code> 循环的两种方式</p><div class="code-wrapper"><pre><code class="hljs java">String[] x = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>];<span class="hljs-comment">// 普通 for 循环</span><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x.length-<span class="hljs-number">1</span> ; i &gt;= <span class="hljs-number">0</span> ;i--)&#123;    System.out.println(x[i]);&#125;<span class="hljs-comment">// 增强 for 循环</span><span class="hljs-keyword">for</span>(String i : x)&#123;    System.out.println(i);&#125;</code></pre></div></li><li><p><code>for</code> 循环 更灵活,更高效</p></li></ol></li></ol><h3 id="五-break-和continue"><a href="#五-break-和continue" class="headerlink" title="五. break 和continue"></a>五. <code>break</code> 和<code>continue</code></h3><ol><li><strong>break</strong><ul><li><code>break</code>控制循环的流程 .</li><li><code>break</code>用于强行退出循环 , 不再进行剩下的循环 . </li><li><code>break</code>语句也在<code>switch</code>语句中使用 . </li></ul></li><li><strong>continue</strong><ul><li><code>continue</code>用于终止某次循环 . </li><li>结束本次循环 , 不再进行执行循环体中尚未执行的语句 , 进行下一次循环 . </li></ul></li></ol><h3 id="六-goto关键字"><a href="#六-goto关键字" class="headerlink" title="六. goto关键字"></a>六. <code>goto</code>关键字</h3><ol><li><p><code>goto</code> 是Java的一个保留字 , 但并未在语言中得到正式使用 ; Java 中没有goto</p></li><li><p><code>标签</code>: 是指后面跟一个冒号的标识符 , 例如 : label:</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 不建议使用</span>outer:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">500</span> ; i++)&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ; j &lt; i/<span class="hljs-number">2</span> ; j++)&#123;        <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">continue</span> outer;        &#125;    &#125;&#125;</code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础三</title>
    <link href="/project/2022/03/20/java/basic3/"/>
    <url>/project/2022/03/20/java/basic3/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>Java 强语言类型 要求变量的使用严格符合规定 , 所有变量都必须要先定义后才能使用</li><li>Java 数据类型分为两大类</li><li><img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202108261609781.png" alt="图示"  /></li></ul><ol><li><p>定义基本数据类型</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 数值类型</span><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// 常用 </span><span class="hljs-type">long</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<span class="hljs-comment">// 常用</span><span class="hljs-type">short</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-type">byte</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// 浮点数 ** 表现的字长有限也是离散的存舍入误差 大约 接近但不等于</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 最好不使用浮点数比较 可以使用  BigDecimal</span><span class="hljs-comment"> */</span><span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.1F</span>;<span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.23232</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 字符</span><span class="hljs-comment"> * 字符本质上还是数字 可以强制转换成 int</span><span class="hljs-comment"> * Unicode 表 对应</span><span class="hljs-comment"> */</span><span class="hljs-type">char</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<span class="hljs-comment">// Unicode 编码 U0000 ~ UFFFF</span><span class="hljs-type">char</span> <span class="hljs-variable">gg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0061&#x27;</span>;<span class="hljs-comment">// 布尔值</span><span class="hljs-type">boolean</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-type">boolean</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;</code></pre></div></li><li><p>进制</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 十进制</span><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// 二进制 </span><span class="hljs-type">int</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b10</span>;<span class="hljs-comment">// 八进制</span><span class="hljs-type">int</span> <span class="hljs-variable">aaa</span> <span class="hljs-operator">=</span> <span class="hljs-number">010</span>;<span class="hljs-comment">// 十六进制</span><span class="hljs-type">int</span> <span class="hljs-variable">aaaa</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x10</span>;</code></pre></div></li></ol><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ol><li><p>由低到高</p><p>byte，short，char - &gt;int - &gt; long - &gt; float - &gt; double</p></li><li><p>运算中,不同类型的数据先转换为同一类型,然后就行运算</p></li><li><ol><li>强制类型转换 由高到低 </li><li>自动类型转换 由低到高</li></ol></li><li><p><strong>注意点:</strong></p><ol><li>不能对布尔值转换</li><li>不能把对象类型转换成不相关的类型</li><li>由容量高想向容量低转换 强制转换 [(类型)变量名]</li><li>转换时可能出现内存溢出或丢失精度!</li></ol></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ol><li><p>值可以发生变化的</p></li><li><p>变量必须先声明类型</p></li><li><p>变量是基本的储存单元,其要素包括变量名,变量类型,变量作用域.</p><blockquote><p>​    type  varName [=value]   [{,varName[=value]}]</p><p>数据类型 变量命  =值; 可以使用逗号隔开来声明多个变量 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//例</span><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-type">int</span> a,b,c,d;</code></pre></div></blockquote></li><li><p>注意</p><ol><li>每个变量必须有类型,可以是基础类型也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句,因此每一个声明都有分好<code>;</code>结束</li></ol></li><li><p>变量作用域</p><ol><li><p>类变量</p></li><li><p>实例变量 ( 从属于<code>对象</code>  , 如果不自行初始化 , 默认为这个类型的默认值)</p><ol><li>boolean 默认为 <code>false</code></li><li>数值类型默认值为 <code>0</code> 或 <code>0.0</code></li><li>除基本类型其他都为**<code>null</code>**</li></ol></li><li><p>局部变量</p></li><li><p>```java<br>public class test{</p><div class="code-wrapper"><pre><code class="hljs">// 类变量static int i= 1;// 实例变量int y = 10;public void method&#123;    //局部变量    int z = 100;&#125;</code></pre></div><p>}</p><div class="code-wrapper"><pre><code class="hljs axapta"><span class="hljs-meta"># 常量</span><span class="hljs-number">1.</span> 初始化后不能在改变的值<span class="hljs-number">2.</span> 可以理解为特殊的变量 , 他的值被设定后 , 在程序运行过程中不允许被改变 . <span class="hljs-number">3.</span> ```java   <span class="hljs-comment">// final 常量类型 常量名 = 常量值 . </span>   <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> I = <span class="hljs-number">1</span>;</code></pre></div></li></ol></li><li><p>常量名一般使用大写字符</p></li></ol><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><ol><li>所有变量 , 方法名 , 类名 , <strong>见名知意</strong></li><li>类成员变量 / 局部变量 / 方法名 : 首字母小写和驼峰命名</li><li>常量 : 大写字母和下划线 ( 由<code>final</code>修饰符修饰的 )</li><li>类名 : 首字母大写驼峰命名</li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ol><li><p>算数运算符 : + , - , * , / , %  , ++ , –</p><ul><li><code>+</code> : 加法运算，字符串连接运算</li><li><code>-</code> : 减法运算</li><li><code>*</code> : 乘法运算</li><li><code>/</code> : 除法运算</li><li><code>%</code> : 取模运算，两个数字相除取余数</li><li><code>++</code> : 自增 1　</li><li><code>--</code> : 自减 1</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a++; <span class="hljs-comment">// a++先赋值后自增 1</span><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ++a; <span class="hljs-comment">// ++a先自增 1 后赋值</span>System.out.println(b); <span class="hljs-comment">// 输出结果 1</span>System.out.println(c); <span class="hljs-comment">// 输出结果 3</span></code></pre></div></li><li><p>赋值运算符 : = <code>变量名称=表达式内容</code></p></li><li><p>关系运算符 : &gt; , &lt; , &lt;= , &gt;= , == , != , ipstanceof </p><ul><li><code>&gt;</code> : 大于</li><li><code>&lt;</code> : 小于</li><li><code>&lt;=</code> : 小于等于</li><li><code>&gt;=</code> : 大于等于</li><li><code>==</code> : 恒等</li><li><code>!=</code> : 不等</li></ul><blockquote><ol><li><p>ipstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例</p></li><li><p>```java<br>boolean result = obj instanceof Class</p><div class="code-wrapper"><pre><code class="hljs elixir"><span class="hljs-number">3</span>. 其中 obj 为一个对象，<span class="hljs-title class_">Class</span> 表示一个类或者一个接口，当 obj 为 <span class="hljs-title class_">Class</span> 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 <span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span>。<span class="hljs-number">4</span>. **注意**：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。<span class="hljs-number">4</span>. 逻辑运算符 : &amp;&amp; , || , !   - | 运算符 | 用法   | 含义   | 说明                                               | 实例       | 结果  |    | <span class="hljs-symbol">:-----</span> | <span class="hljs-symbol">:-----</span> | <span class="hljs-symbol">:-----</span> | <span class="hljs-symbol">:-------------------------------------------------</span> | <span class="hljs-symbol">:---------</span> | <span class="hljs-symbol">:----</span> |    | &amp;&amp;     | a&amp;&amp;b   | 短路与 | ab 全为 <span class="hljs-literal">true</span> 时，计算结果为 <span class="hljs-literal">true</span>，否则为 <span class="hljs-literal">false</span>。   | <span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span>&amp;&amp;<span class="hljs-number">3</span>&lt;<span class="hljs-number">4</span>   | <span class="hljs-literal">true</span>  |    | \|\|   | a\|\|b | 短路或 | ab 全为 <span class="hljs-literal">false</span> 时，计算结果为 <span class="hljs-literal">false</span>，否则为 <span class="hljs-literal">true</span>。  | <span class="hljs-number">2</span>&lt;<span class="hljs-number">1</span>\|\|<span class="hljs-number">3</span>&gt;<span class="hljs-number">4</span> | <span class="hljs-literal">false</span> |    | !      | !a     | 逻辑非 | a 为 <span class="hljs-literal">true</span> 时，值为 <span class="hljs-literal">false</span>，a 为 <span class="hljs-literal">false</span> 时，值为 <span class="hljs-literal">true</span> | !(<span class="hljs-number">2</span>&gt;<span class="hljs-number">4</span>)     | <span class="hljs-literal">true</span>  |    | \|     | a\|b   | 逻辑或 | ab 全为 <span class="hljs-literal">false</span> 时，计算结果为 <span class="hljs-literal">false</span>，否则为 <span class="hljs-literal">true</span>    | <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span>\|<span class="hljs-number">3</span>&gt;<span class="hljs-number">5</span>   | <span class="hljs-literal">false</span> |    | &amp;      | a&amp;b    | 逻辑与 | ab 全为 <span class="hljs-literal">true</span> 时，计算结果为 <span class="hljs-literal">true</span>，否则为 <span class="hljs-literal">false</span>     | <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span>&amp;<span class="hljs-number">3</span>&lt;<span class="hljs-number">5</span>    | <span class="hljs-literal">true</span>  |  - &amp;&amp; 与 &amp; 区别：如果 a 为 <span class="hljs-literal">false</span>，则不计算 b（因为不论 b 为何值，结果都为 <span class="hljs-literal">false</span>）  - || 与 | 区别：如果 a 为 <span class="hljs-literal">true</span>，则不计算 b（因为不论 b 为何值，结果都为 <span class="hljs-literal">true</span>）  - **注意**：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。  - &gt; 逻辑运算符的优先级为：！运算级别最高，&amp;&amp; 运算高于 || 运算。！运算符的优先级高于算术运算符，而 &amp;&amp; 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。<span class="hljs-number">5</span>. 位运算符 : &amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;<span class="hljs-number">6</span>. 条件运算符 : ? : <span class="hljs-number">7</span>. 扩展赋值运算符 : += , -= , *= , /=<span class="hljs-comment"># 包机制</span><span class="hljs-number">1</span>. 为了更好的组织类 , <span class="hljs-title class_">Java</span> 提供了包机制 , 用于区别类名的命名空间<span class="hljs-number">2</span>. ```java  // 语法格式  package pkg1.pakg2.pakg3. ......;</code></pre></div></li></ol></blockquote></li><li><p>一般利用公司域名倒置作为包名</p></li><li><p>为了能够使用某一个包成员 , 我么需要 Java 程序中明确导入该包</p></li><li><p>```java<br>// 语法格式<br>import pkg1.pakg2.pakg3. …… .ClassName | *;</p><div class="code-wrapper"><pre><code class="hljs autohotkey">#  javadoc生成文档```cmdjavadoc -encoding UTF-<span class="hljs-number">8</span> -charset UTF-<span class="hljs-number">8</span> ClassName.java</code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础二</title>
    <link href="/project/2022/03/20/java/basic2/"/>
    <url>/project/2022/03/20/java/basic2/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA基础语法"><a href="#JAVA基础语法" class="headerlink" title="JAVA基础语法"></a>JAVA基础语法</h1><ol><li><p>注释</p></li><li><p>单行注释    <code>// 文本</code></p></li><li><p>多行注释    <code>/* 文本 */</code></p></li><li><p>文本注释    <code>/** 文本 */</code></p></li><li><p>有趣的代码注释 哈哈</p></li></ol><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/***</span><span class="hljs-comment"> *             ,%%%%%%%%,</span><span class="hljs-comment"> *           ,%%/\%%%%/\%%</span><span class="hljs-comment"> *          ,%%%\c &quot;&quot; J/%%%</span><span class="hljs-comment"> * %.       %%%%/ o  o \%%%</span><span class="hljs-comment"> * `%%.     %%%%    _  |%%%</span><span class="hljs-comment"> *  `%%     `%%%%(__Y__)%%&#x27;</span><span class="hljs-comment"> *  //       ;%%%%`\-/%%%&#x27;</span><span class="hljs-comment"> * ((       /  `%%%%%%%&#x27;</span><span class="hljs-comment"> *  \\    .&#x27;          |</span><span class="hljs-comment"> *   \\  /       \  | |</span><span class="hljs-comment"> *    \\/         ) | |</span><span class="hljs-comment"> *     \         /_ | |__</span><span class="hljs-comment"> *     (___________))))))) 攻城湿</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *        _       _</span><span class="hljs-comment"> * __   _(_)_   _(_) __ _ _ __</span><span class="hljs-comment"> * \ \ / / \ \ / / |/ _` |&#x27;_ \</span><span class="hljs-comment"> *  \ V /| |\ V /| | (_| | | | |</span><span class="hljs-comment"> *   \_/ |_| \_/ |_|\__,_|_| |_|</span><span class="hljs-comment"> */</span></code></pre></div><h5 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h5><ul><li><p>关键字 ↓常用关键字</p><table class="table-view log-set-param"><tbody><tr><td><strong>关键字</strong></td><td><strong>含义</strong></td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循<a href="https://baike.baidu.com/item/IEEE%20754"><u><span style="color:#0066cc;">IEEE 754</span></u></a>算术规范<sup class="sup--normal"><span style="font-size:12px;"> [1]</span></sup><a class="sup-anchor">&nbsp;</a></td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td rowspan="1" colspan="1">while</td><td rowspan="1" colspan="1">用在循环结构中</td></tr></tbody></table></li><li><p><em><strong>Java 所有组成部分都需要名字. 类名,变量名及方法名都被称为标识符.</strong></em></p></li><li><p><em><strong>所有标识符都应该以字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 开始</strong></em> </p></li><li><p><em><strong>首字母之后可以是字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 和数字 随意组合</strong></em></p></li><li><p><em><strong><font color = "red">不能使用关键字作为变量名或方法名 .</font></strong></em></p></li><li><p><em><strong>标识符是<font color="red">大小写敏感</font>的 .</strong></em></p></li><li><p><del><em><strong>可以使用中文命名,但是一般不建议这样使用,也不建议使用拼音</strong></em></del></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础一</title>
    <link href="/project/2022/03/20/java/basic1/"/>
    <url>/project/2022/03/20/java/basic1/</url>
    
    <content type="html"><![CDATA[<h3 id="java的特性和优势"><a href="#java的特性和优势" class="headerlink" title="java的特性和优势"></a>java的特性和优势</h3><ol><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li><li>使用的人多</li></ol><h3 id="JDK-JRE-JVM的关系"><a href="#JDK-JRE-JVM的关系" class="headerlink" title="JDK,JRE,JVM的关系"></a>JDK,JRE,JVM的关系</h3><ol><li><p>JDK  : Java Development Kit java 开发者工具包含JRE和JVM</p></li><li><p>JRE  : Java Runtime Environment JAVA 运行环境包含JVM</p></li><li><p>JVM : Java Virtual Machine JAVA 虚拟机</p></li></ol><h3 id="删除JDK-windows-环境"><a href="#删除JDK-windows-环境" class="headerlink" title="删除JDK( windows 环境)"></a>删除JDK( windows 环境)</h3><ol><li>删除  java <del><em><strong>环境变量</strong></em></del> ( JAVA_HOME , Path 下 JAVA相关)</li><li>删除 java 目录 或 卸载 java</li><li>java -version 测试</li></ol><h3 id="安装JDK-windows环境"><a href="#安装JDK-windows环境" class="headerlink" title="安装JDK ( windows环境)"></a>安装JDK ( windows环境)</h3><ol><li><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">根据不同系统下载对应版本下载JDK8</a> </p></li><li><p>双击安装 JDK</p></li><li><p>记住安装目录</p></li><li><p>配置环境变量</p><ol><li><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p></li><li><p>系统变量添加 JAVA_HOME </p><ul><li>变量名: JAVA_HOME 变量值 : E:\Tools\JDK-8</li></ul></li><li><p>用户变量 在Path 下添加 </p><ul><li>%JAVA_HOME%\bin</li><li>%JAVA_HOME%\jre\bin</li></ul></li><li><p>打开 cmd java -version 测试 JDK是否安装成功</p></li></ol></li></ol><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><ol><li>新建文件 HelloWorld.java 首字母大写</li></ol><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] ages)</span>&#123;        System.out.print(<span class="hljs-string">&quot;Hello World!&quot;</span>);    &#125;&#125;</code></pre></div><ol start="2"><li>在当前文件夹目录下运行 <strong>javac HelloWorld.java</strong> 在当前文件夹编译生成 <strong>HelloWorld.class</strong></li><li>在当前文件夹目录下运行 <strong>java HelloWorld.class</strong> 控制台打印 <em><strong>Hello World!</strong></em></li></ol><h3 id="JAVA-程序运行机制"><a href="#JAVA-程序运行机制" class="headerlink" title="JAVA 程序运行机制"></a>JAVA 程序运行机制</h3><p>java 及时解释型也是编译型语言</p><p><strong>运行机制</strong></p><p>原程序 <code>*.java</code>文件 通过 –&gt; Java编译器 转换为 –&gt; 字节码<code>*.claa</code> 文件 –&gt; 放入虚拟机的 类装载器中 –&gt; 字节码校验器 –&gt; 解释器 –&gt; 操作系统平台</p><p>先编译 –&gt; 在解释</p><h3 id="安装运行软件"><a href="#安装运行软件" class="headerlink" title="安装运行软件"></a>安装运行软件</h3><p>idea</p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><ul><li>哔哩哔哩 <a href="https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0">遇见狂神说</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学-集合的基本运算</title>
    <link href="/project/2022/03/20/math/discrete1/"/>
    <url>/project/2022/03/20/math/discrete1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>集合的基本运算包含集合的并，交，补，差等等。</p></blockquote><h3 id="1-集合的并运算"><a href="#1-集合的并运算" class="headerlink" title="1. 集合的并运算"></a>1. 集合的<code>并</code>运算</h3><ul><li>由所有属于**<em>A</em><strong>或者属于</strong><em>B</em><strong>的元素并在一起而构成的集合，记作</strong><em>A</em><strong>∪</strong><em>B</em><strong>，即</strong><em>A</em><strong>∪</strong><em>B</em><strong>={x|x∈</strong><em>A</em><strong>或x∈</strong><em>B</em>**}.</li><li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong> ={1,2,3,4}<strong><em>A</em><strong>∪</strong><em>B</em></strong> = {1,2,3,4}</li><li>文氏图表示：<br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202111181450080.jpg" alt="**_A_**∪**_B_**"></li><li>并运算性质<ol><li>幂等率：**<em>A</em><strong>∪</strong><em>A</em><strong>=</strong><em>A</em>**</li><li>同一率：**<em>A</em><strong>∪</strong><em>∅</em><strong>=</strong><em>A</em>**</li><li>零一率：**<em>A</em><strong>∪</strong><em>U</em><strong>=</strong><em>U</em>**</li><li>结合率：(<strong><em>A</em><strong>∪</strong><em>B</em></strong>)∪**<em>C</em><strong>=</strong><em>A</em><strong>∪(</strong><em>B</em><strong>∪</strong><em>C</em>**)</li><li>交换率：**<em>A</em><strong>∪</strong><em>B</em><strong>=</strong><em>B</em><strong>∪</strong><em>A</em>**</li></ol></li></ul><h3 id="2-集合的交运算"><a href="#2-集合的交运算" class="headerlink" title="2. 集合的交运算"></a>2. 集合的交运算</h3><ul><li>由所有即属于**<em>A</em><strong>又属于</strong><em>B</em><strong>的元素构成的集合，记作</strong><em>A</em><strong>∩</strong><em>B</em><strong>，即</strong><em>A</em><strong>∩</strong><em>B</em><strong>={x|x∈</strong><em>A</em><strong>且x∈</strong><em>B</em>**}。</li><li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong> ={1,2,3,4}<strong><em>A</em><strong>∩</strong><em>B</em></strong>=#{1,2,3}</li><li>文氏图<br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181501126.jpg" alt="**_A_**∩**_B_**"></li><li>交运算性质：<ol><li>幂等率：**<em>A</em><strong>∩</strong><em>A</em><strong>=</strong><em>A</em>**</li><li>同一率：**<em>A</em><strong>∩</strong><em>U</em><strong>=</strong><em>A</em>**</li><li>零一率：**<em>A</em><strong>∩</strong><em>∅</em><strong>=</strong><em>∅</em>**</li><li>结合率：(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)∩**<em>C</em><strong>=</strong><em>A</em><strong>∩(</strong><em>B</em><strong>∩</strong><em>C</em>**)</li><li>交换率：**<em>A</em><strong>∩</strong><em>B</em><strong>=</strong><em>B</em><strong>∩</strong><em>A</em>**</li></ol></li><li>定理：<ol><li>设**<em>A</em><strong>，</strong><em>B</em><strong>，</strong><em>C</em><strong>是三个集合，则下列分配律成立：<br> <strong><em>A</em><strong>∩(</strong><em>B</em><strong>∪</strong><em>C</em></strong>)=(</strong><em>A</em><strong>∩</strong><em>B</em><strong>)∪(</strong><em>A</em><strong>∩</strong><em>C</em><strong>)<br> <strong><em>A</em><strong>∪(</strong><em>B</em><strong>∩</strong><em>C</em></strong>)=(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)∩(</strong><em>A</em><strong>∪</strong><em>C</em>**)</li><li>设**<em>A</em><strong>，</strong><em>B</em><strong>为两个集合，则下列关系是成立：<br> <strong><em>A</em><strong>∪(</strong><em>A</em><strong>∩</strong><em>B</em></strong>)=</strong><em>A</em>**<br> <strong><em>A</em><strong>∩(</strong><em>A</em><strong>∪</strong><em>B</em></strong>)=<strong><em>A</em></strong></li></ol></li></ul><h3 id="3-集合的补"><a href="#3-集合的补" class="headerlink" title="3. 集合的补"></a>3. 集合的补</h3><ol><li>相对补<ul><li>他是由属于集合**<em>A</em><strong>但不属于</strong><em>B</em><strong>的所有元素构成的，记作</strong><em>A</em><strong>——</strong><em>B</em><strong>（或</strong><em>A</em>** \ <strong><em>B</em><strong>）。</strong><em>A</em><strong>——</strong><em>B</em><strong>称为集合</strong><em>B</em><strong>关于</strong><em>A</em><strong>的补集或相对补。即</strong><em>A</em><strong>——</strong><em>B</em></strong>={x|x∈**<em>A</em><strong>且x∉</strong><em>B</em>**}.</li><li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong>={a,b}<strong><em>A</em><strong>——</strong><em>B</em></strong>={1,2,3}</li><li>文氏图<br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181711241.jpg" alt="**_A_**——**_B_**"></li><li>差运算性质:<ol><li><strong><em>A</em><strong>——</strong><em>A</em></strong>=<strong><em>∅</em></strong></li><li><strong><em>A</em><strong>——</strong><em>∅</em></strong>=<strong><em>A</em></strong></li><li><strong><em>A</em><strong>——</strong><em>U</em></strong>=<strong><em>∅</em></strong></li></ol></li></ul></li><li>绝对补<ul><li>设**<em>U</em><strong>是全集，</strong><em>A</em><strong>是</strong><em>U</em><strong>的一个子集，称</strong><em>U</em><strong>——</strong><em>A</em><strong>为</strong><em>A</em><strong>关于全集的补集，也叫~</strong><em>A</em><strong>或<sup class="normal">—</sup></strong><em>A</em><strong>，即<sup class="normal">—</sup></strong><em>A</em><strong>=</strong><em>U</em><strong>——</strong><em>A</em><strong>={x|x∈</strong><em>U</em><strong>且x∉</strong><em>A</em>**}。</li><li>文氏图<br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181722370.png" alt="**_U_**——**_A_**"></li><li>补运算性质<ol><li>双重否定定律：<del>(</del><strong><em>A</em></strong>)=<strong><em>A</em></strong></li><li>摩根率：<ul><li>：~<strong><em>∅</em></strong>=<strong><em>U</em></strong></li><li>：~<strong><em>U</em></strong>=<strong><em>∅</em></strong></li></ul></li><li>矛盾律：**<em>A</em><strong>∩(~</strong><em>A</em><strong>)=</strong><em>∅</em>**</li><li>排中率：**<em>A</em><strong>∪(~</strong><em>A</em><strong>)=</strong><em>U</em>**</li></ol></li><li>定理<ul><li><ol><li>设**<em>A</em><strong>，</strong><em>B</em><strong>是两个集合，则下列关系式成立：<br>~(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)=~</strong><em>A</em><strong>∩~</strong><em>B</em>**<br><del>(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)=</del><strong><em>A</em><strong>∪~</strong><em>B</em></strong><br>这个定律是德摩根定律。</li></ol></li><li><ol start="2"><li>设**<em>A</em>** , <strong><em>B</em></strong> , **<em>C</em>**是任意三个集合 , 则下列关系式成立:</li></ol>  <strong><em>A</em><strong>——</strong><em>B</em></strong>=<strong><em>A</em><strong>∩~</strong><em>B</em></strong><br>  <strong><em>A</em><strong>——</strong><em>B</em></strong>=<strong><em>A</em><strong>——(</strong><em>A</em><strong>∩</strong><em>B</em></strong>)</li></ul></li></ul></li><li>集合的对称差<ul><li>设**<em>A</em><strong>,</strong><em>B</em><strong>是两个集合 , 集合</strong><em>A</em><strong>和</strong><em>B</em><strong>的对称差或环扣,记作</strong><em>A</em><strong>⊕</strong><em>B</em><strong>,它是一个集合 , 其元素或属于</strong><em>A</em><strong>或属于</strong><em>B</em>** , 但不能既属于**<em>A</em><strong>也属于</strong><em>B</em><strong>. 即</strong><em>A</em><strong>⊕</strong><em>B</em><strong>=(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)——(</strong><em>A</em><strong>∩</strong><em>B</em>**) .</li><li><strong><em>A</em></strong>={0,1,2} ; <strong><em>B</em></strong> ={2,3}<strong><em>A</em><strong>⊕</strong><em>B</em></strong>=(<strong><em>A</em><strong>∪</strong><em>B</em></strong>)——(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)={0,1,2,3}——{2}={0,1,3}<strong><em>A</em><strong>⊕</strong><em>B</em></strong>=(<strong><em>A</em><strong>——</strong><em>B</em></strong>)∪(<strong><em>A</em><strong>——</strong><em>B</em></strong>)={0,1}——{3}={0,1,3}</li><li>文氏图<br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111221631038.jpg" alt="**_A_**⊕**_B_**"></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学-集合论</title>
    <link href="/project/2022/03/20/math/discrete2/"/>
    <url>/project/2022/03/20/math/discrete2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>深入理解集合、子集、空集、全集的表示方法、集合相等、幂集等基本概念；熟练掌握集合的并、交、补运算；能用文氏图表示集合运算；熟练掌握集合运算的基本定律，能熟练地应用这些定律证明集合恒等式；深刻理解序偶与笛卡尔积的概念；理解复合关系与逆关系的概念，掌握关系的性质，等价关系、偏序关系等的定义，了解关系的闭包的计算方法；理解函数、复合函数和逆函数的概念；了解特征函数和容斥原理。</p></blockquote><h3 id="重点和难点"><a href="#重点和难点" class="headerlink" title="重点和难点"></a>重点和难点</h3><ul><li>集合的概念和基本运算</li><li>笛卡尔积和关系的基本运算</li><li>复合关系和逆关系</li><li>关系的性质，等价关系与偏序关系</li><li>关系的闭包（三个闭包）</li><li>映射的基本概念</li><li>复合映射和逆映射</li></ul><h4 id="1-集合的基本概念"><a href="#1-集合的基本概念" class="headerlink" title="1. 集合的基本概念"></a>1. 集合的基本概念</h4><ul><li>数学理论研究概念分为两类<ul><li><code>原始</code>概念：不能给出确切的定义，只能给出描述如直线。</li><li><code>派生</code>概念：可以由其他概念来定义的概念，如平面几何中的正方形可以定义为临边相等的矩形。</li></ul></li><li>集合也是一种原始概念，指具有共同性质的对象汇集成的一个整体。</li><li>集合中的每一个对象称为**<code>集合的元素</code>**。</li><li>通常用大写字母A,B,C…表示集合，用小写字母a，b，c…表示集合中的元素。</li><li>若**<em>A</em><strong>表示一个集合，_a_是集合</strong><em>A</em><strong>中的元素记_a_∈</strong><em>A</em><strong>，读作a属于A；若_a_不是集合</strong><em>A</em><strong>中的元素记_a_∉</strong><em>A</em>**，读作啊不属于A。</li><li>集合**<em>A</em><strong>的元素个数称为集合的基数或势，可以记为|</strong><em>A</em><strong>|或（#</strong><em>A</em>**）。</li><li>集合的元素个数无限的集合称为<code>无穷集</code>或<code>无线集</code>，元素个数有限的集合称为<code>有穷集</code>或<code>有限集</code>。</li></ul><h4 id="2-集合的性质"><a href="#2-集合的性质" class="headerlink" title="2. 集合的性质"></a>2. 集合的性质</h4><ul><li><code>确定性</code>：给定一个元素_a_和一个集合**<em>A</em><strong>，_a_或者属于或者不属于</strong><em>A</em>**，二者必居其一，且仅居其一。</li><li><code>无序性</code>: 集合中元素的排列次序是任意的.</li><li><code>互异性</code>：元素_a_在集合**<em>A</em><strong>中无论重复多少次，_a_只能看作</strong><em>A</em>**中的一个元素。</li><li><code>抽象性</code>：集合中元素可以是具体的，也可以是抽象的，甚至一个集合也可以作为另一个集合的元素。</li></ul><h4 id="3-集合的表示方法"><a href="#3-集合的表示方法" class="headerlink" title="3. 集合的表示方法"></a>3. 集合的表示方法</h4><ul><li>列举法<ul><li>把集合中的所有元素–列举出来，或列出足够多的元素以及反映出集合中成员的特征，元素之间用逗号分开，并用大括号括起来。</li><li>B={a,b,c,d,e,f,…,x,y,z}</li></ul></li><li>描述法<ul><li>把集合中的元素所满足的条件或具有的性质描述出来，即将条件或性质用文字或符号在花括号内竖线后面表示出来。</li><li>C={x|x∈Z且3&lt;x≤6} ,即C={4,5,6}</li></ul></li><li>文氏图法<ul><li>用一个大的矩形表示全集U（最大的集合–所涉及的全部集合都是这个集合的子集），在矩形中花一些圆或其它的几何图形来表示集合，有时也用一些点来表示集合的特定元素。</li><li>集合A={1，2，3} 文氏图法如下图↓<br>  <img src="https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111171523746.png"></li></ul></li><li>递归法 <ul><li>通过计算规则定义集合中的元素。首先给出该集合的初始元素；然后给出由集合中已知元素构造其他元素的方法；最后有限次使用前面的步骤得到元素是集合中的元素。</li><li>斐波那契数列：a0=1，a1=1，an=an-1+an-2</li></ul></li></ul><h4 id="4-集合间的关系"><a href="#4-集合间的关系" class="headerlink" title="4. 集合间的关系"></a>4. 集合间的关系</h4><ol><li>子集<blockquote><p><code>子集</code>定义：给定两个集合**<em>A</em><strong>和</strong><em>B</em><strong>，若</strong><em>A</em><strong>中的<code>任意</code>元素都属于</strong><em>B</em><strong>，则称</strong><em>A</em><strong>是</strong><em>B</em><strong>的<code>子集</code>，或称</strong><em>A</em><strong>包含于</strong><em>B</em><strong>，或称</strong><em>B</em><strong>包含</strong><em>A</em><strong>，通常基座</strong><em>A</em><strong>⊆</strong><em>B</em><strong>,或</strong><em>B</em><strong>⊇</strong><em>A</em>**.</p></blockquote></li></ol><ul><li>集合A={1,2,3,4,5},B={1,3},C={1,3,5}则有B⊆A，C⊆A，B⊆C</li></ul><ol start="2"><li>集合相等<blockquote><p><code>集合相等</code>定义：如果两个集合**<em>A</em><strong>和</strong><em>B</em><strong>的元素完全相同，则称这两个集合<code>完全相等</code>，记</strong><em>A</em><strong>=</strong><em>B</em>**</p></blockquote></li></ol><ul><li>A={1,2,3,4},B={4,3,2,1} A=B</li><li>性质：<ul><li><code>自反性</code>：对于任意集合**<em>A</em><strong>，均为</strong><em>A</em><strong>⊆</strong><em>A</em>**。</li><li><code>反对称性</code>：对于任意集合**<em>A</em><strong>和</strong><em>B</em><strong>，若</strong><em>A</em><strong>⊆</strong><em>B</em><strong>且</strong><em>B</em><strong>⊆</strong><em>A</em><strong>，则</strong><em>A</em><strong>=</strong><em>B</em>**。</li><li><code>传递性</code>：对于任意集合**<em>A</em><strong>，</strong><em>B</em><strong>和</strong><em>C</em><strong>，若</strong><em>A</em><strong>⊆</strong><em>B</em><strong>，</strong><em>B</em><strong>⊆</strong><em>C</em><strong>，则</strong><em>A</em><strong>⊆</strong><em>C</em>**</li></ul></li><li>定理：对于任意两个集合**<em>A</em><strong>，</strong><em>B</em><strong>，</strong><em>A</em><strong>=</strong><em>B</em><strong>的充要条件是</strong><em>A</em><strong>⊆</strong><em>B</em><strong>且</strong><em>B</em><strong>⊆</strong><em>A</em>**</li></ul><ol start="3"><li>真子集<blockquote><p>定义：如果集合**<em>A</em><strong>是集合</strong><em>B</em>** 的子集，但**<em>A</em><strong>和</strong><em>B</em><strong>不相等，也就是说</strong><em>B</em><strong>中至少有一个元素不属于</strong><em>A</em><strong>，则称</strong><em>A</em><strong>是</strong><em>B</em><strong>的<code>真子集</code>，也称</strong><em>B</em><strong>真包含</strong><em>A</em><strong>，或</strong><em>A</em><strong>真包含于</strong><em>B</em><strong>，记作</strong><em>A</em><strong>⊂</strong><em>B</em><strong>或</strong><em>B</em><strong>⊃</strong><em>A</em>**</p></blockquote></li><li>全集<blockquote><p>定义：在一个具体问题中，如果涉及的集合都是某个集合的子集，则这个集合称为<code>全集</code>或<code>论域</code>，记作**<em>U</em><strong>或（</strong><em>E</em>**）</p></blockquote></li><li>空集<blockquote><p>定义：不含任何元素的集合，称为<code>空集</code>，记为**<code>∅</code>**，有时也用<code>&#123;&#125;</code>来表示。</p></blockquote></li></ol><ul><li>定理：空集是一切集合的子集。即对于任意的集合**<em>A</em><strong>,均有<code>∅ ⊆</code></strong><em><code>A</code></em>**</li><li>定理：空集是唯一的</li></ul><ol start="6"><li>幂集<blockquote><p>定义：设**<em>A</em><strong>是集合，</strong><em>A</em><strong>的所有子集构成的集合称为</strong><em>A</em>**的<code>幂集</code>，记作<code>p(A)</code>或<code>2</code><sup class="normal"><code>A</code></sup></p></blockquote></li><li>平凡子集<blockquote><p>定义：对任意集合**<em>A</em><strong>，有∅ ∈</strong><em>p(A)</em><strong>和</strong><em>A</em><strong>∈</strong><em>p(A)</em><strong>，在</strong><em>A</em><strong>的所有子集中，</strong><em>A</em><strong>和</strong><em>∅</em>**这两个子集又叫<code>平凡子集</code></p></blockquote></li><li>定理：设**<em>A</em><strong>是个有限集且|</strong><em>A</em><strong>|=n，则</strong><em>p(A)</em>**=2<sup class="normal">n</sup></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学</title>
    <link href="/project/2022/03/20/math/math/"/>
    <url>/project/2022/03/20/math/math/</url>
    
    <content type="html"><![CDATA[<p>来源: <a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037">百度百科</a></p><blockquote><p>数学[英语：mathematics，源自古希腊语μθημα（máthēma）；经常被缩写为math或maths]，是研究数量、结构、变化、空间以及信息等概念的一门学科。数学是人类对事物的抽象结构与模式进行严格描述的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/project/2022/03/20/hello-world/"/>
    <url>/project/2022/03/20/hello-world/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>    &#123;        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);    &#125;&#125;</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
