{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"d976248b007ad526d50aea851b96a96abe165a88","modified":1647929319035},{"_id":"source/about/index.md","hash":"3d55c844cdf0175c329bfc1908e887341c2f8f58","modified":1647759931146},{"_id":"source/_posts/hexo/hexo2.md","hash":"6b903c32fc31e5bfc4df64e36a32603d3359f288","modified":1647869726612},{"_id":"source/_posts/math/discrete1.md","hash":"127da73dbedc84898bd4fa213dd9fd019cde1e8d","modified":1647868862409},{"_id":"source/_posts/hexo/hexo Fluid config.md","hash":"133ab0e345e76b8fe280d6913b98f161335050da","modified":1647869729702},{"_id":"source/_posts/hexo/hexo1.md","hash":"fc93449fc02670d9a845c443420f87270952ab83","modified":1647869721708},{"_id":"source/_posts/math/discrete2.md","hash":"0dea27811f039f599cf6836cd21c3dc0cb0df9fc","modified":1647868873509},{"_id":"source/_posts/java/basic1.md","hash":"235d693dd207ca3541e5e07c4cec95278f42370e","modified":1647868682844},{"_id":"source/_posts/java/basic3.md","hash":"7cefac77fac3930e41c1ee0ddaa00c46efacda9c","modified":1647868706766},{"_id":"source/_posts/java/basic2.md","hash":"c5af02af957f32c9475cb967c07c67d5c3b79b05","modified":1647868703702},{"_id":"source/_posts/math/math.md","hash":"a7b59d26853b151daa95d1150f1c74a164b5ca25","modified":1647762321582},{"_id":"source/_posts/java/basic4.md","hash":"c5539e84ec87c70486cf44b03daa3c59f9c0e80b","modified":1647868709677},{"_id":"source/_posts/java/basic5.md","hash":"255d92da1ca0ed621535d50617ca301fc26afd79","modified":1647868711919},{"_id":"source/_posts/java/basic6.md","hash":"af3c118cc76d64486d8a28bb50ded992038f1aef","modified":1647868826124},{"_id":"source/_posts/java/basic7.md","hash":"c4007112435c780616dbbb8f8706b9d301942499","modified":1647868768923},{"_id":"source/_posts/java/basic8.md","hash":"677740456676f056aabcf4e19f19641322f80039","modified":1647868762191},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"8a7f1534c228538e2ab56249d5a65829650170ed","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"4e3992cacd64c6888218b0346283258e8f82a27d","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1647755742994},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1647755742868},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1647755742971},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1647755742805},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1647755742931},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1647755742821},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"df6941bd3b860180d01fd39ee859ed2d42f4d1f0","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1647755742852},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1647755742837},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"fd5fcb6a61ad865197a778eeae889b80484227dd","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1647755742871},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1647755742915},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1647755742900},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"08b455b848b21d57e0563b87071c4bae2b63bafe","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"c2d8bfd04bf0734b387c049402b46a06a05fc582","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"80098e8354069631bde8edcd1181a53091a92949","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1647755742971},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1647755742971},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"a2993f23701de9a83e3f428300e62c5c52b4ff4b","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1647755742971},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1647755742971},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"5e86487de0f16c30ca3e16460ab94b57620e31c5","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1647755742946},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1647755742962},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1647755742978},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1647755742978},{"_id":"public/local-search.xml","hash":"733c27f5bdd36dbc0978a373698e07b3f05785c7","modified":1647871752793},{"_id":"public/about/index.html","hash":"6cd3a765c40dc60cdf0b0bae0060750ba2341f8b","modified":1647871752793},{"_id":"public/2022/03/20/java/basic8/index.html","hash":"e3b55d87324e93c3f51e0aa6343083b51ab2d12b","modified":1647871752793},{"_id":"public/2022/03/20/java/basic7/index.html","hash":"5aac4c05f9de668bf179503c8d99473b4720d226","modified":1647871752793},{"_id":"public/2022/03/20/math/math/index.html","hash":"f5409bdaf245905371ff0cc22d17a7c2281554b5","modified":1647871752793},{"_id":"public/2022/03/20/hello-world/index.html","hash":"2d786c6dfc08937c5fbc3212c9280c8882af8904","modified":1647871752793},{"_id":"public/archives/index.html","hash":"0abd36863bb02e58a46841c62924a6d80df10c9d","modified":1647871752793},{"_id":"public/archives/page/2/index.html","hash":"2daae5eacfdffea763ee52be384602bc1d388d6b","modified":1647871752793},{"_id":"public/archives/2022/index.html","hash":"b8c463dcb1aa911f75ce05098f655092e0c3b28f","modified":1647871752793},{"_id":"public/archives/2022/page/2/index.html","hash":"7d59099890b82c3f223c9622a86baad71a5f482d","modified":1647871752793},{"_id":"public/archives/2022/03/index.html","hash":"c06546dc45b18670d4ec84441c2494feb503b0a7","modified":1647871752793},{"_id":"public/archives/2022/03/page/2/index.html","hash":"29a8ecdb4dde40911fb7881a7ca0187a59ea1ebc","modified":1647871752793},{"_id":"public/tags/Hexo/index.html","hash":"e0640b868f6c3ce33a594bbf3cc76f6b31905360","modified":1647871752793},{"_id":"public/tags/离散数学/index.html","hash":"fb0a483b5c70fd2971cde36c8ad09ddd657ad1d4","modified":1647871752793},{"_id":"public/tags/Java基础/index.html","hash":"7d6336bc055ba5a7aaada4eaa59da21441a874ef","modified":1647871752793},{"_id":"public/categories/Hexo/index.html","hash":"7c1512548d220a57d46b17efca828ce8d637a63a","modified":1647871752793},{"_id":"public/categories/数学/index.html","hash":"2551da5b91fa43ce5a5af96877a172abed1fa699","modified":1647871752793},{"_id":"public/categories/Java/index.html","hash":"b23d89976e754acfb629b0ce926e2cf8607275fc","modified":1647871752793},{"_id":"public/categories/数学/离散数学/index.html","hash":"aadca004c1eedc5c598b3f5ffcd55df7c9062a9a","modified":1647871752793},{"_id":"public/categories/Java/Java基础/index.html","hash":"0caa57299bcdb83cdfd133cab14dafc74dd8604b","modified":1647871752793},{"_id":"public/404.html","hash":"c0f5121efe80c6209e7fc490a61592361b595f66","modified":1647871752793},{"_id":"public/tags/index.html","hash":"283f8bda08b660ec7546cbd1587f50e5aa69d33b","modified":1647871752793},{"_id":"public/categories/index.html","hash":"dd5e52fe4fa413845f47316b2414c2572105eba8","modified":1647871752793},{"_id":"public/links/index.html","hash":"5093e894f42b470cc2592e6a63a5d46c3aa202c0","modified":1647871752793},{"_id":"public/2022/03/21/hexo/hexo Fluid config/index.html","hash":"3bd2b04b8d9a2cc73686fa215e289cc3728c22c6","modified":1647871752793},{"_id":"public/2022/03/21/hexo/hexo2/index.html","hash":"46bf056e07826d98092dcd16babbf9ca7566329a","modified":1647871752793},{"_id":"public/2022/03/21/hexo/hexo1/index.html","hash":"496260bb5ca1548a582d9e14a26a56330b1e841a","modified":1647871752793},{"_id":"public/2022/03/20/java/basic6/index.html","hash":"55f5855e29e748c4ab94d0fa6369a542c2de3c73","modified":1647871752793},{"_id":"public/2022/03/20/java/basic5/index.html","hash":"2582c37f3341c5d80ad87fe6917d1286686dba26","modified":1647871752793},{"_id":"public/2022/03/20/java/basic4/index.html","hash":"9328c1df84e100c3be69b85a41326b95794f11be","modified":1647871752793},{"_id":"public/2022/03/20/java/basic3/index.html","hash":"b46eaafe0da55e7649532513a8ce52567237ae9e","modified":1647871752793},{"_id":"public/2022/03/20/java/basic2/index.html","hash":"491693aef92b69fe08ad5dfe04c61ee82db9b9a4","modified":1647871752793},{"_id":"public/2022/03/20/java/basic1/index.html","hash":"697a534f493da759c3ed2d76f402a72168f16946","modified":1647871752793},{"_id":"public/2022/03/20/math/discrete1/index.html","hash":"57c908baf4a5380b4522309dd4f39dc15c869d74","modified":1647871752793},{"_id":"public/2022/03/20/math/discrete2/index.html","hash":"0bdb2fbffd52b5287c9f0369893a30c392eacc5a","modified":1647871752793},{"_id":"public/index.html","hash":"2071edabd65dac593c8626d2dd936bf41922d678","modified":1647871752793},{"_id":"public/page/2/index.html","hash":"e9d7e7d50bca3ddd07b3b685aa13e82e10416122","modified":1647871752793},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1647871752793},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1647871752793},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1647871752793},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1647871752793},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1647871752793},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1647871752793},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1647871752793},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1647871752793},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1647871752793},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1647871752793},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1647871752793},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1647871752793},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1647871752793},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1647871752793},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1647871752793},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1647871752793},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1647871752793},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1647871752793}],"Category":[{"name":"Hexo","_id":"cl10samem0003owsp74q57whx"},{"name":"数学","_id":"cl10samez000jowsp66bl6r0s"},{"name":"Java","_id":"cl10samf6000zowsp5spxaymc"},{"name":"离散数学","parent":"cl10samez000jowsp66bl6r0s","_id":"cl10samf8001aowsp1hpqhjmp"},{"name":"Java基础","parent":"cl10samf6000zowsp5spxaymc","_id":"cl10samfb001nowsp71ekdeh1"},{"name":"Fluid","parent":"cl10samem0003owsp74q57whx","_id":"cl11rd2sn00001kspcrvq0999"},{"name":"Fluid主题","parent":"cl10samem0003owsp74q57whx","_id":"cl11re56000031kspf5kmg39t"}],"Data":[],"Page":[{"title":"about","layout":"about","date":"2022-03-20T05:58:27.000Z","_content":"来源: [百度百科](https://baike.baidu.com/item/%E9%B1%BC%E5%AD%90%E9%85%B1/26021?fr=aladdin)\n> 鱼子酱，呈圆润饱满的颗粒状，入口破裂时味道腥咸。狭义上来讲，只有鲟鱼的鱼卵才制作鱼子酱，其中以产于里海的鱼子酱品质最佳。在法国，Caviar专指鲟鱼卵，并与鹅肝酱、黑松露并称世界三大奢华美食，又因其稀少的产量和乌亮的色泽而被誉为“黑色黄金”或“里海黑珍珠”。鱼子酱没有品牌之说，只有级别和品质之分。高品质的鱼子酱只来源于一种野生鲟鱼：欧鳇鱼、奥西特拉鲟、闪光鲟。  鱼子酱最负盛名的产区是里海南北两岸的俄罗斯或伊朗。里海是世界上最大的内陆水域，也是鲟鱼的故乡，这里的海域蕴涵鲟鱼主食的特殊藻类，渔民在春秋两季捞捕雌鱼，取卵制作鱼子酱。俄罗斯渔猎鲟鱼的历史最早，12世纪时，俄罗斯鱼子酱已远近驰名，法国人吃鱼子酱那一套则是从伊朗皇帝那里学来的。  传统意义上的鱼子酱是指经过盐渍的鲟鱼子，它的价值等于植物界里的松露，价格昂贵，很久以来都是西方餐桌上的“奢侈品”。  大白鲟鱼子酱，一年产量不到一百尾，而且要超过六十岁的大白鲟才可制作鱼子酱。中级的奥西特拉鲟，12斤左右便可取卵制成。最低级的是闪光鲟，到了7斤便可取卵。基于此因，导致了其价格不菲的现状。鱼子酱是法国人的餐桌上有最奢侈的享受，黑黑的鱼子酱在过去是西方王室里的佳肴，是时尚人士和酷爱美食又惦记减肥的朋友的美容健康食谱。上等的鱼子酱颗粒饱满圆滑，色泽透明清亮。至于配酒，最好是配香槟，尤其以酸味较重的香槟跟鱼子酱浓厚的油脂感最匹配。\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2022-03-20 13:58:27\n---\n来源: [百度百科](https://baike.baidu.com/item/%E9%B1%BC%E5%AD%90%E9%85%B1/26021?fr=aladdin)\n> 鱼子酱，呈圆润饱满的颗粒状，入口破裂时味道腥咸。狭义上来讲，只有鲟鱼的鱼卵才制作鱼子酱，其中以产于里海的鱼子酱品质最佳。在法国，Caviar专指鲟鱼卵，并与鹅肝酱、黑松露并称世界三大奢华美食，又因其稀少的产量和乌亮的色泽而被誉为“黑色黄金”或“里海黑珍珠”。鱼子酱没有品牌之说，只有级别和品质之分。高品质的鱼子酱只来源于一种野生鲟鱼：欧鳇鱼、奥西特拉鲟、闪光鲟。  鱼子酱最负盛名的产区是里海南北两岸的俄罗斯或伊朗。里海是世界上最大的内陆水域，也是鲟鱼的故乡，这里的海域蕴涵鲟鱼主食的特殊藻类，渔民在春秋两季捞捕雌鱼，取卵制作鱼子酱。俄罗斯渔猎鲟鱼的历史最早，12世纪时，俄罗斯鱼子酱已远近驰名，法国人吃鱼子酱那一套则是从伊朗皇帝那里学来的。  传统意义上的鱼子酱是指经过盐渍的鲟鱼子，它的价值等于植物界里的松露，价格昂贵，很久以来都是西方餐桌上的“奢侈品”。  大白鲟鱼子酱，一年产量不到一百尾，而且要超过六十岁的大白鲟才可制作鱼子酱。中级的奥西特拉鲟，12斤左右便可取卵制成。最低级的是闪光鲟，到了7斤便可取卵。基于此因，导致了其价格不菲的现状。鱼子酱是法国人的餐桌上有最奢侈的享受，黑黑的鱼子酱在过去是西方王室里的佳肴，是时尚人士和酷爱美食又惦记减肥的朋友的美容健康食谱。上等的鱼子酱颗粒饱满圆滑，色泽透明清亮。至于配酒，最好是配香槟，尤其以酸味较重的香槟跟鱼子酱浓厚的油脂感最匹配。\n","updated":"2022-03-20T07:05:31.146Z","path":"about/index.html","comments":1,"_id":"cl10samed0000owspff5la6xh","content":"<p>来源: <a href=\"https://baike.baidu.com/item/%E9%B1%BC%E5%AD%90%E9%85%B1/26021?fr=aladdin\">百度百科</a></p>\n<blockquote>\n<p>鱼子酱，呈圆润饱满的颗粒状，入口破裂时味道腥咸。狭义上来讲，只有鲟鱼的鱼卵才制作鱼子酱，其中以产于里海的鱼子酱品质最佳。在法国，Caviar专指鲟鱼卵，并与鹅肝酱、黑松露并称世界三大奢华美食，又因其稀少的产量和乌亮的色泽而被誉为“黑色黄金”或“里海黑珍珠”。鱼子酱没有品牌之说，只有级别和品质之分。高品质的鱼子酱只来源于一种野生鲟鱼：欧鳇鱼、奥西特拉鲟、闪光鲟。  鱼子酱最负盛名的产区是里海南北两岸的俄罗斯或伊朗。里海是世界上最大的内陆水域，也是鲟鱼的故乡，这里的海域蕴涵鲟鱼主食的特殊藻类，渔民在春秋两季捞捕雌鱼，取卵制作鱼子酱。俄罗斯渔猎鲟鱼的历史最早，12世纪时，俄罗斯鱼子酱已远近驰名，法国人吃鱼子酱那一套则是从伊朗皇帝那里学来的。  传统意义上的鱼子酱是指经过盐渍的鲟鱼子，它的价值等于植物界里的松露，价格昂贵，很久以来都是西方餐桌上的“奢侈品”。  大白鲟鱼子酱，一年产量不到一百尾，而且要超过六十岁的大白鲟才可制作鱼子酱。中级的奥西特拉鲟，12斤左右便可取卵制成。最低级的是闪光鲟，到了7斤便可取卵。基于此因，导致了其价格不菲的现状。鱼子酱是法国人的餐桌上有最奢侈的享受，黑黑的鱼子酱在过去是西方王室里的佳肴，是时尚人士和酷爱美食又惦记减肥的朋友的美容健康食谱。上等的鱼子酱颗粒饱满圆滑，色泽透明清亮。至于配酒，最好是配香槟，尤其以酸味较重的香槟跟鱼子酱浓厚的油脂感最匹配。</p>\n</blockquote>\n","site":{"data":{}},"wordcount":596,"excerpt":"","more":"<p>来源: <a href=\"https://baike.baidu.com/item/%E9%B1%BC%E5%AD%90%E9%85%B1/26021?fr=aladdin\">百度百科</a></p>\n<blockquote>\n<p>鱼子酱，呈圆润饱满的颗粒状，入口破裂时味道腥咸。狭义上来讲，只有鲟鱼的鱼卵才制作鱼子酱，其中以产于里海的鱼子酱品质最佳。在法国，Caviar专指鲟鱼卵，并与鹅肝酱、黑松露并称世界三大奢华美食，又因其稀少的产量和乌亮的色泽而被誉为“黑色黄金”或“里海黑珍珠”。鱼子酱没有品牌之说，只有级别和品质之分。高品质的鱼子酱只来源于一种野生鲟鱼：欧鳇鱼、奥西特拉鲟、闪光鲟。  鱼子酱最负盛名的产区是里海南北两岸的俄罗斯或伊朗。里海是世界上最大的内陆水域，也是鲟鱼的故乡，这里的海域蕴涵鲟鱼主食的特殊藻类，渔民在春秋两季捞捕雌鱼，取卵制作鱼子酱。俄罗斯渔猎鲟鱼的历史最早，12世纪时，俄罗斯鱼子酱已远近驰名，法国人吃鱼子酱那一套则是从伊朗皇帝那里学来的。  传统意义上的鱼子酱是指经过盐渍的鲟鱼子，它的价值等于植物界里的松露，价格昂贵，很久以来都是西方餐桌上的“奢侈品”。  大白鲟鱼子酱，一年产量不到一百尾，而且要超过六十岁的大白鲟才可制作鱼子酱。中级的奥西特拉鲟，12斤左右便可取卵制成。最低级的是闪光鲟，到了7斤便可取卵。基于此因，导致了其价格不菲的现状。鱼子酱是法国人的餐桌上有最奢侈的享受，黑黑的鱼子酱在过去是西方王室里的佳肴，是时尚人士和酷爱美食又惦记减肥的朋友的美容健康食谱。上等的鱼子酱颗粒饱满圆滑，色泽透明清亮。至于配酒，最好是配香槟，尤其以酸味较重的香槟跟鱼子酱浓厚的油脂感最匹配。</p>\n</blockquote>\n"}],"Post":[{"title":"Hexo Fluid主题_config.yml","data":"2022-03-21T09:51:00.000Z","index_img":"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/3419353.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10","_content":"\n### Hexo Fluid 主题的 _config.yml内容\n\n版本：version：1.8.14\n\n```yml\n#---------------------------\n# Hexo Theme Fluid\n# Author: Fluid-dev\n# Github: https://github.com/fluid-dev/hexo-theme-fluid\n#\n# 配置指南: https://hexo.fluid-dev.com/docs/guide/\n# 你可以从指南中获得更详细的说明\n#\n# Guide: https://hexo.fluid-dev.com/docs/en/guide/\n# You can get more detailed help from the guide\n#---------------------------\n\n\n#---------------------------\n# 全局\n# Global\n#---------------------------\n\n# 用于浏览器标签的图标\n# Icon for browser tab\nfavicon: /img/fluid.png\n\n# 用于苹果设备的图标\n# Icon for Apple touch\napple_touch_icon: /img/fluid.png\n\n# 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名\n# Title separator in browser tab, eg: article - site\ntab_title_separator: \" - \"\n\n# 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）\n# Force all links to be HTTPS (applicable to HTTP mixed error)\nforce_https: false\n\n# 代码块的增强配置\n# Enhancements to code blocks\ncode:\n  # 是否开启复制代码的按钮\n  # Enable copy code button\n  copy_btn: true\n\n  # 代码语言\n  # Code language\n  language:\n    enable: true\n    default: \"TEXT\"\n\n  # 代码高亮\n  # Code highlight\n  highlight:\n    enable: true\n\n    # 代码块是否显示行号\n    # If true, the code block display line numbers\n    line_number: true\n\n    # 实现高亮的库，对应下面的设置\n    # Highlight library\n    # Options: highlightjs | prismjs\n    lib: \"highlightjs\"\n\n    highlightjs:\n      # 在链接中挑选 style 填入\n      # Select a style in the link\n      # See: https://highlightjs.org/static/demo/\n      style: \"github gist\"\n      style_dark: \"dark\"\n\n    prismjs:\n      # 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接\n      # Select the style button on the right side of the link page, you can also set the CSS link\n      # See: https://prismjs.com/\n      style: \"default\"\n      style_dark: \"tomorrow night\"\n\n      # 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成\n      # If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser\n      preprocess: true\n\n# 一些好玩的功能\n# Some fun features\nfun_features:\n  # 为 subtitle 添加打字机效果\n  # Typing animation for subtitle\n  typing:\n    enable: true\n\n    # 打印速度，数字越大越慢\n    # Typing speed, the larger the number, the slower\n    typeSpeed: 70\n\n    # 游标字符\n    # Cursor character\n    cursorChar: \"_\"\n\n    # 是否循环播放效果\n    # If true, loop animation\n    loop: false\n\n    # 在指定页面开启，不填则在所有页面开启\n    # Enable in specified page, all pages by default\n    # Options: home | post | tag | category | about | links | page | 404\n    scope: []\n\n  # 为文章内容中的标题添加锚图标\n  # Add an anchor icon to the title on the post page\n  anchorjs:\n    enable: true\n    element: h1,h2,h3,h4,h5,h6\n    # Options: left | right\n    placement: left\n    # Options: hover | always | touch\n    visible: hover\n    # Options: § | # | ❡\n    icon: \"\"\n\n  # 加载进度条\n  # Progress bar when loading\n  progressbar:\n    enable: true\n    height_px: 3\n    color: \"#29d\"\n    # See: https://github.com/rstacruz/nprogress\n    options: { showSpinner: false, trickleSpeed: 100 }\n\n# 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换\n# Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor's browser will store his switch option\ndark_mode:\n  enable: true\n  # 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式\n  # Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time\n  # Options: auto | light | dark\n  default: auto\n\n# 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发\n# Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below\n# See: https://www.webdesignrankings.com/resources/lolcolors/\ncolor:\n  # body 背景色\n  # Color of body background\n  body_bg_color: \"#eee\"\n  # 暗色模式下的 body 背景色，下同\n  # Color in dark mode, the same below\n  body_bg_color_dark: \"#181c27\"\n\n  # 顶部菜单背景色\n  # Color of navigation bar background\n  navbar_bg_color: \"#2f4154\"\n  navbar_bg_color_dark: \"#1f3144\"\n\n  # 顶部菜单字体色\n  # Color of navigation bar text\n  navbar_text_color: \"#fff\"\n  navbar_text_color_dark: \"#d0d0d0\"\n\n  # 副标题字体色\n  # Color of navigation bar text\n  subtitle_color: \"#fff\"\n  subtitle_color_dark: \"#d0d0d0\"\n\n  # 全局字体色\n  # Color of global text\n  text_color: \"#3c4858\"\n  text_color_dark: \"#c4c6c9\"\n\n  # 全局次级字体色（摘要、简介等位置）\n  # Color of global secondary text (excerpt, introduction, etc.)\n  sec_text_color: \"#718096\"\n  sec_text_color_dark: \"#a7a9ad\"\n\n  # 主面板背景色\n  # Color of main board\n  board_color: \"#fff\"\n  board_color_dark: \"#252d38\"\n\n  # 文章正文字体色\n  # Color of post text\n  post_text_color: \"#2c3e50\"\n  post_text_color_dark: \"#c4c6c9\"\n\n  # 文章正文字体色（h1 h2 h3...）\n  # Color of Article heading (h1 h2 h3...)\n  post_heading_color: \"#1a202c\"\n  post_heading_color_dark: \"#c4c6c9\"\n\n  # 文章超链接字体色\n  # Color of post link\n  post_link_color: \"#0366d6\"\n  post_link_color_dark: \"#1589e9\"\n\n  # 超链接悬浮时字体色\n  # Color of link when hovering\n  link_hover_color: \"#30a9de\"\n  link_hover_color_dark: \"#30a9de\"\n\n  # 超链接悬浮背景色\n  # Color of link background when hovering\n  link_hover_bg_color: \"#f8f9fa\"\n  link_hover_bg_color_dark: \"#364151\"\n\n  # 分隔线和表格边线的颜色\n  # Color of horizontal rule and table border\n  line_color: \"#eaecef\"\n  line_color_dark: \"#435266\"\n\n  # 滚动条颜色\n  # Color of scrollbar\n  scrollbar_color: \"#c4c6c9\"\n  scrollbar_color_dark: \"#687582\"\n  # 滚动条悬浮颜色\n  # Color of scrollbar when hovering\n  scrollbar_hover_color: \"#a6a6a6\"\n  scrollbar_hover_color_dark: \"#9da8b3\"\n\n  # 按钮背景色\n  # Color of button\n  button_bg_color: \"transparent\"\n  button_bg_color_dark: \"transparent\"\n  # 按钮悬浮背景色\n  # Color of button when hovering\n  button_hover_bg_color: \"#f2f3f5\"\n  button_hover_bg_color_dark: \"#46647e\"\n\n# 主题字体配置\n# Font\nfont:\n  font_size: 16px\n  font_family:\n  letter_spacing: 0.02em\n  code_font_size: 85%\n\n# 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js\n# Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`\ncustom_js:\n\n# 指定自定义 .css 文件路径，用法和 custom_js 相同\n# The usage is the same as custom_js\ncustom_css:\n\n# 网页访问统计\n# Analysis of website visitors\nweb_analytics:  # 网页访问统计\n  enable: false\n\n  # 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串\n  # Baidu analytics, get the string behind `hm.js?`\n  # See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376\n  baidu:\n\n  # Google 统计的 Tracking ID\n  # Google analytics, set Tracking ID\n  # See: https://developers.google.com/analytics/devguides/collection/analyticsjs\n  google:\n\n  # Google gtag.js 的媒体资源 ID\n  # Google gtag.js GA_MEASUREMENT_ID\n  # See: https://developers.google.com/analytics/devguides/collection/gtagjs/\n  gtag:\n\n  # 腾讯统计的 H5 App ID，开启高级功能才有cid\n  # Tencent analytics, set APP ID\n  # See: https://mta.qq.com/h5/manage/ctr_app_manage\n  tencent:\n    sid:\n    cid:\n\n  # 51.la 站点统计 ID\n  # 51.la analytics\n  # See: https://www.51.la/user/site/index\n  woyaola:  # 51.la 站点统计 ID，参见\n\n  # 友盟/cnzz 站点统计 web_id\n  # cnzz analytics\n  # See: https://web.umeng.com/main.php?c=site&a=show\n  cnzz:\n\n  # LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加\n  # LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase\n  leancloud:\n    app_id:\n    app_key:\n    # REST API 服务器地址，国际版不填\n    # Only the Chinese mainland users need to set\n    server_url:\n    # 统计页面时获取路径的属性\n    # Get the attribute of the page path during statistics\n    path: window.location.pathname\n    # 开启后不统计本地路径( localhost 与 127.0.0.1 )\n    # If ture, ignore localhost & 127.0.0.1\n    ignore_local: false\n\n# 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载\n# Lazy loading of images and comment plugin on the page\nlazyload:\n  enable: true\n\n  # 加载时的占位图片\n  # The placeholder image when loading\n  loading_img: /img/loading.gif\n\n  # 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`\n  # If true, only enable lazyload on the post page. For custom pages, you can set 'lazyload: true' in front-matter\n  onlypost: false\n\n  # 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节\n  # The factor of viewport height that triggers loading\n  offset_factor: 2\n\n# 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/\n# Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/\niconfont: //at.alicdn.com/t/font_1736178_lbnruvf0jn.css\n\n\n#---------------------------\n# 页头\n# Header\n#---------------------------\n\n# 导航栏的相关配置\n# Navigation bar\nnavbar:\n  # 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示\n  # The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config\n  blog_title: \"Fluid\"\n\n  # 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效\n  # Navigation bar frosted glass special animation. It is an experimental feature\n  ground_glass:\n    enable: false\n\n    # 模糊像素，只能为数字，数字越大模糊度越高\n    # Number of blurred pixel. the larger the number, the higher the blur\n    px: 3\n\n    # 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体\n    # Ratio of opacity, 1.0 is completely opaque\n    # available: 0 - 1.0\n    alpha: 0.7\n\n  # 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称\n  # Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name\n  menu:\n    - { key: \"home\", link: \"/\", icon: \"iconfont icon-home-fill\" }\n    - { key: \"archive\", link: \"/archives/\", icon: \"iconfont icon-archive-fill\" }\n    - { key: \"category\", link: \"/categories/\", icon: \"iconfont icon-category-fill\" }\n    - { key: \"tag\", link: \"/tags/\", icon: \"iconfont icon-tags-fill\" }\n    - { key: \"about\", link: \"/about/\", icon: \"iconfont icon-user-fill\" }\n    #- { key: \"links\", link: \"/links/\", icon: \"iconfont icon-link-fill\" }\n\n# 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件\n# Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files\nsearch:\n  enable: true\n\n  # 搜索索引文件的路径，可以是相对路径或外站的绝对路径\n  # Path for search index file, it can be a relative path or an absolute path\n  path: /local-search.xml\n\n  # 文件生成在本地的位置，必须是相对路径\n  # The location where the index file is generated locally, it must be a relative location\n  generate_path: /local-search.xml\n\n  # 搜索的范围\n  # Search field\n  # Options: post | page | all\n  field: post\n\n  # 搜索是否扫描正文\n  # If true, search will scan the post content\n  content: true\n\n# 首屏图片的相关配置\n# Config of the big image on the first screen\nbanner:\n  # 视差滚动，图片与板块会随着屏幕滚动产生视差效果\n  # Scrolling parallax\n  parallax: true\n\n  # 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0\n  # Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0\n  width_height_ratio: 1.0\n\n# 向下滚动的箭头\n# Scroll down arrow\nscroll_down_arrow:\n  enable: true\n\n  # 头图高度不小于指定比例，才显示箭头\n  # Only the height of the banner image is greater than the ratio, the arrow is displayed\n  # Available: 0 - 100\n  banner_height_limit: 80\n\n  # 翻页后自动滚动\n  # Auto scroll after page turning\n  scroll_after_turning_page: true\n\n# 向顶部滚动的箭头\n# Scroll top arrow\nscroll_top_arrow:\n  enable: true\n\n# Open Graph metadata\n# See: https://hexo.io/docs/helpers.html#open-graph\nopen_graph:\n  enable: true\n  twitter_card: summary_large_image\n  twitter_id:\n  twitter_site:\n  google_plus:\n  fb_admins:\n  fb_app_id:\n\n\n#---------------------------\n# 页脚\n# Footer\n#---------------------------\nfooter:\n  # 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题\n  # HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people\n  content: '\n    <a href=\"https://hexo.io\" target=\"_blank\" rel=\"nofollow noopener\"><span>Hexo</span></a>\n    <i class=\"iconfont icon-love\"></i>\n    <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\" target=\"_blank\" rel=\"nofollow noopener\"><span>Fluid</span></a>\n  '\n\n  # 展示网站的 PV、UV 统计数\n  # Display website PV and UV statistics\n  statistics:\n    enable: false\n\n    # 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常\n    # Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`\n    # Options: busuanzi | leancloud\n    source: \"busuanzi\"\n\n  # 国内大陆服务器的备案信息\n  # For Chinese mainland website policy, other areas keep disable\n  beian:\n    enable: false\n    # ICP证号\n    icp_text: 京ICP证123456号\n    # 公安备案号，不填则只显示ICP\n    police_text: 京公网安备12345678号\n    # 公安备案的编号，用于URL跳转查询\n    police_code: 12345678\n    # 公安备案的图片. 为空时不显示备案图片\n    police_icon: /img/police_beian.png\n\n\n#---------------------------\n# 首页\n# Home Page\n#---------------------------\nindex:\n  # 首页 Banner 头图，可以是相对路径或绝对路径，以下相同\n  # Path of Banner image, can be a relative path or an absolute path, the same on other pages\n  banner_img: /img/default.png\n\n  # 头图高度，屏幕百分比\n  # Height ratio of banner image\n  # Available: 0 - 100\n  banner_img_height: 100\n\n  # 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明\n  # Opacity of the banner mask, 1.0 is completely opaque\n  # Available: 0 - 1.0\n  banner_mask_alpha: 0.3\n\n  # 首页副标题的独立设置\n  # Independent config of home page subtitle\n  slogan:\n    enable: true\n\n    # 为空则按 hexo config.subtitle 显示\n    # If empty, text based on `subtitle` in hexo config\n    text: \"An elegant Material-Design theme for Hexo\"\n\n    # 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能\n    # Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation\n    api:\n      enable: false\n\n      # 请求地址\n      # Request url\n      url: \"\"\n\n      # 请求方法\n      # Request method\n      # Available: GET | POST | PUT\n      method: \"GET\"\n\n      # 请求头\n      # Request headers\n      headers: {}\n\n      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 {\"data\": {\"author\": \"fluid\", \"content\": \"An elegant theme\"}}, 则取值字段为 ['data', 'content']；如果返回是列表则自动选择第一项\n      # The value field of the string obtained from the response. For example, the response content is {\"data\": {\"author\": \"fluid\", \"content\": \"An elegant theme\"}}, the expected `keys: ['data','content']`; if the return is a list, the first item is automatically selected\n      keys: []\n\n  # 自动截取文章摘要\n  # Auto extract post\n  auto_excerpt:\n    enable: true\n\n  # 打开文章的标签方式\n  # The browser tag to open the post\n  # Available: _blank | _self\n  post_url_target: _self\n\n  # 是否显示文章信息（时间、分类、标签）\n  # Meta information of post\n  post_meta:\n    date: true\n    category: true\n    tag: true\n\n  # 文章通过 sticky 排序后，在首页文章标题前显示图标\n  # If the posts are sorted by `sticky`, an icon is displayed in front of the post title\n  post_sticky:\n    enable: true\n    icon: \"iconfont icon-top\"\n\n\n#---------------------------\n# 文章页\n# Post Page\n#---------------------------\npost:\n  banner_img: /img/default.png\n  banner_img_height: 70\n  banner_mask_alpha: 0.3\n\n  # 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片\n  # Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed\n  default_index_img:\n\n  # 文章标题下方的元信息\n  # Meta information below title\n  meta:\n    # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值\n    # Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config\n    author:\n      enable: false\n\n    # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期\n    # Post date, based on `date` field in front-matter, if not set, based on create date of .md file\n    date:\n      enable: true\n      # 格式参照 ISO-8601 日期格式化\n      # ISO-8601 date format\n      # See: http://momentjs.cn/docs/#/parsing/string-format/\n      format: \"LL a\"\n\n    # 字数统计\n    # Word count\n    wordcount:\n      enable: true\n\n    # 估计阅读全文需要的时长\n    # Estimated reading time\n    min2read:\n      enable: true\n      # 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节\n      # Average word length (chars count in word), ZH ≈ 2, EN ≈ 5\n      awl: 2\n      # 每分钟阅读字数，如果大部分是技术文章可适度调低\n      # Words per minute\n      wpm: 60\n\n    # 浏览量计数\n    # Number of visits\n    views:\n      enable: false\n      # 统计数据来源\n      # Data Source\n      # Options: busuanzi | leancloud\n      source: \"busuanzi\"\n\n  # 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）\n  # Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)\n  updated:\n    enable: false\n\n    # 格式参照 ISO-8601 日期格式化\n    # ISO-8601 date format\n    # See: http://momentjs.cn/docs/#/parsing/string-format/\n    date_format: \"LL a\"\n\n    # 是否使用相对时间表示，比如：\"3 天前\"\n    # If true, it will be a relative time, such as: \"3 days ago\"\n    relative: false\n\n    # 提示标签类型\n    # Note class\n    # Options: default | primary | info | success | warning | danger | light\n    note_class: info\n\n  # 侧边栏展示当前分类下的文章\n  # Sidebar of category\n  category_bar:\n    enable: true\n\n    # 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [\"分类A\"]` 来指定分类\n    # If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [\"CategoryA\"]` to specify categories\n    specific: true\n\n    # 置于板块的左侧或右侧\n    # place in the board\n    # Options: left | right\n    placement: left\n\n    # 文章的排序字段，前面带减号是倒序，不带减号是正序\n    # Sort field for posts, with a minus sign is reverse order\n    # Options: date | title | or other field of front-matter\n    post_order_by: \"title\"\n\n    # 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制\n    # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit\n    post_limit: 0\n\n  # 侧边栏展示文章目录\n  # Table of contents (TOC) in the sidebar\n  toc:\n    enable: true\n\n    # 置于板块的左侧或右侧\n    # place in the board\n    # Options: left | right\n    placement: right\n\n    # 目录会选择这些节点作为标题\n    # TOC will select these nodes as headings\n    headingSelector: \"h1,h2,h3,h4,h5,h6\"\n\n    # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开\n    # Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings\n    collapseDepth: 0\n\n  # 版权声明，会显示在每篇文章的结尾\n  # Copyright, will be displayed at the end of each post\n  copyright:\n    enable: true\n\n    # CreativeCommons license\n    # Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND\n    license: 'BY'\n\n    # 显示作者\n    author:\n      enable: true\n\n    # 显示发布日期\n    # Show post date\n    post_date:\n      enable: true\n      format: \"LL\"\n\n    # 显示更新日期\n    # Show update date\n    update_date:\n      enable: false\n      format: \"LL\"\n\n  # 文章底部上一篇下一篇功能\n  # Link to previous/next post\n  prev_next:\n    enable: true\n\n  # 文章图片标题\n  # Image caption\n  image_caption:\n    enable: true\n\n  # 文章图片可点击放大\n  # Zoom feature of images\n  image_zoom:\n    enable: true\n    # 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 ['-slim', ''] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 ['re:\\\\d{3,4}\\\\/\\\\d{3,4}\\\\/', '']\n    # The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: ['-slim', ''] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: ['re:\\\\d{3,4}\\\\/\\\\d{3,4}\\\\/','']\n    img_url_replace: ['', '']\n\n  # 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突\n  # Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict\n  footnote:\n    enable: true\n    # 脚注的节标题，也可以在 front-matter 中通过 `footnote: <h2>Reference</h2>` 这种形式修改单独页面的 header\n    # The section title of the footnote, you can also modify the header of a single page in the form of `footnote: <h2>Reference</h2>` in front-matter\n    header: ''\n\n  # 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式\n  # Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math\n  math:\n    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`\n    # If you want to use math on the custom page, you need to set `math: true` in Front-matter\n    enable: false\n\n    # 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度\n    # If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math\n    specific: false\n\n    # Options: mathjax | katex\n    engine: mathjax\n\n  # 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图\n  # Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid\n  mermaid:\n    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`\n    # If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter\n    enable: false\n\n    # 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度\n    # If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid\n    specific: false\n\n    # See: http://mermaid-js.github.io/mermaid/\n    options: { theme: 'default' }\n\n  # 评论插件\n  # Comment plugin\n  comments:\n    enable: false\n    # 指定的插件，需要同时设置对应插件的必要参数\n    # The specified plugin needs to set the necessary parameters at the same time\n    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis\n    type: disqus\n\n\n#---------------------------\n# 评论插件\n# Comment plugins\n#\n# 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数\n# Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`\n#---------------------------\n\n# Utterances\n# 基于 GitHub Issues\n# Based on GitHub Issues\n# See: https://utteranc.es\nutterances:\n  repo:\n  issue_term: pathname\n  label: utterances\n  theme: github-light\n  theme_dark: github-dark\n\n# Disqus\n# 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs\n# Based on third-party service\n# See: https://disqus.com\ndisqus:\n  shortname:\n  # 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用\n  # The following are Disqusjs configurations, please ignore if DisqusJS is not required\n  # See: https://github.com/SukkaW/DisqusJS\n  disqusjs: false\n  apikey:\n\n# Gitalk\n# 基于 GitHub Issues\n# Based on GitHub Issues\n# See: https://github.com/gitalk/gitalk#options\ngitalk:\n  clientID:\n  clientSecret:\n  repo:\n  owner:\n  admin: ['name']\n  language: zh-CN\n  labels: ['Gitalk']\n  perPage: 10\n  pagerDirection: last\n  distractionFreeMode: false\n  createIssueManually: true\n  # 默认 proxy 可能会失效，解决方法请见下方链接\n  # The default proxy may be invalid, refer to the links for solutions\n  # https://github.com/gitalk/gitalk/issues/429\n  # https://github.com/Zibri/cloudflare-cors-anywhere\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token\n\n# Valine\n# 基于 LeanCloud\n# Based on LeanCloud\n# See: https://valine.js.org/\nvaline:\n  appId:\n  appKey:\n  path: window.location.pathname\n  placeholder:\n  avatar: 'retro'\n  meta: ['nick', 'mail', 'link']\n  requiredFields: []\n  pageSize: 10\n  lang: 'zh-CN'\n  highlight: false\n  recordIP: false\n  serverURLs: ''\n  emojiCDN:\n  emojiMaps:\n  enableQQ: false\n\n# Waline\n# 从 Valine 衍生而来，额外增加了服务端和多种功能\n# Derived from Valine, with self-hosted service and new features\n# See: https://waline.js.org/\nwaline:\n  serverURL: ''\n  path: window.location.pathname\n  placeholder:\n  meta: ['nick', 'mail', 'link']\n  requiredMeta: ['nick']\n  lang: 'zh-CN'\n  emoji: ['https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo']\n  dark: 'html[data-user-color-scheme=\"dark\"]'\n  avatar: 'retro'\n  avatarCDN: 'https://seccdn.libravatar.org/avatar/'\n  avatarForce: false\n  wordLimit: 0\n  pageSize: 10\n  highlight: true\n\n# 畅言 Changyan\n# 基于第三方的服务\n# Based on third-party service, insufficient support for regions outside China\n# http://changyan.kuaizhan.com\nchangyan:\n  appid: ''\n  appkey: ''\n\n# 来必力 Livere\n# 基于第三方的服务\n# Based on third-party service\n# See: https://www.livere.com\nlivere:\n  uid: ''\n\n# Remark42\n# 需要自托管服务端\n# Based on self-hosted service\n# See: https://remark42.com\nremark42:\n  host:\n  site_id:\n  max_shown_comments: 10\n  locale: zh\n  components: ['embed']\n\n# Twikoo\n# 基于腾讯云开发\n# Based on Tencent CloudBase\n# See: https://twikoo.js.org\ntwikoo:\n  envId:\n  region: ap-shanghai\n  path: window.location.pathname\n\n# Cusdis\n# 基于第三方服务或自托管服务\n# Based on third-party or self-hosted service\n# See https://cusdis.com\ncusdis:\n  host:\n  app_id:\n  lang: zh-cn\n\n#---------------------------\n# 归档页\n# Archive Page\n#---------------------------\narchive:\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n\n\n#---------------------------\n# 分类页\n# Category Page\n#---------------------------\ncategory:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n\n  # 分类的排序字段，前面带减号是倒序，不带减号是正序\n  # Sort field for categories, with a minus sign is reverse order\n  # Options: length | name\n  order_by: \"-length\"\n\n  # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开\n  # Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories\n  collapse_depth: 0\n\n  # 文章的排序字段，前面带减号是倒序，不带减号是正序\n  # Sort field for posts, with a minus sign is reverse order\n  # Options: date | title | or other field of front-matter\n  post_order_by: \"-date\"\n\n  # 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制\n  # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit\n  post_limit: 10\n\n\n#---------------------------\n# 标签页\n# Tag Page\n#---------------------------\ntag:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 80\n  banner_mask_alpha: 0.3\n  tagcloud:\n    min_font: 15\n    max_font: 30\n    unit: px\n    start_color: \"#BBBBEE\"\n    end_color: \"#337ab7\"\n\n\n#---------------------------\n# 关于页\n# About Page\n#---------------------------\nabout:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n  avatar: /img/avatar.png\n  name: \"Fluid\"\n  intro: \"An elegant theme for Hexo\"\n  # 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码\n  # More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code\n  icons:\n    - { class: \"iconfont icon-github-fill\", link: \"https://github.com\", tip: \"GitHub\" }\n    - { class: \"iconfont icon-douban-fill\", link: \"https://douban.com\", tip: \"豆瓣\" }\n    - { class: \"iconfont icon-wechat-fill\", qrcode: \"/img/favicon.png\" }\n\n\n#---------------------------\n# 自定义页\n# Custom Page\n#\n# 通过 hexo new page 命令创建的页面\n# Custom Page through `hexo new page`\n#---------------------------\npage:\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n\n\n#---------------------------\n# 404页\n# 404 Page\n#---------------------------\npage404:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 85\n  banner_mask_alpha: 0.3\n  # 重定向到首页的延迟(毫秒)\n  # Delay in redirecting to home page (milliseconds)\n  redirect_delay: 5000\n\n\n#---------------------------\n# 友链页\n# Links Page\n#---------------------------\nlinks:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n  # 友链的成员项\n  # Member item of page\n  items:\n    - {\n      title: \"Fluid Blog\",\n      intro: \"主题博客\",\n      link: \"https://hexo.fluid-dev.com/\",\n      avatar: \"/img/favicon.png\"\n    }\n    - {\n      title: \"Fluid Docs\",\n      intro: \"主题使用指南\",\n      link: \"https://hexo.fluid-dev.com/docs/\",\n      avatar: \"/img/favicon.png\"\n    }\n    - {\n      title: \"Fluid Repo\",\n      intro: \"主题 GitHub 仓库\",\n      link: \"https://github.com/fluid-dev/hexo-theme-fluid\",\n      avatar: \"/img/favicon.png\"\n    }\n\n  # 当成员头像加载失败时，替换为指定图片\n  # When the member avatar fails to load, replace the specified image\n  onerror_avatar: /img/avatar.png\n\n  # 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字\n  # Custom content at the bottom of the links\n  custom:\n    enable: false\n    content: '<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>'\n\n  # 评论插件\n  # Comment plugin\n  comments:\n    enable: false\n    # 指定的插件，需要同时设置对应插件的必要参数\n    # The specified plugin needs to set the necessary parameters at the same time\n    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis\n    type: disqus\n\n\n#---------------------------\n# 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，\n# 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，\n# ** 如果你不知道如何设置，请不要做任何改动 **\n#\n# Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.\n# Be aware that you would better use the same version as default ones to avoid potential problems.\n# DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING\n#---------------------------\n\nstatic_prefix:\n  # 内部静态\n  # Internal static\n  internal_js: /js\n  internal_css: /css\n  internal_img: /img\n\n  anchor: https://lib.baomitu.com/anchor-js/4.3.1/\n\n  github_markdown: https://lib.baomitu.com/github-markdown-css/4.0.0/\n\n  jquery: https://lib.baomitu.com/jquery/3.6.0/\n\n  bootstrap: https://lib.baomitu.com/twitter-bootstrap/4.6.1/\n\n  prismjs: https://lib.baomitu.com/prism/1.26.0/\n\n  tocbot: https://lib.baomitu.com/tocbot/4.18.0/\n\n  typed: https://lib.baomitu.com/typed.js/2.0.12/\n\n  fancybox: https://lib.baomitu.com/fancybox/3.5.7/\n\n  nprogress: https://lib.baomitu.com/nprogress/0.2.0/\n\n  mathjax: https://lib.baomitu.com/mathjax/3.2.0/\n\n  katex: https://lib.baomitu.com/KaTeX/0.15.2/\n\n  busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/\n\n  clipboard: https://lib.baomitu.com/clipboard.js/2.0.10/\n\n  mermaid: https://lib.baomitu.com/mermaid/8.13.10/\n\n  valine: https://lib.baomitu.com/valine/1.4.16/\n\n  waline: https://lib.baomitu.com/waline/1.5.2/\n\n  gitalk: https://lib.baomitu.com/gitalk/1.7.2/\n\n  disqusjs: https://lib.baomitu.com/disqusjs/1.3.0/\n\n  twikoo: https://lib.baomitu.com/twikoo/1.4.17/\n\n  hint: https://lib.baomitu.com/hint.css/2.7.0/\n\n```\n\n### 来源\n\n- [GitHub`_config.yml`](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)","source":"_posts/hexo/hexo Fluid config.md","raw":"---\ntitle: Hexo Fluid主题_config.yml\ncategories: \n - [Hexo,Fluid主题]\ntags:\n - Hexo\ndata: 2022-03-21 17:51:00\nindex_img: https://instrument-file.oss-cn-beijing.aliyuncs.com/img/3419353.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10\n---\n\n### Hexo Fluid 主题的 _config.yml内容\n\n版本：version：1.8.14\n\n```yml\n#---------------------------\n# Hexo Theme Fluid\n# Author: Fluid-dev\n# Github: https://github.com/fluid-dev/hexo-theme-fluid\n#\n# 配置指南: https://hexo.fluid-dev.com/docs/guide/\n# 你可以从指南中获得更详细的说明\n#\n# Guide: https://hexo.fluid-dev.com/docs/en/guide/\n# You can get more detailed help from the guide\n#---------------------------\n\n\n#---------------------------\n# 全局\n# Global\n#---------------------------\n\n# 用于浏览器标签的图标\n# Icon for browser tab\nfavicon: /img/fluid.png\n\n# 用于苹果设备的图标\n# Icon for Apple touch\napple_touch_icon: /img/fluid.png\n\n# 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名\n# Title separator in browser tab, eg: article - site\ntab_title_separator: \" - \"\n\n# 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）\n# Force all links to be HTTPS (applicable to HTTP mixed error)\nforce_https: false\n\n# 代码块的增强配置\n# Enhancements to code blocks\ncode:\n  # 是否开启复制代码的按钮\n  # Enable copy code button\n  copy_btn: true\n\n  # 代码语言\n  # Code language\n  language:\n    enable: true\n    default: \"TEXT\"\n\n  # 代码高亮\n  # Code highlight\n  highlight:\n    enable: true\n\n    # 代码块是否显示行号\n    # If true, the code block display line numbers\n    line_number: true\n\n    # 实现高亮的库，对应下面的设置\n    # Highlight library\n    # Options: highlightjs | prismjs\n    lib: \"highlightjs\"\n\n    highlightjs:\n      # 在链接中挑选 style 填入\n      # Select a style in the link\n      # See: https://highlightjs.org/static/demo/\n      style: \"github gist\"\n      style_dark: \"dark\"\n\n    prismjs:\n      # 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接\n      # Select the style button on the right side of the link page, you can also set the CSS link\n      # See: https://prismjs.com/\n      style: \"default\"\n      style_dark: \"tomorrow night\"\n\n      # 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成\n      # If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser\n      preprocess: true\n\n# 一些好玩的功能\n# Some fun features\nfun_features:\n  # 为 subtitle 添加打字机效果\n  # Typing animation for subtitle\n  typing:\n    enable: true\n\n    # 打印速度，数字越大越慢\n    # Typing speed, the larger the number, the slower\n    typeSpeed: 70\n\n    # 游标字符\n    # Cursor character\n    cursorChar: \"_\"\n\n    # 是否循环播放效果\n    # If true, loop animation\n    loop: false\n\n    # 在指定页面开启，不填则在所有页面开启\n    # Enable in specified page, all pages by default\n    # Options: home | post | tag | category | about | links | page | 404\n    scope: []\n\n  # 为文章内容中的标题添加锚图标\n  # Add an anchor icon to the title on the post page\n  anchorjs:\n    enable: true\n    element: h1,h2,h3,h4,h5,h6\n    # Options: left | right\n    placement: left\n    # Options: hover | always | touch\n    visible: hover\n    # Options: § | # | ❡\n    icon: \"\"\n\n  # 加载进度条\n  # Progress bar when loading\n  progressbar:\n    enable: true\n    height_px: 3\n    color: \"#29d\"\n    # See: https://github.com/rstacruz/nprogress\n    options: { showSpinner: false, trickleSpeed: 100 }\n\n# 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换\n# Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor's browser will store his switch option\ndark_mode:\n  enable: true\n  # 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式\n  # Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time\n  # Options: auto | light | dark\n  default: auto\n\n# 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发\n# Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below\n# See: https://www.webdesignrankings.com/resources/lolcolors/\ncolor:\n  # body 背景色\n  # Color of body background\n  body_bg_color: \"#eee\"\n  # 暗色模式下的 body 背景色，下同\n  # Color in dark mode, the same below\n  body_bg_color_dark: \"#181c27\"\n\n  # 顶部菜单背景色\n  # Color of navigation bar background\n  navbar_bg_color: \"#2f4154\"\n  navbar_bg_color_dark: \"#1f3144\"\n\n  # 顶部菜单字体色\n  # Color of navigation bar text\n  navbar_text_color: \"#fff\"\n  navbar_text_color_dark: \"#d0d0d0\"\n\n  # 副标题字体色\n  # Color of navigation bar text\n  subtitle_color: \"#fff\"\n  subtitle_color_dark: \"#d0d0d0\"\n\n  # 全局字体色\n  # Color of global text\n  text_color: \"#3c4858\"\n  text_color_dark: \"#c4c6c9\"\n\n  # 全局次级字体色（摘要、简介等位置）\n  # Color of global secondary text (excerpt, introduction, etc.)\n  sec_text_color: \"#718096\"\n  sec_text_color_dark: \"#a7a9ad\"\n\n  # 主面板背景色\n  # Color of main board\n  board_color: \"#fff\"\n  board_color_dark: \"#252d38\"\n\n  # 文章正文字体色\n  # Color of post text\n  post_text_color: \"#2c3e50\"\n  post_text_color_dark: \"#c4c6c9\"\n\n  # 文章正文字体色（h1 h2 h3...）\n  # Color of Article heading (h1 h2 h3...)\n  post_heading_color: \"#1a202c\"\n  post_heading_color_dark: \"#c4c6c9\"\n\n  # 文章超链接字体色\n  # Color of post link\n  post_link_color: \"#0366d6\"\n  post_link_color_dark: \"#1589e9\"\n\n  # 超链接悬浮时字体色\n  # Color of link when hovering\n  link_hover_color: \"#30a9de\"\n  link_hover_color_dark: \"#30a9de\"\n\n  # 超链接悬浮背景色\n  # Color of link background when hovering\n  link_hover_bg_color: \"#f8f9fa\"\n  link_hover_bg_color_dark: \"#364151\"\n\n  # 分隔线和表格边线的颜色\n  # Color of horizontal rule and table border\n  line_color: \"#eaecef\"\n  line_color_dark: \"#435266\"\n\n  # 滚动条颜色\n  # Color of scrollbar\n  scrollbar_color: \"#c4c6c9\"\n  scrollbar_color_dark: \"#687582\"\n  # 滚动条悬浮颜色\n  # Color of scrollbar when hovering\n  scrollbar_hover_color: \"#a6a6a6\"\n  scrollbar_hover_color_dark: \"#9da8b3\"\n\n  # 按钮背景色\n  # Color of button\n  button_bg_color: \"transparent\"\n  button_bg_color_dark: \"transparent\"\n  # 按钮悬浮背景色\n  # Color of button when hovering\n  button_hover_bg_color: \"#f2f3f5\"\n  button_hover_bg_color_dark: \"#46647e\"\n\n# 主题字体配置\n# Font\nfont:\n  font_size: 16px\n  font_family:\n  letter_spacing: 0.02em\n  code_font_size: 85%\n\n# 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js\n# Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`\ncustom_js:\n\n# 指定自定义 .css 文件路径，用法和 custom_js 相同\n# The usage is the same as custom_js\ncustom_css:\n\n# 网页访问统计\n# Analysis of website visitors\nweb_analytics:  # 网页访问统计\n  enable: false\n\n  # 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串\n  # Baidu analytics, get the string behind `hm.js?`\n  # See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376\n  baidu:\n\n  # Google 统计的 Tracking ID\n  # Google analytics, set Tracking ID\n  # See: https://developers.google.com/analytics/devguides/collection/analyticsjs\n  google:\n\n  # Google gtag.js 的媒体资源 ID\n  # Google gtag.js GA_MEASUREMENT_ID\n  # See: https://developers.google.com/analytics/devguides/collection/gtagjs/\n  gtag:\n\n  # 腾讯统计的 H5 App ID，开启高级功能才有cid\n  # Tencent analytics, set APP ID\n  # See: https://mta.qq.com/h5/manage/ctr_app_manage\n  tencent:\n    sid:\n    cid:\n\n  # 51.la 站点统计 ID\n  # 51.la analytics\n  # See: https://www.51.la/user/site/index\n  woyaola:  # 51.la 站点统计 ID，参见\n\n  # 友盟/cnzz 站点统计 web_id\n  # cnzz analytics\n  # See: https://web.umeng.com/main.php?c=site&a=show\n  cnzz:\n\n  # LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加\n  # LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase\n  leancloud:\n    app_id:\n    app_key:\n    # REST API 服务器地址，国际版不填\n    # Only the Chinese mainland users need to set\n    server_url:\n    # 统计页面时获取路径的属性\n    # Get the attribute of the page path during statistics\n    path: window.location.pathname\n    # 开启后不统计本地路径( localhost 与 127.0.0.1 )\n    # If ture, ignore localhost & 127.0.0.1\n    ignore_local: false\n\n# 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载\n# Lazy loading of images and comment plugin on the page\nlazyload:\n  enable: true\n\n  # 加载时的占位图片\n  # The placeholder image when loading\n  loading_img: /img/loading.gif\n\n  # 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`\n  # If true, only enable lazyload on the post page. For custom pages, you can set 'lazyload: true' in front-matter\n  onlypost: false\n\n  # 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节\n  # The factor of viewport height that triggers loading\n  offset_factor: 2\n\n# 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/\n# Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/\niconfont: //at.alicdn.com/t/font_1736178_lbnruvf0jn.css\n\n\n#---------------------------\n# 页头\n# Header\n#---------------------------\n\n# 导航栏的相关配置\n# Navigation bar\nnavbar:\n  # 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示\n  # The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config\n  blog_title: \"Fluid\"\n\n  # 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效\n  # Navigation bar frosted glass special animation. It is an experimental feature\n  ground_glass:\n    enable: false\n\n    # 模糊像素，只能为数字，数字越大模糊度越高\n    # Number of blurred pixel. the larger the number, the higher the blur\n    px: 3\n\n    # 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体\n    # Ratio of opacity, 1.0 is completely opaque\n    # available: 0 - 1.0\n    alpha: 0.7\n\n  # 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称\n  # Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name\n  menu:\n    - { key: \"home\", link: \"/\", icon: \"iconfont icon-home-fill\" }\n    - { key: \"archive\", link: \"/archives/\", icon: \"iconfont icon-archive-fill\" }\n    - { key: \"category\", link: \"/categories/\", icon: \"iconfont icon-category-fill\" }\n    - { key: \"tag\", link: \"/tags/\", icon: \"iconfont icon-tags-fill\" }\n    - { key: \"about\", link: \"/about/\", icon: \"iconfont icon-user-fill\" }\n    #- { key: \"links\", link: \"/links/\", icon: \"iconfont icon-link-fill\" }\n\n# 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件\n# Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files\nsearch:\n  enable: true\n\n  # 搜索索引文件的路径，可以是相对路径或外站的绝对路径\n  # Path for search index file, it can be a relative path or an absolute path\n  path: /local-search.xml\n\n  # 文件生成在本地的位置，必须是相对路径\n  # The location where the index file is generated locally, it must be a relative location\n  generate_path: /local-search.xml\n\n  # 搜索的范围\n  # Search field\n  # Options: post | page | all\n  field: post\n\n  # 搜索是否扫描正文\n  # If true, search will scan the post content\n  content: true\n\n# 首屏图片的相关配置\n# Config of the big image on the first screen\nbanner:\n  # 视差滚动，图片与板块会随着屏幕滚动产生视差效果\n  # Scrolling parallax\n  parallax: true\n\n  # 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0\n  # Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0\n  width_height_ratio: 1.0\n\n# 向下滚动的箭头\n# Scroll down arrow\nscroll_down_arrow:\n  enable: true\n\n  # 头图高度不小于指定比例，才显示箭头\n  # Only the height of the banner image is greater than the ratio, the arrow is displayed\n  # Available: 0 - 100\n  banner_height_limit: 80\n\n  # 翻页后自动滚动\n  # Auto scroll after page turning\n  scroll_after_turning_page: true\n\n# 向顶部滚动的箭头\n# Scroll top arrow\nscroll_top_arrow:\n  enable: true\n\n# Open Graph metadata\n# See: https://hexo.io/docs/helpers.html#open-graph\nopen_graph:\n  enable: true\n  twitter_card: summary_large_image\n  twitter_id:\n  twitter_site:\n  google_plus:\n  fb_admins:\n  fb_app_id:\n\n\n#---------------------------\n# 页脚\n# Footer\n#---------------------------\nfooter:\n  # 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题\n  # HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people\n  content: '\n    <a href=\"https://hexo.io\" target=\"_blank\" rel=\"nofollow noopener\"><span>Hexo</span></a>\n    <i class=\"iconfont icon-love\"></i>\n    <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\" target=\"_blank\" rel=\"nofollow noopener\"><span>Fluid</span></a>\n  '\n\n  # 展示网站的 PV、UV 统计数\n  # Display website PV and UV statistics\n  statistics:\n    enable: false\n\n    # 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常\n    # Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`\n    # Options: busuanzi | leancloud\n    source: \"busuanzi\"\n\n  # 国内大陆服务器的备案信息\n  # For Chinese mainland website policy, other areas keep disable\n  beian:\n    enable: false\n    # ICP证号\n    icp_text: 京ICP证123456号\n    # 公安备案号，不填则只显示ICP\n    police_text: 京公网安备12345678号\n    # 公安备案的编号，用于URL跳转查询\n    police_code: 12345678\n    # 公安备案的图片. 为空时不显示备案图片\n    police_icon: /img/police_beian.png\n\n\n#---------------------------\n# 首页\n# Home Page\n#---------------------------\nindex:\n  # 首页 Banner 头图，可以是相对路径或绝对路径，以下相同\n  # Path of Banner image, can be a relative path or an absolute path, the same on other pages\n  banner_img: /img/default.png\n\n  # 头图高度，屏幕百分比\n  # Height ratio of banner image\n  # Available: 0 - 100\n  banner_img_height: 100\n\n  # 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明\n  # Opacity of the banner mask, 1.0 is completely opaque\n  # Available: 0 - 1.0\n  banner_mask_alpha: 0.3\n\n  # 首页副标题的独立设置\n  # Independent config of home page subtitle\n  slogan:\n    enable: true\n\n    # 为空则按 hexo config.subtitle 显示\n    # If empty, text based on `subtitle` in hexo config\n    text: \"An elegant Material-Design theme for Hexo\"\n\n    # 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能\n    # Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation\n    api:\n      enable: false\n\n      # 请求地址\n      # Request url\n      url: \"\"\n\n      # 请求方法\n      # Request method\n      # Available: GET | POST | PUT\n      method: \"GET\"\n\n      # 请求头\n      # Request headers\n      headers: {}\n\n      # 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 {\"data\": {\"author\": \"fluid\", \"content\": \"An elegant theme\"}}, 则取值字段为 ['data', 'content']；如果返回是列表则自动选择第一项\n      # The value field of the string obtained from the response. For example, the response content is {\"data\": {\"author\": \"fluid\", \"content\": \"An elegant theme\"}}, the expected `keys: ['data','content']`; if the return is a list, the first item is automatically selected\n      keys: []\n\n  # 自动截取文章摘要\n  # Auto extract post\n  auto_excerpt:\n    enable: true\n\n  # 打开文章的标签方式\n  # The browser tag to open the post\n  # Available: _blank | _self\n  post_url_target: _self\n\n  # 是否显示文章信息（时间、分类、标签）\n  # Meta information of post\n  post_meta:\n    date: true\n    category: true\n    tag: true\n\n  # 文章通过 sticky 排序后，在首页文章标题前显示图标\n  # If the posts are sorted by `sticky`, an icon is displayed in front of the post title\n  post_sticky:\n    enable: true\n    icon: \"iconfont icon-top\"\n\n\n#---------------------------\n# 文章页\n# Post Page\n#---------------------------\npost:\n  banner_img: /img/default.png\n  banner_img_height: 70\n  banner_mask_alpha: 0.3\n\n  # 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片\n  # Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed\n  default_index_img:\n\n  # 文章标题下方的元信息\n  # Meta information below title\n  meta:\n    # 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值\n    # Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config\n    author:\n      enable: false\n\n    # 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期\n    # Post date, based on `date` field in front-matter, if not set, based on create date of .md file\n    date:\n      enable: true\n      # 格式参照 ISO-8601 日期格式化\n      # ISO-8601 date format\n      # See: http://momentjs.cn/docs/#/parsing/string-format/\n      format: \"LL a\"\n\n    # 字数统计\n    # Word count\n    wordcount:\n      enable: true\n\n    # 估计阅读全文需要的时长\n    # Estimated reading time\n    min2read:\n      enable: true\n      # 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节\n      # Average word length (chars count in word), ZH ≈ 2, EN ≈ 5\n      awl: 2\n      # 每分钟阅读字数，如果大部分是技术文章可适度调低\n      # Words per minute\n      wpm: 60\n\n    # 浏览量计数\n    # Number of visits\n    views:\n      enable: false\n      # 统计数据来源\n      # Data Source\n      # Options: busuanzi | leancloud\n      source: \"busuanzi\"\n\n  # 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）\n  # Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)\n  updated:\n    enable: false\n\n    # 格式参照 ISO-8601 日期格式化\n    # ISO-8601 date format\n    # See: http://momentjs.cn/docs/#/parsing/string-format/\n    date_format: \"LL a\"\n\n    # 是否使用相对时间表示，比如：\"3 天前\"\n    # If true, it will be a relative time, such as: \"3 days ago\"\n    relative: false\n\n    # 提示标签类型\n    # Note class\n    # Options: default | primary | info | success | warning | danger | light\n    note_class: info\n\n  # 侧边栏展示当前分类下的文章\n  # Sidebar of category\n  category_bar:\n    enable: true\n\n    # 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [\"分类A\"]` 来指定分类\n    # If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [\"CategoryA\"]` to specify categories\n    specific: true\n\n    # 置于板块的左侧或右侧\n    # place in the board\n    # Options: left | right\n    placement: left\n\n    # 文章的排序字段，前面带减号是倒序，不带减号是正序\n    # Sort field for posts, with a minus sign is reverse order\n    # Options: date | title | or other field of front-matter\n    post_order_by: \"title\"\n\n    # 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制\n    # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit\n    post_limit: 0\n\n  # 侧边栏展示文章目录\n  # Table of contents (TOC) in the sidebar\n  toc:\n    enable: true\n\n    # 置于板块的左侧或右侧\n    # place in the board\n    # Options: left | right\n    placement: right\n\n    # 目录会选择这些节点作为标题\n    # TOC will select these nodes as headings\n    headingSelector: \"h1,h2,h3,h4,h5,h6\"\n\n    # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开\n    # Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings\n    collapseDepth: 0\n\n  # 版权声明，会显示在每篇文章的结尾\n  # Copyright, will be displayed at the end of each post\n  copyright:\n    enable: true\n\n    # CreativeCommons license\n    # Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND\n    license: 'BY'\n\n    # 显示作者\n    author:\n      enable: true\n\n    # 显示发布日期\n    # Show post date\n    post_date:\n      enable: true\n      format: \"LL\"\n\n    # 显示更新日期\n    # Show update date\n    update_date:\n      enable: false\n      format: \"LL\"\n\n  # 文章底部上一篇下一篇功能\n  # Link to previous/next post\n  prev_next:\n    enable: true\n\n  # 文章图片标题\n  # Image caption\n  image_caption:\n    enable: true\n\n  # 文章图片可点击放大\n  # Zoom feature of images\n  image_zoom:\n    enable: true\n    # 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 ['-slim', ''] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 ['re:\\\\d{3,4}\\\\/\\\\d{3,4}\\\\/', '']\n    # The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: ['-slim', ''] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: ['re:\\\\d{3,4}\\\\/\\\\d{3,4}\\\\/','']\n    img_url_replace: ['', '']\n\n  # 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突\n  # Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict\n  footnote:\n    enable: true\n    # 脚注的节标题，也可以在 front-matter 中通过 `footnote: <h2>Reference</h2>` 这种形式修改单独页面的 header\n    # The section title of the footnote, you can also modify the header of a single page in the form of `footnote: <h2>Reference</h2>` in front-matter\n    header: ''\n\n  # 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式\n  # Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math\n  math:\n    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`\n    # If you want to use math on the custom page, you need to set `math: true` in Front-matter\n    enable: false\n\n    # 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度\n    # If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math\n    specific: false\n\n    # Options: mathjax | katex\n    engine: mathjax\n\n  # 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图\n  # Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid\n  mermaid:\n    # 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`\n    # If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter\n    enable: false\n\n    # 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度\n    # If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid\n    specific: false\n\n    # See: http://mermaid-js.github.io/mermaid/\n    options: { theme: 'default' }\n\n  # 评论插件\n  # Comment plugin\n  comments:\n    enable: false\n    # 指定的插件，需要同时设置对应插件的必要参数\n    # The specified plugin needs to set the necessary parameters at the same time\n    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis\n    type: disqus\n\n\n#---------------------------\n# 评论插件\n# Comment plugins\n#\n# 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数\n# Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`\n#---------------------------\n\n# Utterances\n# 基于 GitHub Issues\n# Based on GitHub Issues\n# See: https://utteranc.es\nutterances:\n  repo:\n  issue_term: pathname\n  label: utterances\n  theme: github-light\n  theme_dark: github-dark\n\n# Disqus\n# 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs\n# Based on third-party service\n# See: https://disqus.com\ndisqus:\n  shortname:\n  # 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用\n  # The following are Disqusjs configurations, please ignore if DisqusJS is not required\n  # See: https://github.com/SukkaW/DisqusJS\n  disqusjs: false\n  apikey:\n\n# Gitalk\n# 基于 GitHub Issues\n# Based on GitHub Issues\n# See: https://github.com/gitalk/gitalk#options\ngitalk:\n  clientID:\n  clientSecret:\n  repo:\n  owner:\n  admin: ['name']\n  language: zh-CN\n  labels: ['Gitalk']\n  perPage: 10\n  pagerDirection: last\n  distractionFreeMode: false\n  createIssueManually: true\n  # 默认 proxy 可能会失效，解决方法请见下方链接\n  # The default proxy may be invalid, refer to the links for solutions\n  # https://github.com/gitalk/gitalk/issues/429\n  # https://github.com/Zibri/cloudflare-cors-anywhere\n  proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token\n\n# Valine\n# 基于 LeanCloud\n# Based on LeanCloud\n# See: https://valine.js.org/\nvaline:\n  appId:\n  appKey:\n  path: window.location.pathname\n  placeholder:\n  avatar: 'retro'\n  meta: ['nick', 'mail', 'link']\n  requiredFields: []\n  pageSize: 10\n  lang: 'zh-CN'\n  highlight: false\n  recordIP: false\n  serverURLs: ''\n  emojiCDN:\n  emojiMaps:\n  enableQQ: false\n\n# Waline\n# 从 Valine 衍生而来，额外增加了服务端和多种功能\n# Derived from Valine, with self-hosted service and new features\n# See: https://waline.js.org/\nwaline:\n  serverURL: ''\n  path: window.location.pathname\n  placeholder:\n  meta: ['nick', 'mail', 'link']\n  requiredMeta: ['nick']\n  lang: 'zh-CN'\n  emoji: ['https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo']\n  dark: 'html[data-user-color-scheme=\"dark\"]'\n  avatar: 'retro'\n  avatarCDN: 'https://seccdn.libravatar.org/avatar/'\n  avatarForce: false\n  wordLimit: 0\n  pageSize: 10\n  highlight: true\n\n# 畅言 Changyan\n# 基于第三方的服务\n# Based on third-party service, insufficient support for regions outside China\n# http://changyan.kuaizhan.com\nchangyan:\n  appid: ''\n  appkey: ''\n\n# 来必力 Livere\n# 基于第三方的服务\n# Based on third-party service\n# See: https://www.livere.com\nlivere:\n  uid: ''\n\n# Remark42\n# 需要自托管服务端\n# Based on self-hosted service\n# See: https://remark42.com\nremark42:\n  host:\n  site_id:\n  max_shown_comments: 10\n  locale: zh\n  components: ['embed']\n\n# Twikoo\n# 基于腾讯云开发\n# Based on Tencent CloudBase\n# See: https://twikoo.js.org\ntwikoo:\n  envId:\n  region: ap-shanghai\n  path: window.location.pathname\n\n# Cusdis\n# 基于第三方服务或自托管服务\n# Based on third-party or self-hosted service\n# See https://cusdis.com\ncusdis:\n  host:\n  app_id:\n  lang: zh-cn\n\n#---------------------------\n# 归档页\n# Archive Page\n#---------------------------\narchive:\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n\n\n#---------------------------\n# 分类页\n# Category Page\n#---------------------------\ncategory:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n\n  # 分类的排序字段，前面带减号是倒序，不带减号是正序\n  # Sort field for categories, with a minus sign is reverse order\n  # Options: length | name\n  order_by: \"-length\"\n\n  # 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开\n  # Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories\n  collapse_depth: 0\n\n  # 文章的排序字段，前面带减号是倒序，不带减号是正序\n  # Sort field for posts, with a minus sign is reverse order\n  # Options: date | title | or other field of front-matter\n  post_order_by: \"-date\"\n\n  # 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制\n  # The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit\n  post_limit: 10\n\n\n#---------------------------\n# 标签页\n# Tag Page\n#---------------------------\ntag:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 80\n  banner_mask_alpha: 0.3\n  tagcloud:\n    min_font: 15\n    max_font: 30\n    unit: px\n    start_color: \"#BBBBEE\"\n    end_color: \"#337ab7\"\n\n\n#---------------------------\n# 关于页\n# About Page\n#---------------------------\nabout:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n  avatar: /img/avatar.png\n  name: \"Fluid\"\n  intro: \"An elegant theme for Hexo\"\n  # 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码\n  # More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code\n  icons:\n    - { class: \"iconfont icon-github-fill\", link: \"https://github.com\", tip: \"GitHub\" }\n    - { class: \"iconfont icon-douban-fill\", link: \"https://douban.com\", tip: \"豆瓣\" }\n    - { class: \"iconfont icon-wechat-fill\", qrcode: \"/img/favicon.png\" }\n\n\n#---------------------------\n# 自定义页\n# Custom Page\n#\n# 通过 hexo new page 命令创建的页面\n# Custom Page through `hexo new page`\n#---------------------------\npage:\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n\n\n#---------------------------\n# 404页\n# 404 Page\n#---------------------------\npage404:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 85\n  banner_mask_alpha: 0.3\n  # 重定向到首页的延迟(毫秒)\n  # Delay in redirecting to home page (milliseconds)\n  redirect_delay: 5000\n\n\n#---------------------------\n# 友链页\n# Links Page\n#---------------------------\nlinks:\n  enable: true\n  banner_img: /img/default.png\n  banner_img_height: 60\n  banner_mask_alpha: 0.3\n  # 友链的成员项\n  # Member item of page\n  items:\n    - {\n      title: \"Fluid Blog\",\n      intro: \"主题博客\",\n      link: \"https://hexo.fluid-dev.com/\",\n      avatar: \"/img/favicon.png\"\n    }\n    - {\n      title: \"Fluid Docs\",\n      intro: \"主题使用指南\",\n      link: \"https://hexo.fluid-dev.com/docs/\",\n      avatar: \"/img/favicon.png\"\n    }\n    - {\n      title: \"Fluid Repo\",\n      intro: \"主题 GitHub 仓库\",\n      link: \"https://github.com/fluid-dev/hexo-theme-fluid\",\n      avatar: \"/img/favicon.png\"\n    }\n\n  # 当成员头像加载失败时，替换为指定图片\n  # When the member avatar fails to load, replace the specified image\n  onerror_avatar: /img/avatar.png\n\n  # 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字\n  # Custom content at the bottom of the links\n  custom:\n    enable: false\n    content: '<hr><p>在下方留言申请加入我的友链，按如下格式提供信息：</p><ul><li>博客名：Fluid</li><li>简介：Fluid 主题官方博客</li><li>链接：https://hexo.fluid-dev.com</li><li>图片：https://hexo.fluid-dev.com/img/favicon.png</li></ul>'\n\n  # 评论插件\n  # Comment plugin\n  comments:\n    enable: false\n    # 指定的插件，需要同时设置对应插件的必要参数\n    # The specified plugin needs to set the necessary parameters at the same time\n    # Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis\n    type: disqus\n\n\n#---------------------------\n# 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，\n# 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，\n# ** 如果你不知道如何设置，请不要做任何改动 **\n#\n# Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.\n# Be aware that you would better use the same version as default ones to avoid potential problems.\n# DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING\n#---------------------------\n\nstatic_prefix:\n  # 内部静态\n  # Internal static\n  internal_js: /js\n  internal_css: /css\n  internal_img: /img\n\n  anchor: https://lib.baomitu.com/anchor-js/4.3.1/\n\n  github_markdown: https://lib.baomitu.com/github-markdown-css/4.0.0/\n\n  jquery: https://lib.baomitu.com/jquery/3.6.0/\n\n  bootstrap: https://lib.baomitu.com/twitter-bootstrap/4.6.1/\n\n  prismjs: https://lib.baomitu.com/prism/1.26.0/\n\n  tocbot: https://lib.baomitu.com/tocbot/4.18.0/\n\n  typed: https://lib.baomitu.com/typed.js/2.0.12/\n\n  fancybox: https://lib.baomitu.com/fancybox/3.5.7/\n\n  nprogress: https://lib.baomitu.com/nprogress/0.2.0/\n\n  mathjax: https://lib.baomitu.com/mathjax/3.2.0/\n\n  katex: https://lib.baomitu.com/KaTeX/0.15.2/\n\n  busuanzi: https://busuanzi.ibruce.info/busuanzi/2.3/\n\n  clipboard: https://lib.baomitu.com/clipboard.js/2.0.10/\n\n  mermaid: https://lib.baomitu.com/mermaid/8.13.10/\n\n  valine: https://lib.baomitu.com/valine/1.4.16/\n\n  waline: https://lib.baomitu.com/waline/1.5.2/\n\n  gitalk: https://lib.baomitu.com/gitalk/1.7.2/\n\n  disqusjs: https://lib.baomitu.com/disqusjs/1.3.0/\n\n  twikoo: https://lib.baomitu.com/twikoo/1.4.17/\n\n  hint: https://lib.baomitu.com/hint.css/2.7.0/\n\n```\n\n### 来源\n\n- [GitHub`_config.yml`](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)","slug":"hexo/hexo Fluid config","published":1,"date":"2022-03-21T09:14:58.729Z","updated":"2022-03-22T06:40:10.015Z","_id":"cl10sameg0001owsp8b12hx6n","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Hexo-Fluid-主题的-config-yml内容\"><a href=\"#Hexo-Fluid-主题的-config-yml内容\" class=\"headerlink\" title=\"Hexo Fluid 主题的 _config.yml内容\"></a>Hexo Fluid 主题的 _config.yml内容</h3><p>版本：version：1.8.14</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># Hexo Theme Fluid</span>\n<span class=\"hljs-comment\"># Author: Fluid-dev</span>\n<span class=\"hljs-comment\"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span>\n<span class=\"hljs-comment\"># 你可以从指南中获得更详细的说明</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span>\n<span class=\"hljs-comment\"># You can get more detailed help from the guide</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 全局</span>\n<span class=\"hljs-comment\"># Global</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-comment\"># 用于浏览器标签的图标</span>\n<span class=\"hljs-comment\"># Icon for browser tab</span>\n<span class=\"hljs-attr\">favicon:</span> <span class=\"hljs-string\">/img/fluid.png</span>\n\n<span class=\"hljs-comment\"># 用于苹果设备的图标</span>\n<span class=\"hljs-comment\"># Icon for Apple touch</span>\n<span class=\"hljs-attr\">apple_touch_icon:</span> <span class=\"hljs-string\">/img/fluid.png</span>\n\n<span class=\"hljs-comment\"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span>\n<span class=\"hljs-comment\"># Title separator in browser tab, eg: article - site</span>\n<span class=\"hljs-attr\">tab_title_separator:</span> <span class=\"hljs-string\">&quot; - &quot;</span>\n\n<span class=\"hljs-comment\"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span>\n<span class=\"hljs-comment\"># Force all links to be HTTPS (applicable to HTTP mixed error)</span>\n<span class=\"hljs-attr\">force_https:</span> <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\"># 代码块的增强配置</span>\n<span class=\"hljs-comment\"># Enhancements to code blocks</span>\n<span class=\"hljs-attr\">code:</span>\n  <span class=\"hljs-comment\"># 是否开启复制代码的按钮</span>\n  <span class=\"hljs-comment\"># Enable copy code button</span>\n  <span class=\"hljs-attr\">copy_btn:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 代码语言</span>\n  <span class=\"hljs-comment\"># Code language</span>\n  <span class=\"hljs-attr\">language:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">default:</span> <span class=\"hljs-string\">&quot;TEXT&quot;</span>\n\n  <span class=\"hljs-comment\"># 代码高亮</span>\n  <span class=\"hljs-comment\"># Code highlight</span>\n  <span class=\"hljs-attr\">highlight:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 代码块是否显示行号</span>\n    <span class=\"hljs-comment\"># If true, the code block display line numbers</span>\n    <span class=\"hljs-attr\">line_number:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 实现高亮的库，对应下面的设置</span>\n    <span class=\"hljs-comment\"># Highlight library</span>\n    <span class=\"hljs-comment\"># Options: highlightjs | prismjs</span>\n    <span class=\"hljs-attr\">lib:</span> <span class=\"hljs-string\">&quot;highlightjs&quot;</span>\n\n    <span class=\"hljs-attr\">highlightjs:</span>\n      <span class=\"hljs-comment\"># 在链接中挑选 style 填入</span>\n      <span class=\"hljs-comment\"># Select a style in the link</span>\n      <span class=\"hljs-comment\"># See: https://highlightjs.org/static/demo/</span>\n      <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">&quot;github gist&quot;</span>\n      <span class=\"hljs-attr\">style_dark:</span> <span class=\"hljs-string\">&quot;dark&quot;</span>\n\n    <span class=\"hljs-attr\">prismjs:</span>\n      <span class=\"hljs-comment\"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span>\n      <span class=\"hljs-comment\"># Select the style button on the right side of the link page, you can also set the CSS link</span>\n      <span class=\"hljs-comment\"># See: https://prismjs.com/</span>\n      <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">&quot;default&quot;</span>\n      <span class=\"hljs-attr\">style_dark:</span> <span class=\"hljs-string\">&quot;tomorrow night&quot;</span>\n\n      <span class=\"hljs-comment\"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span>\n      <span class=\"hljs-comment\"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span>\n      <span class=\"hljs-attr\">preprocess:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 一些好玩的功能</span>\n<span class=\"hljs-comment\"># Some fun features</span>\n<span class=\"hljs-attr\">fun_features:</span>\n  <span class=\"hljs-comment\"># 为 subtitle 添加打字机效果</span>\n  <span class=\"hljs-comment\"># Typing animation for subtitle</span>\n  <span class=\"hljs-attr\">typing:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 打印速度，数字越大越慢</span>\n    <span class=\"hljs-comment\"># Typing speed, the larger the number, the slower</span>\n    <span class=\"hljs-attr\">typeSpeed:</span> <span class=\"hljs-number\">70</span>\n\n    <span class=\"hljs-comment\"># 游标字符</span>\n    <span class=\"hljs-comment\"># Cursor character</span>\n    <span class=\"hljs-attr\">cursorChar:</span> <span class=\"hljs-string\">&quot;_&quot;</span>\n\n    <span class=\"hljs-comment\"># 是否循环播放效果</span>\n    <span class=\"hljs-comment\"># If true, loop animation</span>\n    <span class=\"hljs-attr\">loop:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 在指定页面开启，不填则在所有页面开启</span>\n    <span class=\"hljs-comment\"># Enable in specified page, all pages by default</span>\n    <span class=\"hljs-comment\"># Options: home | post | tag | category | about | links | page | 404</span>\n    <span class=\"hljs-attr\">scope:</span> []\n\n  <span class=\"hljs-comment\"># 为文章内容中的标题添加锚图标</span>\n  <span class=\"hljs-comment\"># Add an anchor icon to the title on the post page</span>\n  <span class=\"hljs-attr\">anchorjs:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">element:</span> <span class=\"hljs-string\">h1,h2,h3,h4,h5,h6</span>\n    <span class=\"hljs-comment\"># Options: left | right</span>\n    <span class=\"hljs-attr\">placement:</span> <span class=\"hljs-string\">left</span>\n    <span class=\"hljs-comment\"># Options: hover | always | touch</span>\n    <span class=\"hljs-attr\">visible:</span> <span class=\"hljs-string\">hover</span>\n    <span class=\"hljs-comment\"># Options: § | # | ❡</span>\n    <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n\n  <span class=\"hljs-comment\"># 加载进度条</span>\n  <span class=\"hljs-comment\"># Progress bar when loading</span>\n  <span class=\"hljs-attr\">progressbar:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">height_px:</span> <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-attr\">color:</span> <span class=\"hljs-string\">&quot;#29d&quot;</span>\n    <span class=\"hljs-comment\"># See: https://github.com/rstacruz/nprogress</span>\n    <span class=\"hljs-attr\">options:</span> &#123; <span class=\"hljs-attr\">showSpinner:</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">trickleSpeed:</span> <span class=\"hljs-number\">100</span> &#125;\n\n<span class=\"hljs-comment\"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span>\n<span class=\"hljs-comment\"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span>\n<span class=\"hljs-attr\">dark_mode:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-comment\"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span>\n  <span class=\"hljs-comment\"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span>\n  <span class=\"hljs-comment\"># Options: auto | light | dark</span>\n  <span class=\"hljs-attr\">default:</span> <span class=\"hljs-string\">auto</span>\n\n<span class=\"hljs-comment\"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span>\n<span class=\"hljs-comment\"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span>\n<span class=\"hljs-comment\"># See: https://www.webdesignrankings.com/resources/lolcolors/</span>\n<span class=\"hljs-attr\">color:</span>\n  <span class=\"hljs-comment\"># body 背景色</span>\n  <span class=\"hljs-comment\"># Color of body background</span>\n  <span class=\"hljs-attr\">body_bg_color:</span> <span class=\"hljs-string\">&quot;#eee&quot;</span>\n  <span class=\"hljs-comment\"># 暗色模式下的 body 背景色，下同</span>\n  <span class=\"hljs-comment\"># Color in dark mode, the same below</span>\n  <span class=\"hljs-attr\">body_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#181c27&quot;</span>\n\n  <span class=\"hljs-comment\"># 顶部菜单背景色</span>\n  <span class=\"hljs-comment\"># Color of navigation bar background</span>\n  <span class=\"hljs-attr\">navbar_bg_color:</span> <span class=\"hljs-string\">&quot;#2f4154&quot;</span>\n  <span class=\"hljs-attr\">navbar_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#1f3144&quot;</span>\n\n  <span class=\"hljs-comment\"># 顶部菜单字体色</span>\n  <span class=\"hljs-comment\"># Color of navigation bar text</span>\n  <span class=\"hljs-attr\">navbar_text_color:</span> <span class=\"hljs-string\">&quot;#fff&quot;</span>\n  <span class=\"hljs-attr\">navbar_text_color_dark:</span> <span class=\"hljs-string\">&quot;#d0d0d0&quot;</span>\n\n  <span class=\"hljs-comment\"># 副标题字体色</span>\n  <span class=\"hljs-comment\"># Color of navigation bar text</span>\n  <span class=\"hljs-attr\">subtitle_color:</span> <span class=\"hljs-string\">&quot;#fff&quot;</span>\n  <span class=\"hljs-attr\">subtitle_color_dark:</span> <span class=\"hljs-string\">&quot;#d0d0d0&quot;</span>\n\n  <span class=\"hljs-comment\"># 全局字体色</span>\n  <span class=\"hljs-comment\"># Color of global text</span>\n  <span class=\"hljs-attr\">text_color:</span> <span class=\"hljs-string\">&quot;#3c4858&quot;</span>\n  <span class=\"hljs-attr\">text_color_dark:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n\n  <span class=\"hljs-comment\"># 全局次级字体色（摘要、简介等位置）</span>\n  <span class=\"hljs-comment\"># Color of global secondary text (excerpt, introduction, etc.)</span>\n  <span class=\"hljs-attr\">sec_text_color:</span> <span class=\"hljs-string\">&quot;#718096&quot;</span>\n  <span class=\"hljs-attr\">sec_text_color_dark:</span> <span class=\"hljs-string\">&quot;#a7a9ad&quot;</span>\n\n  <span class=\"hljs-comment\"># 主面板背景色</span>\n  <span class=\"hljs-comment\"># Color of main board</span>\n  <span class=\"hljs-attr\">board_color:</span> <span class=\"hljs-string\">&quot;#fff&quot;</span>\n  <span class=\"hljs-attr\">board_color_dark:</span> <span class=\"hljs-string\">&quot;#252d38&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章正文字体色</span>\n  <span class=\"hljs-comment\"># Color of post text</span>\n  <span class=\"hljs-attr\">post_text_color:</span> <span class=\"hljs-string\">&quot;#2c3e50&quot;</span>\n  <span class=\"hljs-attr\">post_text_color_dark:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章正文字体色（h1 h2 h3...）</span>\n  <span class=\"hljs-comment\"># Color of Article heading (h1 h2 h3...)</span>\n  <span class=\"hljs-attr\">post_heading_color:</span> <span class=\"hljs-string\">&quot;#1a202c&quot;</span>\n  <span class=\"hljs-attr\">post_heading_color_dark:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章超链接字体色</span>\n  <span class=\"hljs-comment\"># Color of post link</span>\n  <span class=\"hljs-attr\">post_link_color:</span> <span class=\"hljs-string\">&quot;#0366d6&quot;</span>\n  <span class=\"hljs-attr\">post_link_color_dark:</span> <span class=\"hljs-string\">&quot;#1589e9&quot;</span>\n\n  <span class=\"hljs-comment\"># 超链接悬浮时字体色</span>\n  <span class=\"hljs-comment\"># Color of link when hovering</span>\n  <span class=\"hljs-attr\">link_hover_color:</span> <span class=\"hljs-string\">&quot;#30a9de&quot;</span>\n  <span class=\"hljs-attr\">link_hover_color_dark:</span> <span class=\"hljs-string\">&quot;#30a9de&quot;</span>\n\n  <span class=\"hljs-comment\"># 超链接悬浮背景色</span>\n  <span class=\"hljs-comment\"># Color of link background when hovering</span>\n  <span class=\"hljs-attr\">link_hover_bg_color:</span> <span class=\"hljs-string\">&quot;#f8f9fa&quot;</span>\n  <span class=\"hljs-attr\">link_hover_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#364151&quot;</span>\n\n  <span class=\"hljs-comment\"># 分隔线和表格边线的颜色</span>\n  <span class=\"hljs-comment\"># Color of horizontal rule and table border</span>\n  <span class=\"hljs-attr\">line_color:</span> <span class=\"hljs-string\">&quot;#eaecef&quot;</span>\n  <span class=\"hljs-attr\">line_color_dark:</span> <span class=\"hljs-string\">&quot;#435266&quot;</span>\n\n  <span class=\"hljs-comment\"># 滚动条颜色</span>\n  <span class=\"hljs-comment\"># Color of scrollbar</span>\n  <span class=\"hljs-attr\">scrollbar_color:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n  <span class=\"hljs-attr\">scrollbar_color_dark:</span> <span class=\"hljs-string\">&quot;#687582&quot;</span>\n  <span class=\"hljs-comment\"># 滚动条悬浮颜色</span>\n  <span class=\"hljs-comment\"># Color of scrollbar when hovering</span>\n  <span class=\"hljs-attr\">scrollbar_hover_color:</span> <span class=\"hljs-string\">&quot;#a6a6a6&quot;</span>\n  <span class=\"hljs-attr\">scrollbar_hover_color_dark:</span> <span class=\"hljs-string\">&quot;#9da8b3&quot;</span>\n\n  <span class=\"hljs-comment\"># 按钮背景色</span>\n  <span class=\"hljs-comment\"># Color of button</span>\n  <span class=\"hljs-attr\">button_bg_color:</span> <span class=\"hljs-string\">&quot;transparent&quot;</span>\n  <span class=\"hljs-attr\">button_bg_color_dark:</span> <span class=\"hljs-string\">&quot;transparent&quot;</span>\n  <span class=\"hljs-comment\"># 按钮悬浮背景色</span>\n  <span class=\"hljs-comment\"># Color of button when hovering</span>\n  <span class=\"hljs-attr\">button_hover_bg_color:</span> <span class=\"hljs-string\">&quot;#f2f3f5&quot;</span>\n  <span class=\"hljs-attr\">button_hover_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#46647e&quot;</span>\n\n<span class=\"hljs-comment\"># 主题字体配置</span>\n<span class=\"hljs-comment\"># Font</span>\n<span class=\"hljs-attr\">font:</span>\n  <span class=\"hljs-attr\">font_size:</span> <span class=\"hljs-string\">16px</span>\n  <span class=\"hljs-attr\">font_family:</span>\n  <span class=\"hljs-attr\">letter_spacing:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">02em</span>\n  <span class=\"hljs-attr\">code_font_size:</span> <span class=\"hljs-number\">85</span><span class=\"hljs-string\">%</span>\n\n<span class=\"hljs-comment\"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span>\n<span class=\"hljs-comment\"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span>\n<span class=\"hljs-attr\">custom_js:</span>\n\n<span class=\"hljs-comment\"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span>\n<span class=\"hljs-comment\"># The usage is the same as custom_js</span>\n<span class=\"hljs-attr\">custom_css:</span>\n\n<span class=\"hljs-comment\"># 网页访问统计</span>\n<span class=\"hljs-comment\"># Analysis of website visitors</span>\n<span class=\"hljs-attr\">web_analytics:</span>  <span class=\"hljs-comment\"># 网页访问统计</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-comment\"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span>\n  <span class=\"hljs-comment\"># Baidu analytics, get the string behind `hm.js?`</span>\n  <span class=\"hljs-comment\"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span>\n  <span class=\"hljs-attr\">baidu:</span>\n\n  <span class=\"hljs-comment\"># Google 统计的 Tracking ID</span>\n  <span class=\"hljs-comment\"># Google analytics, set Tracking ID</span>\n  <span class=\"hljs-comment\"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span>\n  <span class=\"hljs-attr\">google:</span>\n\n  <span class=\"hljs-comment\"># Google gtag.js 的媒体资源 ID</span>\n  <span class=\"hljs-comment\"># Google gtag.js GA_MEASUREMENT_ID</span>\n  <span class=\"hljs-comment\"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span>\n  <span class=\"hljs-attr\">gtag:</span>\n\n  <span class=\"hljs-comment\"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span>\n  <span class=\"hljs-comment\"># Tencent analytics, set APP ID</span>\n  <span class=\"hljs-comment\"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span>\n  <span class=\"hljs-attr\">tencent:</span>\n    <span class=\"hljs-attr\">sid:</span>\n    <span class=\"hljs-attr\">cid:</span>\n\n  <span class=\"hljs-comment\"># 51.la 站点统计 ID</span>\n  <span class=\"hljs-comment\"># 51.la analytics</span>\n  <span class=\"hljs-comment\"># See: https://www.51.la/user/site/index</span>\n  <span class=\"hljs-attr\">woyaola:</span>  <span class=\"hljs-comment\"># 51.la 站点统计 ID，参见</span>\n\n  <span class=\"hljs-comment\"># 友盟/cnzz 站点统计 web_id</span>\n  <span class=\"hljs-comment\"># cnzz analytics</span>\n  <span class=\"hljs-comment\"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span>\n  <span class=\"hljs-attr\">cnzz:</span>\n\n  <span class=\"hljs-comment\"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span>\n  <span class=\"hljs-comment\"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span>\n  <span class=\"hljs-attr\">leancloud:</span>\n    <span class=\"hljs-attr\">app_id:</span>\n    <span class=\"hljs-attr\">app_key:</span>\n    <span class=\"hljs-comment\"># REST API 服务器地址，国际版不填</span>\n    <span class=\"hljs-comment\"># Only the Chinese mainland users need to set</span>\n    <span class=\"hljs-attr\">server_url:</span>\n    <span class=\"hljs-comment\"># 统计页面时获取路径的属性</span>\n    <span class=\"hljs-comment\"># Get the attribute of the page path during statistics</span>\n    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n    <span class=\"hljs-comment\"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span>\n    <span class=\"hljs-comment\"># If ture, ignore localhost &amp; 127.0.0.1</span>\n    <span class=\"hljs-attr\">ignore_local:</span> <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span>\n<span class=\"hljs-comment\"># Lazy loading of images and comment plugin on the page</span>\n<span class=\"hljs-attr\">lazyload:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 加载时的占位图片</span>\n  <span class=\"hljs-comment\"># The placeholder image when loading</span>\n  <span class=\"hljs-attr\">loading_img:</span> <span class=\"hljs-string\">/img/loading.gif</span>\n\n  <span class=\"hljs-comment\"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span>\n  <span class=\"hljs-comment\"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span>\n  <span class=\"hljs-attr\">onlypost:</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-comment\"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span>\n  <span class=\"hljs-comment\"># The factor of viewport height that triggers loading</span>\n  <span class=\"hljs-attr\">offset_factor:</span> <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-comment\"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span>\n<span class=\"hljs-comment\"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span>\n<span class=\"hljs-attr\">iconfont:</span> <span class=\"hljs-string\">//at.alicdn.com/t/font_1736178_lbnruvf0jn.css</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 页头</span>\n<span class=\"hljs-comment\"># Header</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-comment\"># 导航栏的相关配置</span>\n<span class=\"hljs-comment\"># Navigation bar</span>\n<span class=\"hljs-attr\">navbar:</span>\n  <span class=\"hljs-comment\"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span>\n  <span class=\"hljs-comment\"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span>\n  <span class=\"hljs-attr\">blog_title:</span> <span class=\"hljs-string\">&quot;Fluid&quot;</span>\n\n  <span class=\"hljs-comment\"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span>\n  <span class=\"hljs-comment\"># Navigation bar frosted glass special animation. It is an experimental feature</span>\n  <span class=\"hljs-attr\">ground_glass:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 模糊像素，只能为数字，数字越大模糊度越高</span>\n    <span class=\"hljs-comment\"># Number of blurred pixel. the larger the number, the higher the blur</span>\n    <span class=\"hljs-attr\">px:</span> <span class=\"hljs-number\">3</span>\n\n    <span class=\"hljs-comment\"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span>\n    <span class=\"hljs-comment\"># Ratio of opacity, 1.0 is completely opaque</span>\n    <span class=\"hljs-comment\"># available: 0 - 1.0</span>\n    <span class=\"hljs-attr\">alpha:</span> <span class=\"hljs-number\">0.7</span>\n\n  <span class=\"hljs-comment\"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span>\n  <span class=\"hljs-comment\"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span>\n  <span class=\"hljs-attr\">menu:</span>\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;home&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-home-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;archive&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/archives/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-archive-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;category&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/categories/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-category-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;tag&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/tags/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-tags-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;about&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/about/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-user-fill&quot;</span> &#125;\n    <span class=\"hljs-comment\">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span>\n\n<span class=\"hljs-comment\"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span>\n<span class=\"hljs-comment\"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span>\n<span class=\"hljs-attr\">search:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span>\n  <span class=\"hljs-comment\"># Path for search index file, it can be a relative path or an absolute path</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/local-search.xml</span>\n\n  <span class=\"hljs-comment\"># 文件生成在本地的位置，必须是相对路径</span>\n  <span class=\"hljs-comment\"># The location where the index file is generated locally, it must be a relative location</span>\n  <span class=\"hljs-attr\">generate_path:</span> <span class=\"hljs-string\">/local-search.xml</span>\n\n  <span class=\"hljs-comment\"># 搜索的范围</span>\n  <span class=\"hljs-comment\"># Search field</span>\n  <span class=\"hljs-comment\"># Options: post | page | all</span>\n  <span class=\"hljs-attr\">field:</span> <span class=\"hljs-string\">post</span>\n\n  <span class=\"hljs-comment\"># 搜索是否扫描正文</span>\n  <span class=\"hljs-comment\"># If true, search will scan the post content</span>\n  <span class=\"hljs-attr\">content:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 首屏图片的相关配置</span>\n<span class=\"hljs-comment\"># Config of the big image on the first screen</span>\n<span class=\"hljs-attr\">banner:</span>\n  <span class=\"hljs-comment\"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span>\n  <span class=\"hljs-comment\"># Scrolling parallax</span>\n  <span class=\"hljs-attr\">parallax:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span>\n  <span class=\"hljs-comment\"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span>\n  <span class=\"hljs-attr\">width_height_ratio:</span> <span class=\"hljs-number\">1.0</span>\n\n<span class=\"hljs-comment\"># 向下滚动的箭头</span>\n<span class=\"hljs-comment\"># Scroll down arrow</span>\n<span class=\"hljs-attr\">scroll_down_arrow:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 头图高度不小于指定比例，才显示箭头</span>\n  <span class=\"hljs-comment\"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span>\n  <span class=\"hljs-comment\"># Available: 0 - 100</span>\n  <span class=\"hljs-attr\">banner_height_limit:</span> <span class=\"hljs-number\">80</span>\n\n  <span class=\"hljs-comment\"># 翻页后自动滚动</span>\n  <span class=\"hljs-comment\"># Auto scroll after page turning</span>\n  <span class=\"hljs-attr\">scroll_after_turning_page:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 向顶部滚动的箭头</span>\n<span class=\"hljs-comment\"># Scroll top arrow</span>\n<span class=\"hljs-attr\">scroll_top_arrow:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># Open Graph metadata</span>\n<span class=\"hljs-comment\"># See: https://hexo.io/docs/helpers.html#open-graph</span>\n<span class=\"hljs-attr\">open_graph:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">twitter_card:</span> <span class=\"hljs-string\">summary_large_image</span>\n  <span class=\"hljs-attr\">twitter_id:</span>\n  <span class=\"hljs-attr\">twitter_site:</span>\n  <span class=\"hljs-attr\">google_plus:</span>\n  <span class=\"hljs-attr\">fb_admins:</span>\n  <span class=\"hljs-attr\">fb_app_id:</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 页脚</span>\n<span class=\"hljs-comment\"># Footer</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">footer:</span>\n  <span class=\"hljs-comment\"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span>\n  <span class=\"hljs-comment\"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span>\n  <span class=\"hljs-attr\">content:</span> <span class=\"hljs-string\">&#x27;</span>\n<span class=\"hljs-string\">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span>\n<span class=\"hljs-string\">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span>\n<span class=\"hljs-string\">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span>\n<span class=\"hljs-string\">  &#x27;</span>\n\n  <span class=\"hljs-comment\"># 展示网站的 PV、UV 统计数</span>\n  <span class=\"hljs-comment\"># Display website PV and UV statistics</span>\n  <span class=\"hljs-attr\">statistics:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span>\n    <span class=\"hljs-comment\"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span>\n    <span class=\"hljs-comment\"># Options: busuanzi | leancloud</span>\n    <span class=\"hljs-attr\">source:</span> <span class=\"hljs-string\">&quot;busuanzi&quot;</span>\n\n  <span class=\"hljs-comment\"># 国内大陆服务器的备案信息</span>\n  <span class=\"hljs-comment\"># For Chinese mainland website policy, other areas keep disable</span>\n  <span class=\"hljs-attr\">beian:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># ICP证号</span>\n    <span class=\"hljs-attr\">icp_text:</span> <span class=\"hljs-string\">京ICP证123456号</span>\n    <span class=\"hljs-comment\"># 公安备案号，不填则只显示ICP</span>\n    <span class=\"hljs-attr\">police_text:</span> <span class=\"hljs-string\">京公网安备12345678号</span>\n    <span class=\"hljs-comment\"># 公安备案的编号，用于URL跳转查询</span>\n    <span class=\"hljs-attr\">police_code:</span> <span class=\"hljs-number\">12345678</span>\n    <span class=\"hljs-comment\"># 公安备案的图片. 为空时不显示备案图片</span>\n    <span class=\"hljs-attr\">police_icon:</span> <span class=\"hljs-string\">/img/police_beian.png</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 首页</span>\n<span class=\"hljs-comment\"># Home Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">index:</span>\n  <span class=\"hljs-comment\"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span>\n  <span class=\"hljs-comment\"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n\n  <span class=\"hljs-comment\"># 头图高度，屏幕百分比</span>\n  <span class=\"hljs-comment\"># Height ratio of banner image</span>\n  <span class=\"hljs-comment\"># Available: 0 - 100</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">100</span>\n\n  <span class=\"hljs-comment\"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span>\n  <span class=\"hljs-comment\"># Opacity of the banner mask, 1.0 is completely opaque</span>\n  <span class=\"hljs-comment\"># Available: 0 - 1.0</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n  <span class=\"hljs-comment\"># 首页副标题的独立设置</span>\n  <span class=\"hljs-comment\"># Independent config of home page subtitle</span>\n  <span class=\"hljs-attr\">slogan:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 为空则按 hexo config.subtitle 显示</span>\n    <span class=\"hljs-comment\"># If empty, text based on `subtitle` in hexo config</span>\n    <span class=\"hljs-attr\">text:</span> <span class=\"hljs-string\">&quot;An elegant Material-Design theme for Hexo&quot;</span>\n\n    <span class=\"hljs-comment\"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>\n    <span class=\"hljs-comment\"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>\n    <span class=\"hljs-attr\">api:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n      <span class=\"hljs-comment\"># 请求地址</span>\n      <span class=\"hljs-comment\"># Request url</span>\n      <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n\n      <span class=\"hljs-comment\"># 请求方法</span>\n      <span class=\"hljs-comment\"># Request method</span>\n      <span class=\"hljs-comment\"># Available: GET | POST | PUT</span>\n      <span class=\"hljs-attr\">method:</span> <span class=\"hljs-string\">&quot;GET&quot;</span>\n\n      <span class=\"hljs-comment\"># 请求头</span>\n      <span class=\"hljs-comment\"># Request headers</span>\n      <span class=\"hljs-attr\">headers:</span> &#123;&#125;\n\n      <span class=\"hljs-comment\"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>\n      <span class=\"hljs-comment\"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span>\n      <span class=\"hljs-attr\">keys:</span> []\n\n  <span class=\"hljs-comment\"># 自动截取文章摘要</span>\n  <span class=\"hljs-comment\"># Auto extract post</span>\n  <span class=\"hljs-attr\">auto_excerpt:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 打开文章的标签方式</span>\n  <span class=\"hljs-comment\"># The browser tag to open the post</span>\n  <span class=\"hljs-comment\"># Available: _blank | _self</span>\n  <span class=\"hljs-attr\">post_url_target:</span> <span class=\"hljs-string\">_self</span>\n\n  <span class=\"hljs-comment\"># 是否显示文章信息（时间、分类、标签）</span>\n  <span class=\"hljs-comment\"># Meta information of post</span>\n  <span class=\"hljs-attr\">post_meta:</span>\n    <span class=\"hljs-attr\">date:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">category:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span>\n  <span class=\"hljs-comment\"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span>\n  <span class=\"hljs-attr\">post_sticky:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-top&quot;</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 文章页</span>\n<span class=\"hljs-comment\"># Post Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">post:</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">70</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n  <span class=\"hljs-comment\"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span>\n  <span class=\"hljs-comment\"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span>\n  <span class=\"hljs-attr\">default_index_img:</span>\n\n  <span class=\"hljs-comment\"># 文章标题下方的元信息</span>\n  <span class=\"hljs-comment\"># Meta information below title</span>\n  <span class=\"hljs-attr\">meta:</span>\n    <span class=\"hljs-comment\"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>\n    <span class=\"hljs-comment\"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span>\n    <span class=\"hljs-attr\">author:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>\n    <span class=\"hljs-comment\"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span>\n    <span class=\"hljs-attr\">date:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\"># 格式参照 ISO-8601 日期格式化</span>\n      <span class=\"hljs-comment\"># ISO-8601 date format</span>\n      <span class=\"hljs-comment\"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>\n      <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">&quot;LL a&quot;</span>\n\n    <span class=\"hljs-comment\"># 字数统计</span>\n    <span class=\"hljs-comment\"># Word count</span>\n    <span class=\"hljs-attr\">wordcount:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 估计阅读全文需要的时长</span>\n    <span class=\"hljs-comment\"># Estimated reading time</span>\n    <span class=\"hljs-attr\">min2read:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span>\n      <span class=\"hljs-comment\"># Average word length (chars count in word), ZH ≈ 2, EN ≈ 5</span>\n      <span class=\"hljs-attr\">awl:</span> <span class=\"hljs-number\">2</span>\n      <span class=\"hljs-comment\"># 每分钟阅读字数，如果大部分是技术文章可适度调低</span>\n      <span class=\"hljs-comment\"># Words per minute</span>\n      <span class=\"hljs-attr\">wpm:</span> <span class=\"hljs-number\">60</span>\n\n    <span class=\"hljs-comment\"># 浏览量计数</span>\n    <span class=\"hljs-comment\"># Number of visits</span>\n    <span class=\"hljs-attr\">views:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-comment\"># 统计数据来源</span>\n      <span class=\"hljs-comment\"># Data Source</span>\n      <span class=\"hljs-comment\"># Options: busuanzi | leancloud</span>\n      <span class=\"hljs-attr\">source:</span> <span class=\"hljs-string\">&quot;busuanzi&quot;</span>\n\n  <span class=\"hljs-comment\"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span>\n  <span class=\"hljs-comment\"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span>\n  <span class=\"hljs-attr\">updated:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 格式参照 ISO-8601 日期格式化</span>\n    <span class=\"hljs-comment\"># ISO-8601 date format</span>\n    <span class=\"hljs-comment\"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>\n    <span class=\"hljs-attr\">date_format:</span> <span class=\"hljs-string\">&quot;LL a&quot;</span>\n\n    <span class=\"hljs-comment\"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span>\n    <span class=\"hljs-comment\"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span>\n    <span class=\"hljs-attr\">relative:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 提示标签类型</span>\n    <span class=\"hljs-comment\"># Note class</span>\n    <span class=\"hljs-comment\"># Options: default | primary | info | success | warning | danger | light</span>\n    <span class=\"hljs-attr\">note_class:</span> <span class=\"hljs-string\">info</span>\n\n  <span class=\"hljs-comment\"># 侧边栏展示当前分类下的文章</span>\n  <span class=\"hljs-comment\"># Sidebar of category</span>\n  <span class=\"hljs-attr\">category_bar:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span>\n    <span class=\"hljs-comment\"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span>\n    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 置于板块的左侧或右侧</span>\n    <span class=\"hljs-comment\"># place in the board</span>\n    <span class=\"hljs-comment\"># Options: left | right</span>\n    <span class=\"hljs-attr\">placement:</span> <span class=\"hljs-string\">left</span>\n\n    <span class=\"hljs-comment\"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>\n    <span class=\"hljs-comment\"># Sort field for posts, with a minus sign is reverse order</span>\n    <span class=\"hljs-comment\"># Options: date | title | or other field of front-matter</span>\n    <span class=\"hljs-attr\">post_order_by:</span> <span class=\"hljs-string\">&quot;title&quot;</span>\n\n    <span class=\"hljs-comment\"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>\n    <span class=\"hljs-comment\"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>\n    <span class=\"hljs-attr\">post_limit:</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># 侧边栏展示文章目录</span>\n  <span class=\"hljs-comment\"># Table of contents (TOC) in the sidebar</span>\n  <span class=\"hljs-attr\">toc:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 置于板块的左侧或右侧</span>\n    <span class=\"hljs-comment\"># place in the board</span>\n    <span class=\"hljs-comment\"># Options: left | right</span>\n    <span class=\"hljs-attr\">placement:</span> <span class=\"hljs-string\">right</span>\n\n    <span class=\"hljs-comment\"># 目录会选择这些节点作为标题</span>\n    <span class=\"hljs-comment\"># TOC will select these nodes as headings</span>\n    <span class=\"hljs-attr\">headingSelector:</span> <span class=\"hljs-string\">&quot;h1,h2,h3,h4,h5,h6&quot;</span>\n\n    <span class=\"hljs-comment\"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span>\n    <span class=\"hljs-comment\"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span>\n    <span class=\"hljs-attr\">collapseDepth:</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># 版权声明，会显示在每篇文章的结尾</span>\n  <span class=\"hljs-comment\"># Copyright, will be displayed at the end of each post</span>\n  <span class=\"hljs-attr\">copyright:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># CreativeCommons license</span>\n    <span class=\"hljs-comment\"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span>\n    <span class=\"hljs-attr\">license:</span> <span class=\"hljs-string\">&#x27;BY&#x27;</span>\n\n    <span class=\"hljs-comment\"># 显示作者</span>\n    <span class=\"hljs-attr\">author:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 显示发布日期</span>\n    <span class=\"hljs-comment\"># Show post date</span>\n    <span class=\"hljs-attr\">post_date:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">&quot;LL&quot;</span>\n\n    <span class=\"hljs-comment\"># 显示更新日期</span>\n    <span class=\"hljs-comment\"># Show update date</span>\n    <span class=\"hljs-attr\">update_date:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">&quot;LL&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章底部上一篇下一篇功能</span>\n  <span class=\"hljs-comment\"># Link to previous/next post</span>\n  <span class=\"hljs-attr\">prev_next:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 文章图片标题</span>\n  <span class=\"hljs-comment\"># Image caption</span>\n  <span class=\"hljs-attr\">image_caption:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 文章图片可点击放大</span>\n  <span class=\"hljs-comment\"># Zoom feature of images</span>\n  <span class=\"hljs-attr\">image_zoom:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\\\d&#123;3,4&#125;\\\\/\\\\d&#123;3,4&#125;\\\\/&#x27;, &#x27;&#x27;]</span>\n    <span class=\"hljs-comment\"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\\\d&#123;3,4&#125;\\\\/\\\\d&#123;3,4&#125;\\\\/&#x27;,&#x27;&#x27;]</span>\n    <span class=\"hljs-attr\">img_url_replace:</span> [<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>]\n\n  <span class=\"hljs-comment\"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span>\n  <span class=\"hljs-comment\"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span>\n  <span class=\"hljs-attr\">footnote:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class=\"hljs-doctag\">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span>\n    <span class=\"hljs-comment\"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class=\"hljs-doctag\">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span>\n    <span class=\"hljs-attr\">header:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n  <span class=\"hljs-comment\"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span>\n  <span class=\"hljs-comment\"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span>\n  <span class=\"hljs-attr\">math:</span>\n    <span class=\"hljs-comment\"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span>\n    <span class=\"hljs-comment\"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>\n    <span class=\"hljs-comment\"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span>\n    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># Options: mathjax | katex</span>\n    <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">mathjax</span>\n\n  <span class=\"hljs-comment\"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span>\n  <span class=\"hljs-comment\"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span>\n  <span class=\"hljs-attr\">mermaid:</span>\n    <span class=\"hljs-comment\"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span>\n    <span class=\"hljs-comment\"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>\n    <span class=\"hljs-comment\"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span>\n    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># See: http://mermaid-js.github.io/mermaid/</span>\n    <span class=\"hljs-attr\">options:</span> &#123; <span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">&#x27;default&#x27;</span> &#125;\n\n  <span class=\"hljs-comment\"># 评论插件</span>\n  <span class=\"hljs-comment\"># Comment plugin</span>\n  <span class=\"hljs-attr\">comments:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># 指定的插件，需要同时设置对应插件的必要参数</span>\n    <span class=\"hljs-comment\"># The specified plugin needs to set the necessary parameters at the same time</span>\n    <span class=\"hljs-comment\"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">disqus</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 评论插件</span>\n<span class=\"hljs-comment\"># Comment plugins</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span>\n<span class=\"hljs-comment\"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-comment\"># Utterances</span>\n<span class=\"hljs-comment\"># 基于 GitHub Issues</span>\n<span class=\"hljs-comment\"># Based on GitHub Issues</span>\n<span class=\"hljs-comment\"># See: https://utteranc.es</span>\n<span class=\"hljs-attr\">utterances:</span>\n  <span class=\"hljs-attr\">repo:</span>\n  <span class=\"hljs-attr\">issue_term:</span> <span class=\"hljs-string\">pathname</span>\n  <span class=\"hljs-attr\">label:</span> <span class=\"hljs-string\">utterances</span>\n  <span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">github-light</span>\n  <span class=\"hljs-attr\">theme_dark:</span> <span class=\"hljs-string\">github-dark</span>\n\n<span class=\"hljs-comment\"># Disqus</span>\n<span class=\"hljs-comment\"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span>\n<span class=\"hljs-comment\"># Based on third-party service</span>\n<span class=\"hljs-comment\"># See: https://disqus.com</span>\n<span class=\"hljs-attr\">disqus:</span>\n  <span class=\"hljs-attr\">shortname:</span>\n  <span class=\"hljs-comment\"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span>\n  <span class=\"hljs-comment\"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span>\n  <span class=\"hljs-comment\"># See: https://github.com/SukkaW/DisqusJS</span>\n  <span class=\"hljs-attr\">disqusjs:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">apikey:</span>\n\n<span class=\"hljs-comment\"># Gitalk</span>\n<span class=\"hljs-comment\"># 基于 GitHub Issues</span>\n<span class=\"hljs-comment\"># Based on GitHub Issues</span>\n<span class=\"hljs-comment\"># See: https://github.com/gitalk/gitalk#options</span>\n<span class=\"hljs-attr\">gitalk:</span>\n  <span class=\"hljs-attr\">clientID:</span>\n  <span class=\"hljs-attr\">clientSecret:</span>\n  <span class=\"hljs-attr\">repo:</span>\n  <span class=\"hljs-attr\">owner:</span>\n  <span class=\"hljs-attr\">admin:</span> [<span class=\"hljs-string\">&#x27;name&#x27;</span>]\n  <span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">zh-CN</span>\n  <span class=\"hljs-attr\">labels:</span> [<span class=\"hljs-string\">&#x27;Gitalk&#x27;</span>]\n  <span class=\"hljs-attr\">perPage:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">pagerDirection:</span> <span class=\"hljs-string\">last</span>\n  <span class=\"hljs-attr\">distractionFreeMode:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">createIssueManually:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-comment\"># 默认 proxy 可能会失效，解决方法请见下方链接</span>\n  <span class=\"hljs-comment\"># The default proxy may be invalid, refer to the links for solutions</span>\n  <span class=\"hljs-comment\"># https://github.com/gitalk/gitalk/issues/429</span>\n  <span class=\"hljs-comment\"># https://github.com/Zibri/cloudflare-cors-anywhere</span>\n  <span class=\"hljs-attr\">proxy:</span> <span class=\"hljs-string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>\n\n<span class=\"hljs-comment\"># Valine</span>\n<span class=\"hljs-comment\"># 基于 LeanCloud</span>\n<span class=\"hljs-comment\"># Based on LeanCloud</span>\n<span class=\"hljs-comment\"># See: https://valine.js.org/</span>\n<span class=\"hljs-attr\">valine:</span>\n  <span class=\"hljs-attr\">appId:</span>\n  <span class=\"hljs-attr\">appKey:</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n  <span class=\"hljs-attr\">placeholder:</span>\n  <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&#x27;retro&#x27;</span>\n  <span class=\"hljs-attr\">meta:</span> [<span class=\"hljs-string\">&#x27;nick&#x27;</span>, <span class=\"hljs-string\">&#x27;mail&#x27;</span>, <span class=\"hljs-string\">&#x27;link&#x27;</span>]\n  <span class=\"hljs-attr\">requiredFields:</span> []\n  <span class=\"hljs-attr\">pageSize:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">lang:</span> <span class=\"hljs-string\">&#x27;zh-CN&#x27;</span>\n  <span class=\"hljs-attr\">highlight:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">recordIP:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">serverURLs:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-attr\">emojiCDN:</span>\n  <span class=\"hljs-attr\">emojiMaps:</span>\n  <span class=\"hljs-attr\">enableQQ:</span> <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\"># Waline</span>\n<span class=\"hljs-comment\"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span>\n<span class=\"hljs-comment\"># Derived from Valine, with self-hosted service and new features</span>\n<span class=\"hljs-comment\"># See: https://waline.js.org/</span>\n<span class=\"hljs-attr\">waline:</span>\n  <span class=\"hljs-attr\">serverURL:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n  <span class=\"hljs-attr\">placeholder:</span>\n  <span class=\"hljs-attr\">meta:</span> [<span class=\"hljs-string\">&#x27;nick&#x27;</span>, <span class=\"hljs-string\">&#x27;mail&#x27;</span>, <span class=\"hljs-string\">&#x27;link&#x27;</span>]\n  <span class=\"hljs-attr\">requiredMeta:</span> [<span class=\"hljs-string\">&#x27;nick&#x27;</span>]\n  <span class=\"hljs-attr\">lang:</span> <span class=\"hljs-string\">&#x27;zh-CN&#x27;</span>\n  <span class=\"hljs-attr\">emoji:</span> [<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]\n  <span class=\"hljs-attr\">dark:</span> <span class=\"hljs-string\">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span>\n  <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&#x27;retro&#x27;</span>\n  <span class=\"hljs-attr\">avatarCDN:</span> <span class=\"hljs-string\">&#x27;https://seccdn.libravatar.org/avatar/&#x27;</span>\n  <span class=\"hljs-attr\">avatarForce:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">wordLimit:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">pageSize:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">highlight:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 畅言 Changyan</span>\n<span class=\"hljs-comment\"># 基于第三方的服务</span>\n<span class=\"hljs-comment\"># Based on third-party service, insufficient support for regions outside China</span>\n<span class=\"hljs-comment\"># http://changyan.kuaizhan.com</span>\n<span class=\"hljs-attr\">changyan:</span>\n  <span class=\"hljs-attr\">appid:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-attr\">appkey:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n<span class=\"hljs-comment\"># 来必力 Livere</span>\n<span class=\"hljs-comment\"># 基于第三方的服务</span>\n<span class=\"hljs-comment\"># Based on third-party service</span>\n<span class=\"hljs-comment\"># See: https://www.livere.com</span>\n<span class=\"hljs-attr\">livere:</span>\n  <span class=\"hljs-attr\">uid:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n<span class=\"hljs-comment\"># Remark42</span>\n<span class=\"hljs-comment\"># 需要自托管服务端</span>\n<span class=\"hljs-comment\"># Based on self-hosted service</span>\n<span class=\"hljs-comment\"># See: https://remark42.com</span>\n<span class=\"hljs-attr\">remark42:</span>\n  <span class=\"hljs-attr\">host:</span>\n  <span class=\"hljs-attr\">site_id:</span>\n  <span class=\"hljs-attr\">max_shown_comments:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">locale:</span> <span class=\"hljs-string\">zh</span>\n  <span class=\"hljs-attr\">components:</span> [<span class=\"hljs-string\">&#x27;embed&#x27;</span>]\n\n<span class=\"hljs-comment\"># Twikoo</span>\n<span class=\"hljs-comment\"># 基于腾讯云开发</span>\n<span class=\"hljs-comment\"># Based on Tencent CloudBase</span>\n<span class=\"hljs-comment\"># See: https://twikoo.js.org</span>\n<span class=\"hljs-attr\">twikoo:</span>\n  <span class=\"hljs-attr\">envId:</span>\n  <span class=\"hljs-attr\">region:</span> <span class=\"hljs-string\">ap-shanghai</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n\n<span class=\"hljs-comment\"># Cusdis</span>\n<span class=\"hljs-comment\"># 基于第三方服务或自托管服务</span>\n<span class=\"hljs-comment\"># Based on third-party or self-hosted service</span>\n<span class=\"hljs-comment\"># See https://cusdis.com</span>\n<span class=\"hljs-attr\">cusdis:</span>\n  <span class=\"hljs-attr\">host:</span>\n  <span class=\"hljs-attr\">app_id:</span>\n  <span class=\"hljs-attr\">lang:</span> <span class=\"hljs-string\">zh-cn</span>\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 归档页</span>\n<span class=\"hljs-comment\"># Archive Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">archive:</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 分类页</span>\n<span class=\"hljs-comment\"># Category Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">category:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n  <span class=\"hljs-comment\"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span>\n  <span class=\"hljs-comment\"># Sort field for categories, with a minus sign is reverse order</span>\n  <span class=\"hljs-comment\"># Options: length | name</span>\n  <span class=\"hljs-attr\">order_by:</span> <span class=\"hljs-string\">&quot;-length&quot;</span>\n\n  <span class=\"hljs-comment\"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span>\n  <span class=\"hljs-comment\"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span>\n  <span class=\"hljs-attr\">collapse_depth:</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>\n  <span class=\"hljs-comment\"># Sort field for posts, with a minus sign is reverse order</span>\n  <span class=\"hljs-comment\"># Options: date | title | or other field of front-matter</span>\n  <span class=\"hljs-attr\">post_order_by:</span> <span class=\"hljs-string\">&quot;-date&quot;</span>\n\n  <span class=\"hljs-comment\"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>\n  <span class=\"hljs-comment\"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>\n  <span class=\"hljs-attr\">post_limit:</span> <span class=\"hljs-number\">10</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 标签页</span>\n<span class=\"hljs-comment\"># Tag Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">tag:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-attr\">tagcloud:</span>\n    <span class=\"hljs-attr\">min_font:</span> <span class=\"hljs-number\">15</span>\n    <span class=\"hljs-attr\">max_font:</span> <span class=\"hljs-number\">30</span>\n    <span class=\"hljs-attr\">unit:</span> <span class=\"hljs-string\">px</span>\n    <span class=\"hljs-attr\">start_color:</span> <span class=\"hljs-string\">&quot;#BBBBEE&quot;</span>\n    <span class=\"hljs-attr\">end_color:</span> <span class=\"hljs-string\">&quot;#337ab7&quot;</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 关于页</span>\n<span class=\"hljs-comment\"># About Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">about:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">/img/avatar.png</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&quot;Fluid&quot;</span>\n  <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;An elegant theme for Hexo&quot;</span>\n  <span class=\"hljs-comment\"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span>\n  <span class=\"hljs-comment\"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span>\n  <span class=\"hljs-attr\">icons:</span>\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">&quot;iconfont icon-github-fill&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://github.com&quot;</span>, <span class=\"hljs-attr\">tip:</span> <span class=\"hljs-string\">&quot;GitHub&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">&quot;iconfont icon-douban-fill&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://douban.com&quot;</span>, <span class=\"hljs-attr\">tip:</span> <span class=\"hljs-string\">&quot;豆瓣&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">&quot;iconfont icon-wechat-fill&quot;</span>, <span class=\"hljs-attr\">qrcode:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span> &#125;\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 自定义页</span>\n<span class=\"hljs-comment\"># Custom Page</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 通过 hexo new page 命令创建的页面</span>\n<span class=\"hljs-comment\"># Custom Page through `hexo new page`</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">page:</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 404页</span>\n<span class=\"hljs-comment\"># 404 Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">page404:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">85</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-comment\"># 重定向到首页的延迟(毫秒)</span>\n  <span class=\"hljs-comment\"># Delay in redirecting to home page (milliseconds)</span>\n  <span class=\"hljs-attr\">redirect_delay:</span> <span class=\"hljs-number\">5000</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 友链页</span>\n<span class=\"hljs-comment\"># Links Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">links:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-comment\"># 友链的成员项</span>\n  <span class=\"hljs-comment\"># Member item of page</span>\n  <span class=\"hljs-attr\">items:</span>\n    <span class=\"hljs-bullet\">-</span> &#123;\n      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&quot;Fluid Blog&quot;</span>,\n      <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;主题博客&quot;</span>,\n      <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://hexo.fluid-dev.com/&quot;</span>,\n      <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span>\n    &#125;\n    <span class=\"hljs-bullet\">-</span> &#123;\n      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&quot;Fluid Docs&quot;</span>,\n      <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;主题使用指南&quot;</span>,\n      <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,\n      <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span>\n    &#125;\n    <span class=\"hljs-bullet\">-</span> &#123;\n      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&quot;Fluid Repo&quot;</span>,\n      <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;主题 GitHub 仓库&quot;</span>,\n      <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,\n      <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span>\n    &#125;\n\n  <span class=\"hljs-comment\"># 当成员头像加载失败时，替换为指定图片</span>\n  <span class=\"hljs-comment\"># When the member avatar fails to load, replace the specified image</span>\n  <span class=\"hljs-attr\">onerror_avatar:</span> <span class=\"hljs-string\">/img/avatar.png</span>\n\n  <span class=\"hljs-comment\"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span>\n  <span class=\"hljs-comment\"># Custom content at the bottom of the links</span>\n  <span class=\"hljs-attr\">custom:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">content:</span> <span class=\"hljs-string\">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：https://hexo.fluid-dev.com&lt;/li&gt;&lt;li&gt;图片：https://hexo.fluid-dev.com/img/favicon.png&lt;/li&gt;&lt;/ul&gt;&#x27;</span>\n\n  <span class=\"hljs-comment\"># 评论插件</span>\n  <span class=\"hljs-comment\"># Comment plugin</span>\n  <span class=\"hljs-attr\">comments:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># 指定的插件，需要同时设置对应插件的必要参数</span>\n    <span class=\"hljs-comment\"># The specified plugin needs to set the necessary parameters at the same time</span>\n    <span class=\"hljs-comment\"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">disqus</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span>\n<span class=\"hljs-comment\"># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span>\n<span class=\"hljs-comment\"># ** 如果你不知道如何设置，请不要做任何改动 **</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span>\n<span class=\"hljs-comment\"># Be aware that you would better use the same version as default ones to avoid potential problems.</span>\n<span class=\"hljs-comment\"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-attr\">static_prefix:</span>\n  <span class=\"hljs-comment\"># 内部静态</span>\n  <span class=\"hljs-comment\"># Internal static</span>\n  <span class=\"hljs-attr\">internal_js:</span> <span class=\"hljs-string\">/js</span>\n  <span class=\"hljs-attr\">internal_css:</span> <span class=\"hljs-string\">/css</span>\n  <span class=\"hljs-attr\">internal_img:</span> <span class=\"hljs-string\">/img</span>\n\n  <span class=\"hljs-attr\">anchor:</span> <span class=\"hljs-string\">https://lib.baomitu.com/anchor-js/4.3.1/</span>\n\n  <span class=\"hljs-attr\">github_markdown:</span> <span class=\"hljs-string\">https://lib.baomitu.com/github-markdown-css/4.0.0/</span>\n\n  <span class=\"hljs-attr\">jquery:</span> <span class=\"hljs-string\">https://lib.baomitu.com/jquery/3.6.0/</span>\n\n  <span class=\"hljs-attr\">bootstrap:</span> <span class=\"hljs-string\">https://lib.baomitu.com/twitter-bootstrap/4.6.1/</span>\n\n  <span class=\"hljs-attr\">prismjs:</span> <span class=\"hljs-string\">https://lib.baomitu.com/prism/1.26.0/</span>\n\n  <span class=\"hljs-attr\">tocbot:</span> <span class=\"hljs-string\">https://lib.baomitu.com/tocbot/4.18.0/</span>\n\n  <span class=\"hljs-attr\">typed:</span> <span class=\"hljs-string\">https://lib.baomitu.com/typed.js/2.0.12/</span>\n\n  <span class=\"hljs-attr\">fancybox:</span> <span class=\"hljs-string\">https://lib.baomitu.com/fancybox/3.5.7/</span>\n\n  <span class=\"hljs-attr\">nprogress:</span> <span class=\"hljs-string\">https://lib.baomitu.com/nprogress/0.2.0/</span>\n\n  <span class=\"hljs-attr\">mathjax:</span> <span class=\"hljs-string\">https://lib.baomitu.com/mathjax/3.2.0/</span>\n\n  <span class=\"hljs-attr\">katex:</span> <span class=\"hljs-string\">https://lib.baomitu.com/KaTeX/0.15.2/</span>\n\n  <span class=\"hljs-attr\">busuanzi:</span> <span class=\"hljs-string\">https://busuanzi.ibruce.info/busuanzi/2.3/</span>\n\n  <span class=\"hljs-attr\">clipboard:</span> <span class=\"hljs-string\">https://lib.baomitu.com/clipboard.js/2.0.10/</span>\n\n  <span class=\"hljs-attr\">mermaid:</span> <span class=\"hljs-string\">https://lib.baomitu.com/mermaid/8.13.10/</span>\n\n  <span class=\"hljs-attr\">valine:</span> <span class=\"hljs-string\">https://lib.baomitu.com/valine/1.4.16/</span>\n\n  <span class=\"hljs-attr\">waline:</span> <span class=\"hljs-string\">https://lib.baomitu.com/waline/1.5.2/</span>\n\n  <span class=\"hljs-attr\">gitalk:</span> <span class=\"hljs-string\">https://lib.baomitu.com/gitalk/1.7.2/</span>\n\n  <span class=\"hljs-attr\">disqusjs:</span> <span class=\"hljs-string\">https://lib.baomitu.com/disqusjs/1.3.0/</span>\n\n  <span class=\"hljs-attr\">twikoo:</span> <span class=\"hljs-string\">https://lib.baomitu.com/twikoo/1.4.17/</span>\n\n  <span class=\"hljs-attr\">hint:</span> <span class=\"hljs-string\">https://lib.baomitu.com/hint.css/2.7.0/</span>\n</code></pre></div>\n\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><ul>\n<li><a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\">GitHub<code>_config.yml</code></a></li>\n</ul>\n","site":{"data":{}},"wordcount":26403,"excerpt":"","more":"<h3 id=\"Hexo-Fluid-主题的-config-yml内容\"><a href=\"#Hexo-Fluid-主题的-config-yml内容\" class=\"headerlink\" title=\"Hexo Fluid 主题的 _config.yml内容\"></a>Hexo Fluid 主题的 _config.yml内容</h3><p>版本：version：1.8.14</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># Hexo Theme Fluid</span>\n<span class=\"hljs-comment\"># Author: Fluid-dev</span>\n<span class=\"hljs-comment\"># Github: https://github.com/fluid-dev/hexo-theme-fluid</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 配置指南: https://hexo.fluid-dev.com/docs/guide/</span>\n<span class=\"hljs-comment\"># 你可以从指南中获得更详细的说明</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Guide: https://hexo.fluid-dev.com/docs/en/guide/</span>\n<span class=\"hljs-comment\"># You can get more detailed help from the guide</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 全局</span>\n<span class=\"hljs-comment\"># Global</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-comment\"># 用于浏览器标签的图标</span>\n<span class=\"hljs-comment\"># Icon for browser tab</span>\n<span class=\"hljs-attr\">favicon:</span> <span class=\"hljs-string\">/img/fluid.png</span>\n\n<span class=\"hljs-comment\"># 用于苹果设备的图标</span>\n<span class=\"hljs-comment\"># Icon for Apple touch</span>\n<span class=\"hljs-attr\">apple_touch_icon:</span> <span class=\"hljs-string\">/img/fluid.png</span>\n\n<span class=\"hljs-comment\"># 浏览器标签页中的标题分隔符，效果： 文章名 - 站点名</span>\n<span class=\"hljs-comment\"># Title separator in browser tab, eg: article - site</span>\n<span class=\"hljs-attr\">tab_title_separator:</span> <span class=\"hljs-string\">&quot; - &quot;</span>\n\n<span class=\"hljs-comment\"># 强制所有链接升级为 HTTPS（适用于图片等资源出现 HTTP 混入报错）</span>\n<span class=\"hljs-comment\"># Force all links to be HTTPS (applicable to HTTP mixed error)</span>\n<span class=\"hljs-attr\">force_https:</span> <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\"># 代码块的增强配置</span>\n<span class=\"hljs-comment\"># Enhancements to code blocks</span>\n<span class=\"hljs-attr\">code:</span>\n  <span class=\"hljs-comment\"># 是否开启复制代码的按钮</span>\n  <span class=\"hljs-comment\"># Enable copy code button</span>\n  <span class=\"hljs-attr\">copy_btn:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 代码语言</span>\n  <span class=\"hljs-comment\"># Code language</span>\n  <span class=\"hljs-attr\">language:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">default:</span> <span class=\"hljs-string\">&quot;TEXT&quot;</span>\n\n  <span class=\"hljs-comment\"># 代码高亮</span>\n  <span class=\"hljs-comment\"># Code highlight</span>\n  <span class=\"hljs-attr\">highlight:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 代码块是否显示行号</span>\n    <span class=\"hljs-comment\"># If true, the code block display line numbers</span>\n    <span class=\"hljs-attr\">line_number:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 实现高亮的库，对应下面的设置</span>\n    <span class=\"hljs-comment\"># Highlight library</span>\n    <span class=\"hljs-comment\"># Options: highlightjs | prismjs</span>\n    <span class=\"hljs-attr\">lib:</span> <span class=\"hljs-string\">&quot;highlightjs&quot;</span>\n\n    <span class=\"hljs-attr\">highlightjs:</span>\n      <span class=\"hljs-comment\"># 在链接中挑选 style 填入</span>\n      <span class=\"hljs-comment\"># Select a style in the link</span>\n      <span class=\"hljs-comment\"># See: https://highlightjs.org/static/demo/</span>\n      <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">&quot;github gist&quot;</span>\n      <span class=\"hljs-attr\">style_dark:</span> <span class=\"hljs-string\">&quot;dark&quot;</span>\n\n    <span class=\"hljs-attr\">prismjs:</span>\n      <span class=\"hljs-comment\"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span>\n      <span class=\"hljs-comment\"># Select the style button on the right side of the link page, you can also set the CSS link</span>\n      <span class=\"hljs-comment\"># See: https://prismjs.com/</span>\n      <span class=\"hljs-attr\">style:</span> <span class=\"hljs-string\">&quot;default&quot;</span>\n      <span class=\"hljs-attr\">style_dark:</span> <span class=\"hljs-string\">&quot;tomorrow night&quot;</span>\n\n      <span class=\"hljs-comment\"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span>\n      <span class=\"hljs-comment\"># If true, it will be generated locally (but some prismjs plugins are not supported). If false, it will be generated via JS in the browser</span>\n      <span class=\"hljs-attr\">preprocess:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 一些好玩的功能</span>\n<span class=\"hljs-comment\"># Some fun features</span>\n<span class=\"hljs-attr\">fun_features:</span>\n  <span class=\"hljs-comment\"># 为 subtitle 添加打字机效果</span>\n  <span class=\"hljs-comment\"># Typing animation for subtitle</span>\n  <span class=\"hljs-attr\">typing:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 打印速度，数字越大越慢</span>\n    <span class=\"hljs-comment\"># Typing speed, the larger the number, the slower</span>\n    <span class=\"hljs-attr\">typeSpeed:</span> <span class=\"hljs-number\">70</span>\n\n    <span class=\"hljs-comment\"># 游标字符</span>\n    <span class=\"hljs-comment\"># Cursor character</span>\n    <span class=\"hljs-attr\">cursorChar:</span> <span class=\"hljs-string\">&quot;_&quot;</span>\n\n    <span class=\"hljs-comment\"># 是否循环播放效果</span>\n    <span class=\"hljs-comment\"># If true, loop animation</span>\n    <span class=\"hljs-attr\">loop:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 在指定页面开启，不填则在所有页面开启</span>\n    <span class=\"hljs-comment\"># Enable in specified page, all pages by default</span>\n    <span class=\"hljs-comment\"># Options: home | post | tag | category | about | links | page | 404</span>\n    <span class=\"hljs-attr\">scope:</span> []\n\n  <span class=\"hljs-comment\"># 为文章内容中的标题添加锚图标</span>\n  <span class=\"hljs-comment\"># Add an anchor icon to the title on the post page</span>\n  <span class=\"hljs-attr\">anchorjs:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">element:</span> <span class=\"hljs-string\">h1,h2,h3,h4,h5,h6</span>\n    <span class=\"hljs-comment\"># Options: left | right</span>\n    <span class=\"hljs-attr\">placement:</span> <span class=\"hljs-string\">left</span>\n    <span class=\"hljs-comment\"># Options: hover | always | touch</span>\n    <span class=\"hljs-attr\">visible:</span> <span class=\"hljs-string\">hover</span>\n    <span class=\"hljs-comment\"># Options: § | # | ❡</span>\n    <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n\n  <span class=\"hljs-comment\"># 加载进度条</span>\n  <span class=\"hljs-comment\"># Progress bar when loading</span>\n  <span class=\"hljs-attr\">progressbar:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">height_px:</span> <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-attr\">color:</span> <span class=\"hljs-string\">&quot;#29d&quot;</span>\n    <span class=\"hljs-comment\"># See: https://github.com/rstacruz/nprogress</span>\n    <span class=\"hljs-attr\">options:</span> &#123; <span class=\"hljs-attr\">showSpinner:</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">trickleSpeed:</span> <span class=\"hljs-number\">100</span> &#125;\n\n<span class=\"hljs-comment\"># 主题暗色模式，开启后菜单中会出现切换按钮，用户浏览器会存储切换选项，并且会遵循 prefers-color-scheme 自动切换</span>\n<span class=\"hljs-comment\"># Theme dark mode. If enable, a switch button will appear on the menu, each of the visitor&#x27;s browser will store his switch option</span>\n<span class=\"hljs-attr\">dark_mode:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-comment\"># 默认的选项（当用户手动切换后则不再按照默认模式），选择 `auto` 会优先遵循 prefers-color-scheme，其次按用户本地时间 18 点到次日 6 点之间进入暗色模式</span>\n  <span class=\"hljs-comment\"># Default option (when the visitor switches manually, the default mode is no longer followed), choosing `auto` will give priority to prefers-color-scheme, and then enter the dark mode from 18:00 to 6:00 in the visitor’s local time</span>\n  <span class=\"hljs-comment\"># Options: auto | light | dark</span>\n  <span class=\"hljs-attr\">default:</span> <span class=\"hljs-string\">auto</span>\n\n<span class=\"hljs-comment\"># 主题颜色配置，其他不生效的地方请使用自定义 css 解决，配色可以在下方链接中获得启发</span>\n<span class=\"hljs-comment\"># Theme color, please use custom CSS to solve other colors, color schema can be inspired by the links below</span>\n<span class=\"hljs-comment\"># See: https://www.webdesignrankings.com/resources/lolcolors/</span>\n<span class=\"hljs-attr\">color:</span>\n  <span class=\"hljs-comment\"># body 背景色</span>\n  <span class=\"hljs-comment\"># Color of body background</span>\n  <span class=\"hljs-attr\">body_bg_color:</span> <span class=\"hljs-string\">&quot;#eee&quot;</span>\n  <span class=\"hljs-comment\"># 暗色模式下的 body 背景色，下同</span>\n  <span class=\"hljs-comment\"># Color in dark mode, the same below</span>\n  <span class=\"hljs-attr\">body_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#181c27&quot;</span>\n\n  <span class=\"hljs-comment\"># 顶部菜单背景色</span>\n  <span class=\"hljs-comment\"># Color of navigation bar background</span>\n  <span class=\"hljs-attr\">navbar_bg_color:</span> <span class=\"hljs-string\">&quot;#2f4154&quot;</span>\n  <span class=\"hljs-attr\">navbar_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#1f3144&quot;</span>\n\n  <span class=\"hljs-comment\"># 顶部菜单字体色</span>\n  <span class=\"hljs-comment\"># Color of navigation bar text</span>\n  <span class=\"hljs-attr\">navbar_text_color:</span> <span class=\"hljs-string\">&quot;#fff&quot;</span>\n  <span class=\"hljs-attr\">navbar_text_color_dark:</span> <span class=\"hljs-string\">&quot;#d0d0d0&quot;</span>\n\n  <span class=\"hljs-comment\"># 副标题字体色</span>\n  <span class=\"hljs-comment\"># Color of navigation bar text</span>\n  <span class=\"hljs-attr\">subtitle_color:</span> <span class=\"hljs-string\">&quot;#fff&quot;</span>\n  <span class=\"hljs-attr\">subtitle_color_dark:</span> <span class=\"hljs-string\">&quot;#d0d0d0&quot;</span>\n\n  <span class=\"hljs-comment\"># 全局字体色</span>\n  <span class=\"hljs-comment\"># Color of global text</span>\n  <span class=\"hljs-attr\">text_color:</span> <span class=\"hljs-string\">&quot;#3c4858&quot;</span>\n  <span class=\"hljs-attr\">text_color_dark:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n\n  <span class=\"hljs-comment\"># 全局次级字体色（摘要、简介等位置）</span>\n  <span class=\"hljs-comment\"># Color of global secondary text (excerpt, introduction, etc.)</span>\n  <span class=\"hljs-attr\">sec_text_color:</span> <span class=\"hljs-string\">&quot;#718096&quot;</span>\n  <span class=\"hljs-attr\">sec_text_color_dark:</span> <span class=\"hljs-string\">&quot;#a7a9ad&quot;</span>\n\n  <span class=\"hljs-comment\"># 主面板背景色</span>\n  <span class=\"hljs-comment\"># Color of main board</span>\n  <span class=\"hljs-attr\">board_color:</span> <span class=\"hljs-string\">&quot;#fff&quot;</span>\n  <span class=\"hljs-attr\">board_color_dark:</span> <span class=\"hljs-string\">&quot;#252d38&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章正文字体色</span>\n  <span class=\"hljs-comment\"># Color of post text</span>\n  <span class=\"hljs-attr\">post_text_color:</span> <span class=\"hljs-string\">&quot;#2c3e50&quot;</span>\n  <span class=\"hljs-attr\">post_text_color_dark:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章正文字体色（h1 h2 h3...）</span>\n  <span class=\"hljs-comment\"># Color of Article heading (h1 h2 h3...)</span>\n  <span class=\"hljs-attr\">post_heading_color:</span> <span class=\"hljs-string\">&quot;#1a202c&quot;</span>\n  <span class=\"hljs-attr\">post_heading_color_dark:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章超链接字体色</span>\n  <span class=\"hljs-comment\"># Color of post link</span>\n  <span class=\"hljs-attr\">post_link_color:</span> <span class=\"hljs-string\">&quot;#0366d6&quot;</span>\n  <span class=\"hljs-attr\">post_link_color_dark:</span> <span class=\"hljs-string\">&quot;#1589e9&quot;</span>\n\n  <span class=\"hljs-comment\"># 超链接悬浮时字体色</span>\n  <span class=\"hljs-comment\"># Color of link when hovering</span>\n  <span class=\"hljs-attr\">link_hover_color:</span> <span class=\"hljs-string\">&quot;#30a9de&quot;</span>\n  <span class=\"hljs-attr\">link_hover_color_dark:</span> <span class=\"hljs-string\">&quot;#30a9de&quot;</span>\n\n  <span class=\"hljs-comment\"># 超链接悬浮背景色</span>\n  <span class=\"hljs-comment\"># Color of link background when hovering</span>\n  <span class=\"hljs-attr\">link_hover_bg_color:</span> <span class=\"hljs-string\">&quot;#f8f9fa&quot;</span>\n  <span class=\"hljs-attr\">link_hover_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#364151&quot;</span>\n\n  <span class=\"hljs-comment\"># 分隔线和表格边线的颜色</span>\n  <span class=\"hljs-comment\"># Color of horizontal rule and table border</span>\n  <span class=\"hljs-attr\">line_color:</span> <span class=\"hljs-string\">&quot;#eaecef&quot;</span>\n  <span class=\"hljs-attr\">line_color_dark:</span> <span class=\"hljs-string\">&quot;#435266&quot;</span>\n\n  <span class=\"hljs-comment\"># 滚动条颜色</span>\n  <span class=\"hljs-comment\"># Color of scrollbar</span>\n  <span class=\"hljs-attr\">scrollbar_color:</span> <span class=\"hljs-string\">&quot;#c4c6c9&quot;</span>\n  <span class=\"hljs-attr\">scrollbar_color_dark:</span> <span class=\"hljs-string\">&quot;#687582&quot;</span>\n  <span class=\"hljs-comment\"># 滚动条悬浮颜色</span>\n  <span class=\"hljs-comment\"># Color of scrollbar when hovering</span>\n  <span class=\"hljs-attr\">scrollbar_hover_color:</span> <span class=\"hljs-string\">&quot;#a6a6a6&quot;</span>\n  <span class=\"hljs-attr\">scrollbar_hover_color_dark:</span> <span class=\"hljs-string\">&quot;#9da8b3&quot;</span>\n\n  <span class=\"hljs-comment\"># 按钮背景色</span>\n  <span class=\"hljs-comment\"># Color of button</span>\n  <span class=\"hljs-attr\">button_bg_color:</span> <span class=\"hljs-string\">&quot;transparent&quot;</span>\n  <span class=\"hljs-attr\">button_bg_color_dark:</span> <span class=\"hljs-string\">&quot;transparent&quot;</span>\n  <span class=\"hljs-comment\"># 按钮悬浮背景色</span>\n  <span class=\"hljs-comment\"># Color of button when hovering</span>\n  <span class=\"hljs-attr\">button_hover_bg_color:</span> <span class=\"hljs-string\">&quot;#f2f3f5&quot;</span>\n  <span class=\"hljs-attr\">button_hover_bg_color_dark:</span> <span class=\"hljs-string\">&quot;#46647e&quot;</span>\n\n<span class=\"hljs-comment\"># 主题字体配置</span>\n<span class=\"hljs-comment\"># Font</span>\n<span class=\"hljs-attr\">font:</span>\n  <span class=\"hljs-attr\">font_size:</span> <span class=\"hljs-string\">16px</span>\n  <span class=\"hljs-attr\">font_family:</span>\n  <span class=\"hljs-attr\">letter_spacing:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">02em</span>\n  <span class=\"hljs-attr\">code_font_size:</span> <span class=\"hljs-number\">85</span><span class=\"hljs-string\">%</span>\n\n<span class=\"hljs-comment\"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span>\n<span class=\"hljs-comment\"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span>\n<span class=\"hljs-attr\">custom_js:</span>\n\n<span class=\"hljs-comment\"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span>\n<span class=\"hljs-comment\"># The usage is the same as custom_js</span>\n<span class=\"hljs-attr\">custom_css:</span>\n\n<span class=\"hljs-comment\"># 网页访问统计</span>\n<span class=\"hljs-comment\"># Analysis of website visitors</span>\n<span class=\"hljs-attr\">web_analytics:</span>  <span class=\"hljs-comment\"># 网页访问统计</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-comment\"># 百度统计的 Key，值需要获取下方链接中 `hm.js?` 后边的字符串</span>\n  <span class=\"hljs-comment\"># Baidu analytics, get the string behind `hm.js?`</span>\n  <span class=\"hljs-comment\"># See: https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</span>\n  <span class=\"hljs-attr\">baidu:</span>\n\n  <span class=\"hljs-comment\"># Google 统计的 Tracking ID</span>\n  <span class=\"hljs-comment\"># Google analytics, set Tracking ID</span>\n  <span class=\"hljs-comment\"># See: https://developers.google.com/analytics/devguides/collection/analyticsjs</span>\n  <span class=\"hljs-attr\">google:</span>\n\n  <span class=\"hljs-comment\"># Google gtag.js 的媒体资源 ID</span>\n  <span class=\"hljs-comment\"># Google gtag.js GA_MEASUREMENT_ID</span>\n  <span class=\"hljs-comment\"># See: https://developers.google.com/analytics/devguides/collection/gtagjs/</span>\n  <span class=\"hljs-attr\">gtag:</span>\n\n  <span class=\"hljs-comment\"># 腾讯统计的 H5 App ID，开启高级功能才有cid</span>\n  <span class=\"hljs-comment\"># Tencent analytics, set APP ID</span>\n  <span class=\"hljs-comment\"># See: https://mta.qq.com/h5/manage/ctr_app_manage</span>\n  <span class=\"hljs-attr\">tencent:</span>\n    <span class=\"hljs-attr\">sid:</span>\n    <span class=\"hljs-attr\">cid:</span>\n\n  <span class=\"hljs-comment\"># 51.la 站点统计 ID</span>\n  <span class=\"hljs-comment\"># 51.la analytics</span>\n  <span class=\"hljs-comment\"># See: https://www.51.la/user/site/index</span>\n  <span class=\"hljs-attr\">woyaola:</span>  <span class=\"hljs-comment\"># 51.la 站点统计 ID，参见</span>\n\n  <span class=\"hljs-comment\"># 友盟/cnzz 站点统计 web_id</span>\n  <span class=\"hljs-comment\"># cnzz analytics</span>\n  <span class=\"hljs-comment\"># See: https://web.umeng.com/main.php?c=site&amp;a=show</span>\n  <span class=\"hljs-attr\">cnzz:</span>\n\n  <span class=\"hljs-comment\"># LeanCloud 计数统计，可用于 PV UV 展示，如果 `web_analytics: enable` 没有开启，PV UV 展示只会查询不会增加</span>\n  <span class=\"hljs-comment\"># LeanCloud count statistics, which can be used for PV UV display. If `web_analytics: enable` is false, PV UV display will only query and not increase</span>\n  <span class=\"hljs-attr\">leancloud:</span>\n    <span class=\"hljs-attr\">app_id:</span>\n    <span class=\"hljs-attr\">app_key:</span>\n    <span class=\"hljs-comment\"># REST API 服务器地址，国际版不填</span>\n    <span class=\"hljs-comment\"># Only the Chinese mainland users need to set</span>\n    <span class=\"hljs-attr\">server_url:</span>\n    <span class=\"hljs-comment\"># 统计页面时获取路径的属性</span>\n    <span class=\"hljs-comment\"># Get the attribute of the page path during statistics</span>\n    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n    <span class=\"hljs-comment\"># 开启后不统计本地路径( localhost 与 127.0.0.1 )</span>\n    <span class=\"hljs-comment\"># If ture, ignore localhost &amp; 127.0.0.1</span>\n    <span class=\"hljs-attr\">ignore_local:</span> <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\"># 对页面中的图片和评论插件进行懒加载处理，可见范围外的元素不会提前加载</span>\n<span class=\"hljs-comment\"># Lazy loading of images and comment plugin on the page</span>\n<span class=\"hljs-attr\">lazyload:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 加载时的占位图片</span>\n  <span class=\"hljs-comment\"># The placeholder image when loading</span>\n  <span class=\"hljs-attr\">loading_img:</span> <span class=\"hljs-string\">/img/loading.gif</span>\n\n  <span class=\"hljs-comment\"># 开启后懒加载仅在文章页生效，如果自定义页面需要使用，可以在 Front-matter 里指定 `lazyload: true`</span>\n  <span class=\"hljs-comment\"># If true, only enable lazyload on the post page. For custom pages, you can set &#x27;lazyload: true&#x27; in front-matter</span>\n  <span class=\"hljs-attr\">onlypost:</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-comment\"># 触发加载的偏移倍数，基数是视窗高度，可根据部署环境的请求速度调节</span>\n  <span class=\"hljs-comment\"># The factor of viewport height that triggers loading</span>\n  <span class=\"hljs-attr\">offset_factor:</span> <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-comment\"># 图标库，包含了大量社交类图标，主题依赖的不包含在内，因此可自行修改，详见 https://hexo.fluid-dev.com/docs/icon/</span>\n<span class=\"hljs-comment\"># Icon library, which includes many social icons, does not include those theme dependent, so your can modify link by yourself. See: https://hexo.fluid-dev.com/docs/en/icon/</span>\n<span class=\"hljs-attr\">iconfont:</span> <span class=\"hljs-string\">//at.alicdn.com/t/font_1736178_lbnruvf0jn.css</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 页头</span>\n<span class=\"hljs-comment\"># Header</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-comment\"># 导航栏的相关配置</span>\n<span class=\"hljs-comment\"># Navigation bar</span>\n<span class=\"hljs-attr\">navbar:</span>\n  <span class=\"hljs-comment\"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span>\n  <span class=\"hljs-comment\"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span>\n  <span class=\"hljs-attr\">blog_title:</span> <span class=\"hljs-string\">&quot;Fluid&quot;</span>\n\n  <span class=\"hljs-comment\"># 导航栏毛玻璃特效，实验性功能，可能会造成页面滚动掉帧和抖动，部分浏览器不支持会自动不生效</span>\n  <span class=\"hljs-comment\"># Navigation bar frosted glass special animation. It is an experimental feature</span>\n  <span class=\"hljs-attr\">ground_glass:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 模糊像素，只能为数字，数字越大模糊度越高</span>\n    <span class=\"hljs-comment\"># Number of blurred pixel. the larger the number, the higher the blur</span>\n    <span class=\"hljs-attr\">px:</span> <span class=\"hljs-number\">3</span>\n\n    <span class=\"hljs-comment\"># 不透明度，数字越大透明度越低，注意透明过度可能看不清菜单字体</span>\n    <span class=\"hljs-comment\"># Ratio of opacity, 1.0 is completely opaque</span>\n    <span class=\"hljs-comment\"># available: 0 - 1.0</span>\n    <span class=\"hljs-attr\">alpha:</span> <span class=\"hljs-number\">0.7</span>\n\n  <span class=\"hljs-comment\"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span>\n  <span class=\"hljs-comment\"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span>\n  <span class=\"hljs-attr\">menu:</span>\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;home&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-home-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;archive&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/archives/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-archive-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;category&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/categories/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-category-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;tag&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/tags/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-tags-fill&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">&quot;about&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;/about/&quot;</span>, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-user-fill&quot;</span> &#125;\n    <span class=\"hljs-comment\">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span>\n\n<span class=\"hljs-comment\"># 搜索功能，基于 hexo-generator-search 插件，若已安装其他搜索插件请关闭此功能，以避免生成多余的索引文件</span>\n<span class=\"hljs-comment\"># Search feature, based on hexo-generator-search. If you have installed other search plugins, please disable this feature to avoid generating redundant index files</span>\n<span class=\"hljs-attr\">search:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 搜索索引文件的路径，可以是相对路径或外站的绝对路径</span>\n  <span class=\"hljs-comment\"># Path for search index file, it can be a relative path or an absolute path</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/local-search.xml</span>\n\n  <span class=\"hljs-comment\"># 文件生成在本地的位置，必须是相对路径</span>\n  <span class=\"hljs-comment\"># The location where the index file is generated locally, it must be a relative location</span>\n  <span class=\"hljs-attr\">generate_path:</span> <span class=\"hljs-string\">/local-search.xml</span>\n\n  <span class=\"hljs-comment\"># 搜索的范围</span>\n  <span class=\"hljs-comment\"># Search field</span>\n  <span class=\"hljs-comment\"># Options: post | page | all</span>\n  <span class=\"hljs-attr\">field:</span> <span class=\"hljs-string\">post</span>\n\n  <span class=\"hljs-comment\"># 搜索是否扫描正文</span>\n  <span class=\"hljs-comment\"># If true, search will scan the post content</span>\n  <span class=\"hljs-attr\">content:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 首屏图片的相关配置</span>\n<span class=\"hljs-comment\"># Config of the big image on the first screen</span>\n<span class=\"hljs-attr\">banner:</span>\n  <span class=\"hljs-comment\"># 视差滚动，图片与板块会随着屏幕滚动产生视差效果</span>\n  <span class=\"hljs-comment\"># Scrolling parallax</span>\n  <span class=\"hljs-attr\">parallax:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 图片最小的宽高比，以免图片两边被过度裁剪，适用于移动端竖屏时，如需关闭设为 0</span>\n  <span class=\"hljs-comment\"># Minimum ratio of width to height, applicable to the vertical screen of mobile device, if you need to close it, set it to 0</span>\n  <span class=\"hljs-attr\">width_height_ratio:</span> <span class=\"hljs-number\">1.0</span>\n\n<span class=\"hljs-comment\"># 向下滚动的箭头</span>\n<span class=\"hljs-comment\"># Scroll down arrow</span>\n<span class=\"hljs-attr\">scroll_down_arrow:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 头图高度不小于指定比例，才显示箭头</span>\n  <span class=\"hljs-comment\"># Only the height of the banner image is greater than the ratio, the arrow is displayed</span>\n  <span class=\"hljs-comment\"># Available: 0 - 100</span>\n  <span class=\"hljs-attr\">banner_height_limit:</span> <span class=\"hljs-number\">80</span>\n\n  <span class=\"hljs-comment\"># 翻页后自动滚动</span>\n  <span class=\"hljs-comment\"># Auto scroll after page turning</span>\n  <span class=\"hljs-attr\">scroll_after_turning_page:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 向顶部滚动的箭头</span>\n<span class=\"hljs-comment\"># Scroll top arrow</span>\n<span class=\"hljs-attr\">scroll_top_arrow:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># Open Graph metadata</span>\n<span class=\"hljs-comment\"># See: https://hexo.io/docs/helpers.html#open-graph</span>\n<span class=\"hljs-attr\">open_graph:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">twitter_card:</span> <span class=\"hljs-string\">summary_large_image</span>\n  <span class=\"hljs-attr\">twitter_id:</span>\n  <span class=\"hljs-attr\">twitter_site:</span>\n  <span class=\"hljs-attr\">google_plus:</span>\n  <span class=\"hljs-attr\">fb_admins:</span>\n  <span class=\"hljs-attr\">fb_app_id:</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 页脚</span>\n<span class=\"hljs-comment\"># Footer</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">footer:</span>\n  <span class=\"hljs-comment\"># 页脚第一行文字的 HTML，建议保留 Fluid 的链接，用于向更多人推广本主题</span>\n  <span class=\"hljs-comment\"># HTML of the first line of the footer, it is recommended to keep the Fluid link to promote this theme to more people</span>\n  <span class=\"hljs-attr\">content:</span> <span class=\"hljs-string\">&#x27;</span>\n<span class=\"hljs-string\">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span>\n<span class=\"hljs-string\">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span>\n<span class=\"hljs-string\">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span>\n<span class=\"hljs-string\">  &#x27;</span>\n\n  <span class=\"hljs-comment\"># 展示网站的 PV、UV 统计数</span>\n  <span class=\"hljs-comment\"># Display website PV and UV statistics</span>\n  <span class=\"hljs-attr\">statistics:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 统计数据来源，使用 leancloud 需要设置 `web_analytics: leancloud` 中的参数；使用 busuanzi 不需要额外设置，但是有时不稳定，另外本地运行时 busuanzi 显示统计数据很大属于正常现象，部署后会正常</span>\n    <span class=\"hljs-comment\"># Data source. If use leancloud, you need to set the parameter in `web_analytics: leancloud`</span>\n    <span class=\"hljs-comment\"># Options: busuanzi | leancloud</span>\n    <span class=\"hljs-attr\">source:</span> <span class=\"hljs-string\">&quot;busuanzi&quot;</span>\n\n  <span class=\"hljs-comment\"># 国内大陆服务器的备案信息</span>\n  <span class=\"hljs-comment\"># For Chinese mainland website policy, other areas keep disable</span>\n  <span class=\"hljs-attr\">beian:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># ICP证号</span>\n    <span class=\"hljs-attr\">icp_text:</span> <span class=\"hljs-string\">京ICP证123456号</span>\n    <span class=\"hljs-comment\"># 公安备案号，不填则只显示ICP</span>\n    <span class=\"hljs-attr\">police_text:</span> <span class=\"hljs-string\">京公网安备12345678号</span>\n    <span class=\"hljs-comment\"># 公安备案的编号，用于URL跳转查询</span>\n    <span class=\"hljs-attr\">police_code:</span> <span class=\"hljs-number\">12345678</span>\n    <span class=\"hljs-comment\"># 公安备案的图片. 为空时不显示备案图片</span>\n    <span class=\"hljs-attr\">police_icon:</span> <span class=\"hljs-string\">/img/police_beian.png</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 首页</span>\n<span class=\"hljs-comment\"># Home Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">index:</span>\n  <span class=\"hljs-comment\"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span>\n  <span class=\"hljs-comment\"># Path of Banner image, can be a relative path or an absolute path, the same on other pages</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n\n  <span class=\"hljs-comment\"># 头图高度，屏幕百分比</span>\n  <span class=\"hljs-comment\"># Height ratio of banner image</span>\n  <span class=\"hljs-comment\"># Available: 0 - 100</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">100</span>\n\n  <span class=\"hljs-comment\"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span>\n  <span class=\"hljs-comment\"># Opacity of the banner mask, 1.0 is completely opaque</span>\n  <span class=\"hljs-comment\"># Available: 0 - 1.0</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n  <span class=\"hljs-comment\"># 首页副标题的独立设置</span>\n  <span class=\"hljs-comment\"># Independent config of home page subtitle</span>\n  <span class=\"hljs-attr\">slogan:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 为空则按 hexo config.subtitle 显示</span>\n    <span class=\"hljs-comment\"># If empty, text based on `subtitle` in hexo config</span>\n    <span class=\"hljs-attr\">text:</span> <span class=\"hljs-string\">&quot;An elegant Material-Design theme for Hexo&quot;</span>\n\n    <span class=\"hljs-comment\"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>\n    <span class=\"hljs-comment\"># Subtitle of the homepage through the API, must be returned a JSON. If the request fails, it will be displayed in `text` value. This feature must first enable the typing animation</span>\n    <span class=\"hljs-attr\">api:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n      <span class=\"hljs-comment\"># 请求地址</span>\n      <span class=\"hljs-comment\"># Request url</span>\n      <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">&quot;&quot;</span>\n\n      <span class=\"hljs-comment\"># 请求方法</span>\n      <span class=\"hljs-comment\"># Request method</span>\n      <span class=\"hljs-comment\"># Available: GET | POST | PUT</span>\n      <span class=\"hljs-attr\">method:</span> <span class=\"hljs-string\">&quot;GET&quot;</span>\n\n      <span class=\"hljs-comment\"># 请求头</span>\n      <span class=\"hljs-comment\"># Request headers</span>\n      <span class=\"hljs-attr\">headers:</span> &#123;&#125;\n\n      <span class=\"hljs-comment\"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>\n      <span class=\"hljs-comment\"># The value field of the string obtained from the response. For example, the response content is &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, the expected `keys: [&#x27;data&#x27;,&#x27;content&#x27;]`; if the return is a list, the first item is automatically selected</span>\n      <span class=\"hljs-attr\">keys:</span> []\n\n  <span class=\"hljs-comment\"># 自动截取文章摘要</span>\n  <span class=\"hljs-comment\"># Auto extract post</span>\n  <span class=\"hljs-attr\">auto_excerpt:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 打开文章的标签方式</span>\n  <span class=\"hljs-comment\"># The browser tag to open the post</span>\n  <span class=\"hljs-comment\"># Available: _blank | _self</span>\n  <span class=\"hljs-attr\">post_url_target:</span> <span class=\"hljs-string\">_self</span>\n\n  <span class=\"hljs-comment\"># 是否显示文章信息（时间、分类、标签）</span>\n  <span class=\"hljs-comment\"># Meta information of post</span>\n  <span class=\"hljs-attr\">post_meta:</span>\n    <span class=\"hljs-attr\">date:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">category:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">tag:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 文章通过 sticky 排序后，在首页文章标题前显示图标</span>\n  <span class=\"hljs-comment\"># If the posts are sorted by `sticky`, an icon is displayed in front of the post title</span>\n  <span class=\"hljs-attr\">post_sticky:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-string\">&quot;iconfont icon-top&quot;</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 文章页</span>\n<span class=\"hljs-comment\"># Post Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">post:</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">70</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n  <span class=\"hljs-comment\"># 文章在首页的默认封面图，当没有指定 index_img 时会使用该图片，若两者都为空则不显示任何图片</span>\n  <span class=\"hljs-comment\"># Path of the default post cover when `index_img` is not set. If both are empty, no image will be displayed</span>\n  <span class=\"hljs-attr\">default_index_img:</span>\n\n  <span class=\"hljs-comment\"># 文章标题下方的元信息</span>\n  <span class=\"hljs-comment\"># Meta information below title</span>\n  <span class=\"hljs-attr\">meta:</span>\n    <span class=\"hljs-comment\"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span>\n    <span class=\"hljs-comment\"># Author, based on `author` field in front-matter, if not set, based on `author` value in hexo config</span>\n    <span class=\"hljs-attr\">author:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span>\n    <span class=\"hljs-comment\"># Post date, based on `date` field in front-matter, if not set, based on create date of .md file</span>\n    <span class=\"hljs-attr\">date:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\"># 格式参照 ISO-8601 日期格式化</span>\n      <span class=\"hljs-comment\"># ISO-8601 date format</span>\n      <span class=\"hljs-comment\"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>\n      <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">&quot;LL a&quot;</span>\n\n    <span class=\"hljs-comment\"># 字数统计</span>\n    <span class=\"hljs-comment\"># Word count</span>\n    <span class=\"hljs-attr\">wordcount:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 估计阅读全文需要的时长</span>\n    <span class=\"hljs-comment\"># Estimated reading time</span>\n    <span class=\"hljs-attr\">min2read:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-comment\"># 每个字词的长度，建议：中文≈2，英文≈5，中英混合可自行调节</span>\n      <span class=\"hljs-comment\"># Average word length (chars count in word), ZH ≈ 2, EN ≈ 5</span>\n      <span class=\"hljs-attr\">awl:</span> <span class=\"hljs-number\">2</span>\n      <span class=\"hljs-comment\"># 每分钟阅读字数，如果大部分是技术文章可适度调低</span>\n      <span class=\"hljs-comment\"># Words per minute</span>\n      <span class=\"hljs-attr\">wpm:</span> <span class=\"hljs-number\">60</span>\n\n    <span class=\"hljs-comment\"># 浏览量计数</span>\n    <span class=\"hljs-comment\"># Number of visits</span>\n    <span class=\"hljs-attr\">views:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-comment\"># 统计数据来源</span>\n      <span class=\"hljs-comment\"># Data Source</span>\n      <span class=\"hljs-comment\"># Options: busuanzi | leancloud</span>\n      <span class=\"hljs-attr\">source:</span> <span class=\"hljs-string\">&quot;busuanzi&quot;</span>\n\n  <span class=\"hljs-comment\"># 在文章开头显示文章更新时间，该时间默认是 md 文件更新时间，可通过 front-matter 中 `updated` 手动指定（和 date 一样格式）</span>\n  <span class=\"hljs-comment\"># Update date is displayed at the beginning of the post. The default date is the update date of the md file, which can be manually specified by `updated` in front-matter (same format as date)</span>\n  <span class=\"hljs-attr\">updated:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 格式参照 ISO-8601 日期格式化</span>\n    <span class=\"hljs-comment\"># ISO-8601 date format</span>\n    <span class=\"hljs-comment\"># See: http://momentjs.cn/docs/#/parsing/string-format/</span>\n    <span class=\"hljs-attr\">date_format:</span> <span class=\"hljs-string\">&quot;LL a&quot;</span>\n\n    <span class=\"hljs-comment\"># 是否使用相对时间表示，比如：&quot;3 天前&quot;</span>\n    <span class=\"hljs-comment\"># If true, it will be a relative time, such as: &quot;3 days ago&quot;</span>\n    <span class=\"hljs-attr\">relative:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 提示标签类型</span>\n    <span class=\"hljs-comment\"># Note class</span>\n    <span class=\"hljs-comment\"># Options: default | primary | info | success | warning | danger | light</span>\n    <span class=\"hljs-attr\">note_class:</span> <span class=\"hljs-string\">info</span>\n\n  <span class=\"hljs-comment\"># 侧边栏展示当前分类下的文章</span>\n  <span class=\"hljs-comment\"># Sidebar of category</span>\n  <span class=\"hljs-attr\">category_bar:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 开启后，只有在文章 Front-matter 里指定 `category_bar: true` 才会展示分类，也可以通过 `category_bar: [&quot;分类A&quot;]` 来指定分类</span>\n    <span class=\"hljs-comment\"># If true, only set `category_bar: true` in Front-matter will enable sidebar of category, also set `category_bar: [&quot;CategoryA&quot;]` to specify categories</span>\n    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 置于板块的左侧或右侧</span>\n    <span class=\"hljs-comment\"># place in the board</span>\n    <span class=\"hljs-comment\"># Options: left | right</span>\n    <span class=\"hljs-attr\">placement:</span> <span class=\"hljs-string\">left</span>\n\n    <span class=\"hljs-comment\"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>\n    <span class=\"hljs-comment\"># Sort field for posts, with a minus sign is reverse order</span>\n    <span class=\"hljs-comment\"># Options: date | title | or other field of front-matter</span>\n    <span class=\"hljs-attr\">post_order_by:</span> <span class=\"hljs-string\">&quot;title&quot;</span>\n\n    <span class=\"hljs-comment\"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>\n    <span class=\"hljs-comment\"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>\n    <span class=\"hljs-attr\">post_limit:</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># 侧边栏展示文章目录</span>\n  <span class=\"hljs-comment\"># Table of contents (TOC) in the sidebar</span>\n  <span class=\"hljs-attr\">toc:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 置于板块的左侧或右侧</span>\n    <span class=\"hljs-comment\"># place in the board</span>\n    <span class=\"hljs-comment\"># Options: left | right</span>\n    <span class=\"hljs-attr\">placement:</span> <span class=\"hljs-string\">right</span>\n\n    <span class=\"hljs-comment\"># 目录会选择这些节点作为标题</span>\n    <span class=\"hljs-comment\"># TOC will select these nodes as headings</span>\n    <span class=\"hljs-attr\">headingSelector:</span> <span class=\"hljs-string\">&quot;h1,h2,h3,h4,h5,h6&quot;</span>\n\n    <span class=\"hljs-comment\"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在下级标题则默认展开</span>\n    <span class=\"hljs-comment\"># Collapse depth. If 0, all headings collapsed. If greater than 0, it will be expanded by default if there are sub headings</span>\n    <span class=\"hljs-attr\">collapseDepth:</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># 版权声明，会显示在每篇文章的结尾</span>\n  <span class=\"hljs-comment\"># Copyright, will be displayed at the end of each post</span>\n  <span class=\"hljs-attr\">copyright:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># CreativeCommons license</span>\n    <span class=\"hljs-comment\"># Options: BY | BY-SA | BY-ND | BY-NC | BY-NC-SA | BY-NC-ND</span>\n    <span class=\"hljs-attr\">license:</span> <span class=\"hljs-string\">&#x27;BY&#x27;</span>\n\n    <span class=\"hljs-comment\"># 显示作者</span>\n    <span class=\"hljs-attr\">author:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\"># 显示发布日期</span>\n    <span class=\"hljs-comment\"># Show post date</span>\n    <span class=\"hljs-attr\">post_date:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">&quot;LL&quot;</span>\n\n    <span class=\"hljs-comment\"># 显示更新日期</span>\n    <span class=\"hljs-comment\"># Show update date</span>\n    <span class=\"hljs-attr\">update_date:</span>\n      <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">format:</span> <span class=\"hljs-string\">&quot;LL&quot;</span>\n\n  <span class=\"hljs-comment\"># 文章底部上一篇下一篇功能</span>\n  <span class=\"hljs-comment\"># Link to previous/next post</span>\n  <span class=\"hljs-attr\">prev_next:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 文章图片标题</span>\n  <span class=\"hljs-comment\"># Image caption</span>\n  <span class=\"hljs-attr\">image_caption:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n\n  <span class=\"hljs-comment\"># 文章图片可点击放大</span>\n  <span class=\"hljs-comment\"># Zoom feature of images</span>\n  <span class=\"hljs-attr\">image_zoom:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\"># 放大后图片链接替换规则，可用于将压缩图片链接替换为原图片链接，如 [&#x27;-slim&#x27;, &#x27;&#x27;] 是将链接中 `-slim` 移除；如果想使用正则请使用 `re:` 前缀，如 [&#x27;re:\\\\d&#123;3,4&#125;\\\\/\\\\d&#123;3,4&#125;\\\\/&#x27;, &#x27;&#x27;]</span>\n    <span class=\"hljs-comment\"># The image url replacement when zooming, the feature can be used to replace the compressed image to the original image, eg: [&#x27;-slim&#x27;, &#x27;&#x27;] removes `-slim` from the image url when zooming; if you want to use regular, use prefix `re:`, eg: [&#x27;re:\\\\d&#123;3,4&#125;\\\\/\\\\d&#123;3,4&#125;\\\\/&#x27;,&#x27;&#x27;]</span>\n    <span class=\"hljs-attr\">img_url_replace:</span> [<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>]\n\n  <span class=\"hljs-comment\"># 脚注语法，会在文章底部生成脚注，如果 Markdown 渲染器本身支持，则建议关闭，否则可能会冲突</span>\n  <span class=\"hljs-comment\"># Support footnote syntax, footnotes will be generated at the bottom of the post page. If the Markdown renderer itself supports it, please disable it, otherwise it may conflict</span>\n  <span class=\"hljs-attr\">footnote:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\"># 脚注的节标题，也可以在 front-matter 中通过 `foot<span class=\"hljs-doctag\">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` 这种形式修改单独页面的 header</span>\n    <span class=\"hljs-comment\"># The section title of the footnote, you can also modify the header of a single page in the form of `foot<span class=\"hljs-doctag\">note:</span> &lt;h2&gt;Reference&lt;/h2&gt;` in front-matter</span>\n    <span class=\"hljs-attr\">header:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n  <span class=\"hljs-comment\"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span>\n  <span class=\"hljs-comment\"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span>\n  <span class=\"hljs-attr\">math:</span>\n    <span class=\"hljs-comment\"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span>\n    <span class=\"hljs-comment\"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>\n    <span class=\"hljs-comment\"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span>\n    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># Options: mathjax | katex</span>\n    <span class=\"hljs-attr\">engine:</span> <span class=\"hljs-string\">mathjax</span>\n\n  <span class=\"hljs-comment\"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span>\n  <span class=\"hljs-comment\"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span>\n  <span class=\"hljs-attr\">mermaid:</span>\n    <span class=\"hljs-comment\"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span>\n    <span class=\"hljs-comment\"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span>\n    <span class=\"hljs-comment\"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span>\n    <span class=\"hljs-attr\">specific:</span> <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\"># See: http://mermaid-js.github.io/mermaid/</span>\n    <span class=\"hljs-attr\">options:</span> &#123; <span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">&#x27;default&#x27;</span> &#125;\n\n  <span class=\"hljs-comment\"># 评论插件</span>\n  <span class=\"hljs-comment\"># Comment plugin</span>\n  <span class=\"hljs-attr\">comments:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># 指定的插件，需要同时设置对应插件的必要参数</span>\n    <span class=\"hljs-comment\"># The specified plugin needs to set the necessary parameters at the same time</span>\n    <span class=\"hljs-comment\"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">disqus</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 评论插件</span>\n<span class=\"hljs-comment\"># Comment plugins</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span>\n<span class=\"hljs-comment\"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-comment\"># Utterances</span>\n<span class=\"hljs-comment\"># 基于 GitHub Issues</span>\n<span class=\"hljs-comment\"># Based on GitHub Issues</span>\n<span class=\"hljs-comment\"># See: https://utteranc.es</span>\n<span class=\"hljs-attr\">utterances:</span>\n  <span class=\"hljs-attr\">repo:</span>\n  <span class=\"hljs-attr\">issue_term:</span> <span class=\"hljs-string\">pathname</span>\n  <span class=\"hljs-attr\">label:</span> <span class=\"hljs-string\">utterances</span>\n  <span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">github-light</span>\n  <span class=\"hljs-attr\">theme_dark:</span> <span class=\"hljs-string\">github-dark</span>\n\n<span class=\"hljs-comment\"># Disqus</span>\n<span class=\"hljs-comment\"># 基于第三方的服务，国内用户直接使用容易被墙，建议配合 Disqusjs</span>\n<span class=\"hljs-comment\"># Based on third-party service</span>\n<span class=\"hljs-comment\"># See: https://disqus.com</span>\n<span class=\"hljs-attr\">disqus:</span>\n  <span class=\"hljs-attr\">shortname:</span>\n  <span class=\"hljs-comment\"># 以下为 Disqusjs 支持, 国内用户如果想使用 Disqus 建议配合使用</span>\n  <span class=\"hljs-comment\"># The following are Disqusjs configurations, please ignore if DisqusJS is not required</span>\n  <span class=\"hljs-comment\"># See: https://github.com/SukkaW/DisqusJS</span>\n  <span class=\"hljs-attr\">disqusjs:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">apikey:</span>\n\n<span class=\"hljs-comment\"># Gitalk</span>\n<span class=\"hljs-comment\"># 基于 GitHub Issues</span>\n<span class=\"hljs-comment\"># Based on GitHub Issues</span>\n<span class=\"hljs-comment\"># See: https://github.com/gitalk/gitalk#options</span>\n<span class=\"hljs-attr\">gitalk:</span>\n  <span class=\"hljs-attr\">clientID:</span>\n  <span class=\"hljs-attr\">clientSecret:</span>\n  <span class=\"hljs-attr\">repo:</span>\n  <span class=\"hljs-attr\">owner:</span>\n  <span class=\"hljs-attr\">admin:</span> [<span class=\"hljs-string\">&#x27;name&#x27;</span>]\n  <span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">zh-CN</span>\n  <span class=\"hljs-attr\">labels:</span> [<span class=\"hljs-string\">&#x27;Gitalk&#x27;</span>]\n  <span class=\"hljs-attr\">perPage:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">pagerDirection:</span> <span class=\"hljs-string\">last</span>\n  <span class=\"hljs-attr\">distractionFreeMode:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">createIssueManually:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-comment\"># 默认 proxy 可能会失效，解决方法请见下方链接</span>\n  <span class=\"hljs-comment\"># The default proxy may be invalid, refer to the links for solutions</span>\n  <span class=\"hljs-comment\"># https://github.com/gitalk/gitalk/issues/429</span>\n  <span class=\"hljs-comment\"># https://github.com/Zibri/cloudflare-cors-anywhere</span>\n  <span class=\"hljs-attr\">proxy:</span> <span class=\"hljs-string\">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span>\n\n<span class=\"hljs-comment\"># Valine</span>\n<span class=\"hljs-comment\"># 基于 LeanCloud</span>\n<span class=\"hljs-comment\"># Based on LeanCloud</span>\n<span class=\"hljs-comment\"># See: https://valine.js.org/</span>\n<span class=\"hljs-attr\">valine:</span>\n  <span class=\"hljs-attr\">appId:</span>\n  <span class=\"hljs-attr\">appKey:</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n  <span class=\"hljs-attr\">placeholder:</span>\n  <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&#x27;retro&#x27;</span>\n  <span class=\"hljs-attr\">meta:</span> [<span class=\"hljs-string\">&#x27;nick&#x27;</span>, <span class=\"hljs-string\">&#x27;mail&#x27;</span>, <span class=\"hljs-string\">&#x27;link&#x27;</span>]\n  <span class=\"hljs-attr\">requiredFields:</span> []\n  <span class=\"hljs-attr\">pageSize:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">lang:</span> <span class=\"hljs-string\">&#x27;zh-CN&#x27;</span>\n  <span class=\"hljs-attr\">highlight:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">recordIP:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">serverURLs:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-attr\">emojiCDN:</span>\n  <span class=\"hljs-attr\">emojiMaps:</span>\n  <span class=\"hljs-attr\">enableQQ:</span> <span class=\"hljs-literal\">false</span>\n\n<span class=\"hljs-comment\"># Waline</span>\n<span class=\"hljs-comment\"># 从 Valine 衍生而来，额外增加了服务端和多种功能</span>\n<span class=\"hljs-comment\"># Derived from Valine, with self-hosted service and new features</span>\n<span class=\"hljs-comment\"># See: https://waline.js.org/</span>\n<span class=\"hljs-attr\">waline:</span>\n  <span class=\"hljs-attr\">serverURL:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n  <span class=\"hljs-attr\">placeholder:</span>\n  <span class=\"hljs-attr\">meta:</span> [<span class=\"hljs-string\">&#x27;nick&#x27;</span>, <span class=\"hljs-string\">&#x27;mail&#x27;</span>, <span class=\"hljs-string\">&#x27;link&#x27;</span>]\n  <span class=\"hljs-attr\">requiredMeta:</span> [<span class=\"hljs-string\">&#x27;nick&#x27;</span>]\n  <span class=\"hljs-attr\">lang:</span> <span class=\"hljs-string\">&#x27;zh-CN&#x27;</span>\n  <span class=\"hljs-attr\">emoji:</span> [<span class=\"hljs-string\">&#x27;https://cdn.jsdelivr.net/gh/walinejs/emojis/weibo&#x27;</span>]\n  <span class=\"hljs-attr\">dark:</span> <span class=\"hljs-string\">&#x27;html[data-user-color-scheme=&quot;dark&quot;]&#x27;</span>\n  <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&#x27;retro&#x27;</span>\n  <span class=\"hljs-attr\">avatarCDN:</span> <span class=\"hljs-string\">&#x27;https://seccdn.libravatar.org/avatar/&#x27;</span>\n  <span class=\"hljs-attr\">avatarForce:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">wordLimit:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">pageSize:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">highlight:</span> <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># 畅言 Changyan</span>\n<span class=\"hljs-comment\"># 基于第三方的服务</span>\n<span class=\"hljs-comment\"># Based on third-party service, insufficient support for regions outside China</span>\n<span class=\"hljs-comment\"># http://changyan.kuaizhan.com</span>\n<span class=\"hljs-attr\">changyan:</span>\n  <span class=\"hljs-attr\">appid:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-attr\">appkey:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n<span class=\"hljs-comment\"># 来必力 Livere</span>\n<span class=\"hljs-comment\"># 基于第三方的服务</span>\n<span class=\"hljs-comment\"># Based on third-party service</span>\n<span class=\"hljs-comment\"># See: https://www.livere.com</span>\n<span class=\"hljs-attr\">livere:</span>\n  <span class=\"hljs-attr\">uid:</span> <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n<span class=\"hljs-comment\"># Remark42</span>\n<span class=\"hljs-comment\"># 需要自托管服务端</span>\n<span class=\"hljs-comment\"># Based on self-hosted service</span>\n<span class=\"hljs-comment\"># See: https://remark42.com</span>\n<span class=\"hljs-attr\">remark42:</span>\n  <span class=\"hljs-attr\">host:</span>\n  <span class=\"hljs-attr\">site_id:</span>\n  <span class=\"hljs-attr\">max_shown_comments:</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">locale:</span> <span class=\"hljs-string\">zh</span>\n  <span class=\"hljs-attr\">components:</span> [<span class=\"hljs-string\">&#x27;embed&#x27;</span>]\n\n<span class=\"hljs-comment\"># Twikoo</span>\n<span class=\"hljs-comment\"># 基于腾讯云开发</span>\n<span class=\"hljs-comment\"># Based on Tencent CloudBase</span>\n<span class=\"hljs-comment\"># See: https://twikoo.js.org</span>\n<span class=\"hljs-attr\">twikoo:</span>\n  <span class=\"hljs-attr\">envId:</span>\n  <span class=\"hljs-attr\">region:</span> <span class=\"hljs-string\">ap-shanghai</span>\n  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">window.location.pathname</span>\n\n<span class=\"hljs-comment\"># Cusdis</span>\n<span class=\"hljs-comment\"># 基于第三方服务或自托管服务</span>\n<span class=\"hljs-comment\"># Based on third-party or self-hosted service</span>\n<span class=\"hljs-comment\"># See https://cusdis.com</span>\n<span class=\"hljs-attr\">cusdis:</span>\n  <span class=\"hljs-attr\">host:</span>\n  <span class=\"hljs-attr\">app_id:</span>\n  <span class=\"hljs-attr\">lang:</span> <span class=\"hljs-string\">zh-cn</span>\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 归档页</span>\n<span class=\"hljs-comment\"># Archive Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">archive:</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 分类页</span>\n<span class=\"hljs-comment\"># Category Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">category:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n  <span class=\"hljs-comment\"># 分类的排序字段，前面带减号是倒序，不带减号是正序</span>\n  <span class=\"hljs-comment\"># Sort field for categories, with a minus sign is reverse order</span>\n  <span class=\"hljs-comment\"># Options: length | name</span>\n  <span class=\"hljs-attr\">order_by:</span> <span class=\"hljs-string\">&quot;-length&quot;</span>\n\n  <span class=\"hljs-comment\"># 层级的折叠深度，0 是全部折叠，大于 0 后如果存在子分类则默认展开</span>\n  <span class=\"hljs-comment\"># Collapse depth. If 0, all posts collapsed. If greater than 0, it will be expanded by default if there are subcategories</span>\n  <span class=\"hljs-attr\">collapse_depth:</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\"># 文章的排序字段，前面带减号是倒序，不带减号是正序</span>\n  <span class=\"hljs-comment\"># Sort field for posts, with a minus sign is reverse order</span>\n  <span class=\"hljs-comment\"># Options: date | title | or other field of front-matter</span>\n  <span class=\"hljs-attr\">post_order_by:</span> <span class=\"hljs-string\">&quot;-date&quot;</span>\n\n  <span class=\"hljs-comment\"># 单个分类中折叠展示文章数的最大值，超过限制会显示 More，0 则不限制</span>\n  <span class=\"hljs-comment\"># The maximum number of posts in a single category. If the limit is exceeded, it will be displayed More. If 0 no limit</span>\n  <span class=\"hljs-attr\">post_limit:</span> <span class=\"hljs-number\">10</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 标签页</span>\n<span class=\"hljs-comment\"># Tag Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">tag:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">80</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-attr\">tagcloud:</span>\n    <span class=\"hljs-attr\">min_font:</span> <span class=\"hljs-number\">15</span>\n    <span class=\"hljs-attr\">max_font:</span> <span class=\"hljs-number\">30</span>\n    <span class=\"hljs-attr\">unit:</span> <span class=\"hljs-string\">px</span>\n    <span class=\"hljs-attr\">start_color:</span> <span class=\"hljs-string\">&quot;#BBBBEE&quot;</span>\n    <span class=\"hljs-attr\">end_color:</span> <span class=\"hljs-string\">&quot;#337ab7&quot;</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 关于页</span>\n<span class=\"hljs-comment\"># About Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">about:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">/img/avatar.png</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&quot;Fluid&quot;</span>\n  <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;An elegant theme for Hexo&quot;</span>\n  <span class=\"hljs-comment\"># 更多图标可从 https://hexo.fluid-dev.com/docs/icon/ 查找，`class` 代表图标的 css class，添加 `qrcode` 后，图标不再是链接而是悬浮二维码</span>\n  <span class=\"hljs-comment\"># More icons can be found from https://hexo.fluid-dev.com/docs/en/icon/  `class` is the css class of the icon. If adding `qrcode`, The icon is no longer a link, but a hovering QR code</span>\n  <span class=\"hljs-attr\">icons:</span>\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">&quot;iconfont icon-github-fill&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://github.com&quot;</span>, <span class=\"hljs-attr\">tip:</span> <span class=\"hljs-string\">&quot;GitHub&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">&quot;iconfont icon-douban-fill&quot;</span>, <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://douban.com&quot;</span>, <span class=\"hljs-attr\">tip:</span> <span class=\"hljs-string\">&quot;豆瓣&quot;</span> &#125;\n    <span class=\"hljs-bullet\">-</span> &#123; <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">&quot;iconfont icon-wechat-fill&quot;</span>, <span class=\"hljs-attr\">qrcode:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span> &#125;\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 自定义页</span>\n<span class=\"hljs-comment\"># Custom Page</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 通过 hexo new page 命令创建的页面</span>\n<span class=\"hljs-comment\"># Custom Page through `hexo new page`</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">page:</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 404页</span>\n<span class=\"hljs-comment\"># 404 Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">page404:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">85</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-comment\"># 重定向到首页的延迟(毫秒)</span>\n  <span class=\"hljs-comment\"># Delay in redirecting to home page (milliseconds)</span>\n  <span class=\"hljs-attr\">redirect_delay:</span> <span class=\"hljs-number\">5000</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 友链页</span>\n<span class=\"hljs-comment\"># Links Page</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-attr\">links:</span>\n  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-attr\">banner_img:</span> <span class=\"hljs-string\">/img/default.png</span>\n  <span class=\"hljs-attr\">banner_img_height:</span> <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-attr\">banner_mask_alpha:</span> <span class=\"hljs-number\">0.3</span>\n  <span class=\"hljs-comment\"># 友链的成员项</span>\n  <span class=\"hljs-comment\"># Member item of page</span>\n  <span class=\"hljs-attr\">items:</span>\n    <span class=\"hljs-bullet\">-</span> &#123;\n      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&quot;Fluid Blog&quot;</span>,\n      <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;主题博客&quot;</span>,\n      <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://hexo.fluid-dev.com/&quot;</span>,\n      <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span>\n    &#125;\n    <span class=\"hljs-bullet\">-</span> &#123;\n      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&quot;Fluid Docs&quot;</span>,\n      <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;主题使用指南&quot;</span>,\n      <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://hexo.fluid-dev.com/docs/&quot;</span>,\n      <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span>\n    &#125;\n    <span class=\"hljs-bullet\">-</span> &#123;\n      <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">&quot;Fluid Repo&quot;</span>,\n      <span class=\"hljs-attr\">intro:</span> <span class=\"hljs-string\">&quot;主题 GitHub 仓库&quot;</span>,\n      <span class=\"hljs-attr\">link:</span> <span class=\"hljs-string\">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span>,\n      <span class=\"hljs-attr\">avatar:</span> <span class=\"hljs-string\">&quot;/img/favicon.png&quot;</span>\n    &#125;\n\n  <span class=\"hljs-comment\"># 当成员头像加载失败时，替换为指定图片</span>\n  <span class=\"hljs-comment\"># When the member avatar fails to load, replace the specified image</span>\n  <span class=\"hljs-attr\">onerror_avatar:</span> <span class=\"hljs-string\">/img/avatar.png</span>\n\n  <span class=\"hljs-comment\"># 友链下方自定义区域，支持 HTML，可插入例如申请友链的文字</span>\n  <span class=\"hljs-comment\"># Custom content at the bottom of the links</span>\n  <span class=\"hljs-attr\">custom:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">content:</span> <span class=\"hljs-string\">&#x27;&lt;hr&gt;&lt;p&gt;在下方留言申请加入我的友链，按如下格式提供信息：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;博客名：Fluid&lt;/li&gt;&lt;li&gt;简介：Fluid 主题官方博客&lt;/li&gt;&lt;li&gt;链接：https://hexo.fluid-dev.com&lt;/li&gt;&lt;li&gt;图片：https://hexo.fluid-dev.com/img/favicon.png&lt;/li&gt;&lt;/ul&gt;&#x27;</span>\n\n  <span class=\"hljs-comment\"># 评论插件</span>\n  <span class=\"hljs-comment\"># Comment plugin</span>\n  <span class=\"hljs-attr\">comments:</span>\n    <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># 指定的插件，需要同时设置对应插件的必要参数</span>\n    <span class=\"hljs-comment\"># The specified plugin needs to set the necessary parameters at the same time</span>\n    <span class=\"hljs-comment\"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">disqus</span>\n\n\n<span class=\"hljs-comment\">#---------------------------</span>\n<span class=\"hljs-comment\"># 以下是配置 JS CSS 等静态资源的 URL 前缀，可以自定义成 CDN 地址，</span>\n<span class=\"hljs-comment\"># 默认的 jsDelivr CDN 可能在部分地区无法访问，如果需要修改，最好使用与默认配置相同的版本，以避免潜在的问题，</span>\n<span class=\"hljs-comment\"># ** 如果你不知道如何设置，请不要做任何改动 **</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Here is the url prefix to configure the static assets. Set CDN addresses you want to customize.</span>\n<span class=\"hljs-comment\"># Be aware that you would better use the same version as default ones to avoid potential problems.</span>\n<span class=\"hljs-comment\"># DO NOT EDIT THE FOLLOWING SETTINGS UNLESS YOU KNOW WHAT YOU ARE DOING</span>\n<span class=\"hljs-comment\">#---------------------------</span>\n\n<span class=\"hljs-attr\">static_prefix:</span>\n  <span class=\"hljs-comment\"># 内部静态</span>\n  <span class=\"hljs-comment\"># Internal static</span>\n  <span class=\"hljs-attr\">internal_js:</span> <span class=\"hljs-string\">/js</span>\n  <span class=\"hljs-attr\">internal_css:</span> <span class=\"hljs-string\">/css</span>\n  <span class=\"hljs-attr\">internal_img:</span> <span class=\"hljs-string\">/img</span>\n\n  <span class=\"hljs-attr\">anchor:</span> <span class=\"hljs-string\">https://lib.baomitu.com/anchor-js/4.3.1/</span>\n\n  <span class=\"hljs-attr\">github_markdown:</span> <span class=\"hljs-string\">https://lib.baomitu.com/github-markdown-css/4.0.0/</span>\n\n  <span class=\"hljs-attr\">jquery:</span> <span class=\"hljs-string\">https://lib.baomitu.com/jquery/3.6.0/</span>\n\n  <span class=\"hljs-attr\">bootstrap:</span> <span class=\"hljs-string\">https://lib.baomitu.com/twitter-bootstrap/4.6.1/</span>\n\n  <span class=\"hljs-attr\">prismjs:</span> <span class=\"hljs-string\">https://lib.baomitu.com/prism/1.26.0/</span>\n\n  <span class=\"hljs-attr\">tocbot:</span> <span class=\"hljs-string\">https://lib.baomitu.com/tocbot/4.18.0/</span>\n\n  <span class=\"hljs-attr\">typed:</span> <span class=\"hljs-string\">https://lib.baomitu.com/typed.js/2.0.12/</span>\n\n  <span class=\"hljs-attr\">fancybox:</span> <span class=\"hljs-string\">https://lib.baomitu.com/fancybox/3.5.7/</span>\n\n  <span class=\"hljs-attr\">nprogress:</span> <span class=\"hljs-string\">https://lib.baomitu.com/nprogress/0.2.0/</span>\n\n  <span class=\"hljs-attr\">mathjax:</span> <span class=\"hljs-string\">https://lib.baomitu.com/mathjax/3.2.0/</span>\n\n  <span class=\"hljs-attr\">katex:</span> <span class=\"hljs-string\">https://lib.baomitu.com/KaTeX/0.15.2/</span>\n\n  <span class=\"hljs-attr\">busuanzi:</span> <span class=\"hljs-string\">https://busuanzi.ibruce.info/busuanzi/2.3/</span>\n\n  <span class=\"hljs-attr\">clipboard:</span> <span class=\"hljs-string\">https://lib.baomitu.com/clipboard.js/2.0.10/</span>\n\n  <span class=\"hljs-attr\">mermaid:</span> <span class=\"hljs-string\">https://lib.baomitu.com/mermaid/8.13.10/</span>\n\n  <span class=\"hljs-attr\">valine:</span> <span class=\"hljs-string\">https://lib.baomitu.com/valine/1.4.16/</span>\n\n  <span class=\"hljs-attr\">waline:</span> <span class=\"hljs-string\">https://lib.baomitu.com/waline/1.5.2/</span>\n\n  <span class=\"hljs-attr\">gitalk:</span> <span class=\"hljs-string\">https://lib.baomitu.com/gitalk/1.7.2/</span>\n\n  <span class=\"hljs-attr\">disqusjs:</span> <span class=\"hljs-string\">https://lib.baomitu.com/disqusjs/1.3.0/</span>\n\n  <span class=\"hljs-attr\">twikoo:</span> <span class=\"hljs-string\">https://lib.baomitu.com/twikoo/1.4.17/</span>\n\n  <span class=\"hljs-attr\">hint:</span> <span class=\"hljs-string\">https://lib.baomitu.com/hint.css/2.7.0/</span>\n</code></pre>\n\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><ul>\n<li><a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\">GitHub<code>_config.yml</code></a></li>\n</ul>\n"},{"title":"Hexo使用","data":"2022-03-21T03:01:00.000Z","index_img":"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/logo.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10","_content":"### 什么是 Hexo\n\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装(windows环境)\n\n> Hexo 安装版本相关信息\n    hexo: 5.4.1\n    hexo-cli: 4.3.0\n    os: win32 10.0.22000\n    node: 16.14.0\n    v8: 9.4.146.24-node.20\n    uv: 1.43.0\n    zlib: 1.2.11\n    brotli: 1.0.9\n    ares: 1.18.1\n    modules: 93\n    nghttp2: 1.45.1\n    napi: 8\n    llhttp: 6.0.4\n    openssl: 1.1.1m+quic\n    cldr: 40.0\n    icu: 70.1\n    tz: 2021a3\n    unicode: 14.0\n    ngtcp2: 0.1.0-DEV\n    nghttp3: 0.1.0-DEV\n\n#### 1.安装Node.js\n\n- [Node.js中文网](http://nodejs.cn/)\n- [Node.js官网](https://nodejs.org/zh-cn/)\n\n#### 2.安装Git\n\n- [Git官网](https://git-scm.com/)\n\n#### 3.安装Hexo\n\n1. 所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n    ```bash\n    npm install -g hexo-cli\n    ```\n\n2. 进阶安装和使用,对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。\n\n    ```bash\n    npm install hexo\n    ```\n\n    {% gi total n1-n2-... %}\n    ![进行中图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n    ![成功后图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n    {% endgi %}\n\n3. 安装以后，可以使用以下两种方式执行 Hexo：\n    1. `npx hexo <command>`\n\n        ```bash\n        Usage: hexo <command>\n\n        Commands:\n\n        help     在一个命令上获得帮助。\n        init     创建一个新的Hexo文件夹。\n        version  显示版本信息。\n        \n        Global Options:\n\n        --config  指定配置文件，而不是使用 _config.yml\n        --cwd     指定CWD\n        --debug   在终端显示所有粗略的信息\n        --draft   显示帖子草稿\n        --safe    禁用所有插件和脚本\n        --silent  隐藏控制台中的输出\n        如需更多帮助，你可以使用 \"hexo help [command]\"获得详细信息\n        或者你可以查看文档：http://hexo.io/docs/\n        ```\n\n    2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 `hexo <command>`：\n\n        ``` bash\n        echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n        ```\n\n    3. 注意事项\n        > Node.js 版本限制\n        我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 [Node.js](https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90) 版本。\n\n        ![图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321144759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n### 建站\n\n#### 1. `hexo init <folder>`\n\n```bash\n# 因为没有把Hexo目录下的node_modules添加到环境变量所以需要npx\nnpx hexo init hexo\n# 成功后\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!\n```\n\n![图示1](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n##### 2. 成功以后通过命令行进入对应文件夹 `cd <folder>`\n\n![文件夹内图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n#### 3. 通过命令行执行 `npm install`\n\n#### 4. 配置 `_config.yml` 依据[官方中文文档配置](https://hexo.io/zh-cn/docs/\n\n#### configuration)\n\n#### 5. 运行hexo\n\n- 可以通过[vscode](https://code.visualstudio.com/)打开根目录,执行npm脚本`server hexo server`\n\n    > **注**:可能需要安装插件 [npm](https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script); [npm Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense)\n\n- 或者通过命令运行hexo\n\n    ```bash\n    PS E:\\test\\hexo> npx hexo server\n    INFO  Validating config\n    INFO  Start processing\n    INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n    ```\n\n    通过访问[http://localhost:4000/](http://localhost:4000/)在浏览器中查看\n\n    ![hexo默认主题展示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321151723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n#### 6. 指令\n\n```bash\n# 生成静态文件。\nhexo generate \n# 清除缓存文件 db.json 和已生成的静态文件 public。\nhexo clean\n# 部署网站。\nhexo deploy\n# 启动服务器。默认情况下，访问网址为： http://localhost:4000/。\nhexo server\n```\n\n更多指令详细信息可以访问官网[指令](https://hexo.io/zh-cn/docs/commands)\n\n### 来源\n\n[Hexo中文官网](https://hexo.io/zh-cn/)\n","source":"_posts/hexo/hexo1.md","raw":"---\ntitle: Hexo使用\ncategories: \n - Hexo\ntags:\n - Hexo\ndata: 2022-03-21 11:01:00\nindex_img: https://instrument-file.oss-cn-beijing.aliyuncs.com/img/logo.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10\n---\n### 什么是 Hexo\n\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装(windows环境)\n\n> Hexo 安装版本相关信息\n    hexo: 5.4.1\n    hexo-cli: 4.3.0\n    os: win32 10.0.22000\n    node: 16.14.0\n    v8: 9.4.146.24-node.20\n    uv: 1.43.0\n    zlib: 1.2.11\n    brotli: 1.0.9\n    ares: 1.18.1\n    modules: 93\n    nghttp2: 1.45.1\n    napi: 8\n    llhttp: 6.0.4\n    openssl: 1.1.1m+quic\n    cldr: 40.0\n    icu: 70.1\n    tz: 2021a3\n    unicode: 14.0\n    ngtcp2: 0.1.0-DEV\n    nghttp3: 0.1.0-DEV\n\n#### 1.安装Node.js\n\n- [Node.js中文网](http://nodejs.cn/)\n- [Node.js官网](https://nodejs.org/zh-cn/)\n\n#### 2.安装Git\n\n- [Git官网](https://git-scm.com/)\n\n#### 3.安装Hexo\n\n1. 所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n    ```bash\n    npm install -g hexo-cli\n    ```\n\n2. 进阶安装和使用,对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。\n\n    ```bash\n    npm install hexo\n    ```\n\n    {% gi total n1-n2-... %}\n    ![进行中图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n    ![成功后图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n    {% endgi %}\n\n3. 安装以后，可以使用以下两种方式执行 Hexo：\n    1. `npx hexo <command>`\n\n        ```bash\n        Usage: hexo <command>\n\n        Commands:\n\n        help     在一个命令上获得帮助。\n        init     创建一个新的Hexo文件夹。\n        version  显示版本信息。\n        \n        Global Options:\n\n        --config  指定配置文件，而不是使用 _config.yml\n        --cwd     指定CWD\n        --debug   在终端显示所有粗略的信息\n        --draft   显示帖子草稿\n        --safe    禁用所有插件和脚本\n        --silent  隐藏控制台中的输出\n        如需更多帮助，你可以使用 \"hexo help [command]\"获得详细信息\n        或者你可以查看文档：http://hexo.io/docs/\n        ```\n\n    2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 `hexo <command>`：\n\n        ``` bash\n        echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n        ```\n\n    3. 注意事项\n        > Node.js 版本限制\n        我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 [Node.js](https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90) 版本。\n\n        ![图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321144759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n### 建站\n\n#### 1. `hexo init <folder>`\n\n```bash\n# 因为没有把Hexo目录下的node_modules添加到环境变量所以需要npx\nnpx hexo init hexo\n# 成功后\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!\n```\n\n![图示1](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n##### 2. 成功以后通过命令行进入对应文件夹 `cd <folder>`\n\n![文件夹内图示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n#### 3. 通过命令行执行 `npm install`\n\n#### 4. 配置 `_config.yml` 依据[官方中文文档配置](https://hexo.io/zh-cn/docs/\n\n#### configuration)\n\n#### 5. 运行hexo\n\n- 可以通过[vscode](https://code.visualstudio.com/)打开根目录,执行npm脚本`server hexo server`\n\n    > **注**:可能需要安装插件 [npm](https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script); [npm Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense)\n\n- 或者通过命令运行hexo\n\n    ```bash\n    PS E:\\test\\hexo> npx hexo server\n    INFO  Validating config\n    INFO  Start processing\n    INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n    ```\n\n    通过访问[http://localhost:4000/](http://localhost:4000/)在浏览器中查看\n\n    ![hexo默认主题展示](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321151723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n#### 6. 指令\n\n```bash\n# 生成静态文件。\nhexo generate \n# 清除缓存文件 db.json 和已生成的静态文件 public。\nhexo clean\n# 部署网站。\nhexo deploy\n# 启动服务器。默认情况下，访问网址为： http://localhost:4000/。\nhexo server\n```\n\n更多指令详细信息可以访问官网[指令](https://hexo.io/zh-cn/docs/commands)\n\n### 来源\n\n[Hexo中文官网](https://hexo.io/zh-cn/)\n","slug":"hexo/hexo1","published":1,"date":"2022-03-21T04:22:24.174Z","updated":"2022-03-22T06:46:52.403Z","_id":"cl10samek0002owsp2vsj6u0g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"什么是-Hexo\"><a href=\"#什么是-Hexo\" class=\"headerlink\" title=\"什么是 Hexo\"></a>什么是 Hexo</h3><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"安装-windows环境\"><a href=\"#安装-windows环境\" class=\"headerlink\" title=\"安装(windows环境)\"></a>安装(windows环境)</h3><blockquote>\n<p>Hexo 安装版本相关信息<br>    hexo: 5.4.1<br>    hexo-cli: 4.3.0<br>    os: win32 10.0.22000<br>    node: 16.14.0<br>    v8: 9.4.146.24-node.20<br>    uv: 1.43.0<br>    zlib: 1.2.11<br>    brotli: 1.0.9<br>    ares: 1.18.1<br>    modules: 93<br>    nghttp2: 1.45.1<br>    napi: 8<br>    llhttp: 6.0.4<br>    openssl: 1.1.1m+quic<br>    cldr: 40.0<br>    icu: 70.1<br>    tz: 2021a3<br>    unicode: 14.0<br>    ngtcp2: 0.1.0-DEV<br>    nghttp3: 0.1.0-DEV</p>\n</blockquote>\n<h4 id=\"1-安装Node-js\"><a href=\"#1-安装Node-js\" class=\"headerlink\" title=\"1.安装Node.js\"></a>1.安装Node.js</h4><ul>\n<li><a href=\"http://nodejs.cn/\">Node.js中文网</a></li>\n<li><a href=\"https://nodejs.org/zh-cn/\">Node.js官网</a></li>\n</ul>\n<h4 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2.安装Git\"></a>2.安装Git</h4><ul>\n<li><a href=\"https://git-scm.com/\">Git官网</a></li>\n</ul>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><ol>\n<li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n <div class=\"code-wrapper\"><pre><code class=\"hljs bash\">npm install -g hexo-cli</code></pre></div></li>\n<li><p>进阶安装和使用,对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p>\n <div class=\"code-wrapper\"><pre><code class=\"hljs bash\">npm install hexo</code></pre></div>\n\n <div class=\"group-image-container\"><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"进行中图示\"></div><div class=\"group-image-wrap\"><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"成功后图示\"></div></div></div></li>\n<li><p>安装以后，可以使用以下两种方式执行 Hexo：</p>\n<ol>\n<li><p><code>npx hexo &lt;command&gt;</code></p>\n <div class=\"code-wrapper\"><pre><code class=\"hljs bash\">Usage: hexo &lt;<span class=\"hljs-built_in\">command</span>&gt;\n\nCommands:\n\n<span class=\"hljs-built_in\">help</span>     在一个命令上获得帮助。\ninit     创建一个新的Hexo文件夹。\nversion  显示版本信息。\n\nGlobal Options:\n\n--config  指定配置文件，而不是使用 _config.yml\n--cwd     指定CWD\n--debug   在终端显示所有粗略的信息\n--draft   显示帖子草稿\n--safe    禁用所有插件和脚本\n--silent  隐藏控制台中的输出\n如需更多帮助，你可以使用 <span class=\"hljs-string\">&quot;hexo help [command]&quot;</span>获得详细信息\n或者你可以查看文档：http://hexo.io/docs/</code></pre></div></li>\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p>\n <div class=\"code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</code></pre></div></li>\n<li><p>注意事项</p>\n<blockquote>\n<p>Node.js 版本限制<br> 我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 <a href=\"https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90\">Node.js</a> 版本。</p>\n</blockquote>\n<p> <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321144759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"图示\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><h4 id=\"1-hexo-init-lt-folder-gt\"><a href=\"#1-hexo-init-lt-folder-gt\" class=\"headerlink\" title=\"1. hexo init &lt;folder&gt;\"></a>1. <code>hexo init &lt;folder&gt;</code></h4><div class=\"code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 因为没有把Hexo目录下的node_modules添加到环境变量所以需要npx</span>\nnpx hexo init hexo\n<span class=\"hljs-comment\"># 成功后</span>\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!</code></pre></div>\n\n<p><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"图示1\"></p>\n<h5 id=\"2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt\"><a href=\"#2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt\" class=\"headerlink\" title=\"2. 成功以后通过命令行进入对应文件夹 cd &lt;folder&gt;\"></a>2. 成功以后通过命令行进入对应文件夹 <code>cd &lt;folder&gt;</code></h5><p><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"文件夹内图示\"></p>\n<h4 id=\"3-通过命令行执行-npm-install\"><a href=\"#3-通过命令行执行-npm-install\" class=\"headerlink\" title=\"3. 通过命令行执行 npm install\"></a>3. 通过命令行执行 <code>npm install</code></h4><h4 id=\"4-配置-config-yml-依据-官方中文文档配置-https-hexo-io-zh-cn-docs\"><a href=\"#4-配置-config-yml-依据-官方中文文档配置-https-hexo-io-zh-cn-docs\" class=\"headerlink\" title=\"4. 配置 _config.yml 依据[官方中文文档配置](https://hexo.io/zh-cn/docs/\"></a>4. 配置 <code>_config.yml</code> 依据[官方中文文档配置](<a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></h4><h4 id=\"configuration\"><a href=\"#configuration\" class=\"headerlink\" title=\"configuration)\"></a>configuration)</h4><h4 id=\"5-运行hexo\"><a href=\"#5-运行hexo\" class=\"headerlink\" title=\"5. 运行hexo\"></a>5. 运行hexo</h4><ul>\n<li><p>可以通过<a href=\"https://code.visualstudio.com/\">vscode</a>打开根目录,执行npm脚本<code>server hexo server</code></p>\n<blockquote>\n<p><strong>注</strong>:可能需要安装插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script\">npm</a>; <a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense\">npm Intellisense</a></p>\n</blockquote>\n</li>\n<li><p>或者通过命令运行hexo</p>\n  <div class=\"code-wrapper\"><pre><code class=\"hljs bash\">PS E:\\<span class=\"hljs-built_in\">test</span>\\hexo&gt; npx hexo server\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</code></pre></div>\n\n<p>  通过访问<a href=\"http://localhost:4000/\">http://localhost:4000/</a>在浏览器中查看</p>\n<p>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321151723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"hexo默认主题展示\"></p>\n</li>\n</ul>\n<h4 id=\"6-指令\"><a href=\"#6-指令\" class=\"headerlink\" title=\"6. 指令\"></a>6. 指令</h4><div class=\"code-wrapper\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成静态文件。</span>\nhexo generate \n<span class=\"hljs-comment\"># 清除缓存文件 db.json 和已生成的静态文件 public。</span>\nhexo clean\n<span class=\"hljs-comment\"># 部署网站。</span>\nhexo deploy\n<span class=\"hljs-comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span>\nhexo server</code></pre></div>\n\n<p>更多指令详细信息可以访问官网<a href=\"https://hexo.io/zh-cn/docs/commands\">指令</a></p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p><a href=\"https://hexo.io/zh-cn/\">Hexo中文官网</a></p>\n","site":{"data":{}},"wordcount":1734,"excerpt":"","more":"<h3 id=\"什么是-Hexo\"><a href=\"#什么是-Hexo\" class=\"headerlink\" title=\"什么是 Hexo\"></a>什么是 Hexo</h3><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h3 id=\"安装-windows环境\"><a href=\"#安装-windows环境\" class=\"headerlink\" title=\"安装(windows环境)\"></a>安装(windows环境)</h3><blockquote>\n<p>Hexo 安装版本相关信息<br>    hexo: 5.4.1<br>    hexo-cli: 4.3.0<br>    os: win32 10.0.22000<br>    node: 16.14.0<br>    v8: 9.4.146.24-node.20<br>    uv: 1.43.0<br>    zlib: 1.2.11<br>    brotli: 1.0.9<br>    ares: 1.18.1<br>    modules: 93<br>    nghttp2: 1.45.1<br>    napi: 8<br>    llhttp: 6.0.4<br>    openssl: 1.1.1m+quic<br>    cldr: 40.0<br>    icu: 70.1<br>    tz: 2021a3<br>    unicode: 14.0<br>    ngtcp2: 0.1.0-DEV<br>    nghttp3: 0.1.0-DEV</p>\n</blockquote>\n<h4 id=\"1-安装Node-js\"><a href=\"#1-安装Node-js\" class=\"headerlink\" title=\"1.安装Node.js\"></a>1.安装Node.js</h4><ul>\n<li><a href=\"http://nodejs.cn/\">Node.js中文网</a></li>\n<li><a href=\"https://nodejs.org/zh-cn/\">Node.js官网</a></li>\n</ul>\n<h4 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2.安装Git\"></a>2.安装Git</h4><ul>\n<li><a href=\"https://git-scm.com/\">Git官网</a></li>\n</ul>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><ol>\n<li><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n <pre><code class=\"hljs bash\">npm install -g hexo-cli</code></pre></li>\n<li><p>进阶安装和使用,对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p>\n <pre><code class=\"hljs bash\">npm install hexo</code></pre>\n\n <div class=\"group-image-container\"><div class=\"group-image-row\"><div class=\"group-image-wrap\"><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"进行中图示\"></div><div class=\"group-image-wrap\"><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321143158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"成功后图示\"></div></div></div></li>\n<li><p>安装以后，可以使用以下两种方式执行 Hexo：</p>\n<ol>\n<li><p><code>npx hexo &lt;command&gt;</code></p>\n <pre><code class=\"hljs bash\">Usage: hexo &lt;<span class=\"hljs-built_in\">command</span>&gt;\n\nCommands:\n\n<span class=\"hljs-built_in\">help</span>     在一个命令上获得帮助。\ninit     创建一个新的Hexo文件夹。\nversion  显示版本信息。\n\nGlobal Options:\n\n--config  指定配置文件，而不是使用 _config.yml\n--cwd     指定CWD\n--debug   在终端显示所有粗略的信息\n--draft   显示帖子草稿\n--safe    禁用所有插件和脚本\n--silent  隐藏控制台中的输出\n如需更多帮助，你可以使用 <span class=\"hljs-string\">&quot;hexo help [command]&quot;</span>获得详细信息\n或者你可以查看文档：http://hexo.io/docs/</code></pre></li>\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p>\n <pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile</code></pre></li>\n<li><p>注意事项</p>\n<blockquote>\n<p>Node.js 版本限制<br> 我们强烈建议永远安装最新版本的 Hexo，以及 推荐的 <a href=\"https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90\">Node.js</a> 版本。</p>\n</blockquote>\n<p> <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321144759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"图示\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><h4 id=\"1-hexo-init-lt-folder-gt\"><a href=\"#1-hexo-init-lt-folder-gt\" class=\"headerlink\" title=\"1. hexo init &lt;folder&gt;\"></a>1. <code>hexo init &lt;folder&gt;</code></h4><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 因为没有把Hexo目录下的node_modules添加到环境变量所以需要npx</span>\nnpx hexo init hexo\n<span class=\"hljs-comment\"># 成功后</span>\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!</code></pre>\n\n<p><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"图示1\"></p>\n<h5 id=\"2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt\"><a href=\"#2-成功以后通过命令行进入对应文件夹-cd-lt-folder-gt\" class=\"headerlink\" title=\"2. 成功以后通过命令行进入对应文件夹 cd &lt;folder&gt;\"></a>2. 成功以后通过命令行进入对应文件夹 <code>cd &lt;folder&gt;</code></h5><p><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321145709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"文件夹内图示\"></p>\n<h4 id=\"3-通过命令行执行-npm-install\"><a href=\"#3-通过命令行执行-npm-install\" class=\"headerlink\" title=\"3. 通过命令行执行 npm install\"></a>3. 通过命令行执行 <code>npm install</code></h4><h4 id=\"4-配置-config-yml-依据-官方中文文档配置-https-hexo-io-zh-cn-docs\"><a href=\"#4-配置-config-yml-依据-官方中文文档配置-https-hexo-io-zh-cn-docs\" class=\"headerlink\" title=\"4. 配置 _config.yml 依据[官方中文文档配置](https://hexo.io/zh-cn/docs/\"></a>4. 配置 <code>_config.yml</code> 依据[官方中文文档配置](<a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></h4><h4 id=\"configuration\"><a href=\"#configuration\" class=\"headerlink\" title=\"configuration)\"></a>configuration)</h4><h4 id=\"5-运行hexo\"><a href=\"#5-运行hexo\" class=\"headerlink\" title=\"5. 运行hexo\"></a>5. 运行hexo</h4><ul>\n<li><p>可以通过<a href=\"https://code.visualstudio.com/\">vscode</a>打开根目录,执行npm脚本<code>server hexo server</code></p>\n<blockquote>\n<p><strong>注</strong>:可能需要安装插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script\">npm</a>; <a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense\">npm Intellisense</a></p>\n</blockquote>\n</li>\n<li><p>或者通过命令运行hexo</p>\n  <pre><code class=\"hljs bash\">PS E:\\<span class=\"hljs-built_in\">test</span>\\hexo&gt; npx hexo server\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</code></pre>\n\n<p>  通过访问<a href=\"http://localhost:4000/\">http://localhost:4000/</a>在浏览器中查看</p>\n<p>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321151723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"hexo默认主题展示\"></p>\n</li>\n</ul>\n<h4 id=\"6-指令\"><a href=\"#6-指令\" class=\"headerlink\" title=\"6. 指令\"></a>6. 指令</h4><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 生成静态文件。</span>\nhexo generate \n<span class=\"hljs-comment\"># 清除缓存文件 db.json 和已生成的静态文件 public。</span>\nhexo clean\n<span class=\"hljs-comment\"># 部署网站。</span>\nhexo deploy\n<span class=\"hljs-comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span>\nhexo server</code></pre>\n\n<p>更多指令详细信息可以访问官网<a href=\"https://hexo.io/zh-cn/docs/commands\">指令</a></p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p><a href=\"https://hexo.io/zh-cn/\">Hexo中文官网</a></p>\n"},{"title":"Hexo主题之Fluid","data":"2022-03-21T08:40:00.000Z","index_img":"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/3419353.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10","_content":"\n### Fluid简介\n\n一款 Material Design 风格的 Hexo 博客主题\n\n![https://hexo.fluid-dev.com/](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321172250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n### 安装主题(version：1.8.14)\n\nHexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客根目录执行命令：\n\n```bash\nnpm install --save hexo-theme-fluid\n```\n\n然后在博客目录下创建 `_config.fluid.yml`，将主题的 [`_config.yml`](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)内容复制过去。\n\n{% note warning %}\n`_config.fluid.yml`和hexo的`_config.yml`同级,可以根据个人需求配置主题相关内容,无法访问可以查看博客**Hexo Fluid主题_config.yml**\n{% endnote %}\n\n### 指定主题\n\n如下修改 Hexo 博客目录中的 `_config.yml`：\n\n```yml\ntheme: fluid  # 指定主题\n\nlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\n```\n\n### 创建「关于页」\n\n首次使用主题的「关于页」需要手动创建：\n\n```yml\nhexo new page about\n```\n\n创建成功后修改 `/source/about/index.md`，添加 `layout` 属性。\n\n修改后的文件示例如下：\n\n```md\n---\ntitle: 标题\nlayout: about\n---\n\n这里写关于页的正文，支持 Markdown, HTML\n```\n\n{% note warning %}\n`layout: about` 必须存在，并且不能修改成其他值，否则不会显示头像等样式。\n{% endnote %}\n\n### 其他\n\n更详细的配置信息等请参考[官方文档](https://hexo.fluid-dev.com/docs/)\n\n### 来源\n\n- [Hexo Fluid GitHub](https://github.com/fluid-dev/hexo-theme-fluid)\n- [Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/)\n- [Fluid's blog](https://hexo.fluid-dev.com/)\n","source":"_posts/hexo/hexo2.md","raw":"---\ntitle: Hexo主题之Fluid\ncategories: \n - [Hexo,Fluid主题]\ntags:\n - Hexo\ndata: 2022-03-21 16:40:00\nindex_img: https://instrument-file.oss-cn-beijing.aliyuncs.com/img/3419353.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10\n---\n\n### Fluid简介\n\n一款 Material Design 风格的 Hexo 博客主题\n\n![https://hexo.fluid-dev.com/](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321172250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10)\n\n### 安装主题(version：1.8.14)\n\nHexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客根目录执行命令：\n\n```bash\nnpm install --save hexo-theme-fluid\n```\n\n然后在博客目录下创建 `_config.fluid.yml`，将主题的 [`_config.yml`](https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml)内容复制过去。\n\n{% note warning %}\n`_config.fluid.yml`和hexo的`_config.yml`同级,可以根据个人需求配置主题相关内容,无法访问可以查看博客**Hexo Fluid主题_config.yml**\n{% endnote %}\n\n### 指定主题\n\n如下修改 Hexo 博客目录中的 `_config.yml`：\n\n```yml\ntheme: fluid  # 指定主题\n\nlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\n```\n\n### 创建「关于页」\n\n首次使用主题的「关于页」需要手动创建：\n\n```yml\nhexo new page about\n```\n\n创建成功后修改 `/source/about/index.md`，添加 `layout` 属性。\n\n修改后的文件示例如下：\n\n```md\n---\ntitle: 标题\nlayout: about\n---\n\n这里写关于页的正文，支持 Markdown, HTML\n```\n\n{% note warning %}\n`layout: about` 必须存在，并且不能修改成其他值，否则不会显示头像等样式。\n{% endnote %}\n\n### 其他\n\n更详细的配置信息等请参考[官方文档](https://hexo.fluid-dev.com/docs/)\n\n### 来源\n\n- [Hexo Fluid GitHub](https://github.com/fluid-dev/hexo-theme-fluid)\n- [Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/)\n- [Fluid's blog](https://hexo.fluid-dev.com/)\n","slug":"hexo/hexo2","published":1,"date":"2022-03-21T08:39:45.970Z","updated":"2022-03-22T06:40:44.010Z","_id":"cl10samep0005owspd3njgnvp","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Fluid简介\"><a href=\"#Fluid简介\" class=\"headerlink\" title=\"Fluid简介\"></a>Fluid简介</h3><p>一款 Material Design 风格的 Hexo 博客主题</p>\n<p><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321172250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"https://hexo.fluid-dev.com/\"></p>\n<h3 id=\"安装主题-version：1-8-14\"><a href=\"#安装主题-version：1-8-14\" class=\"headerlink\" title=\"安装主题(version：1.8.14)\"></a>安装主题(version：1.8.14)</h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客根目录执行命令：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs bash\">npm install --save hexo-theme-fluid</code></pre></div>\n\n<p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\"><code>_config.yml</code></a>内容复制过去。</p>\n<div class=\"note note-warning\">\n            <p><code>_config.fluid.yml</code>和hexo的<code>_config.yml</code>同级,可以根据个人需求配置主题相关内容,无法访问可以查看博客<strong>Hexo Fluid主题_config.yml</strong></p>\n          </div>\n\n<h3 id=\"指定主题\"><a href=\"#指定主题\" class=\"headerlink\" title=\"指定主题\"></a>指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">fluid</span>  <span class=\"hljs-comment\"># 指定主题</span>\n\n<span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">zh-CN</span>  <span class=\"hljs-comment\"># 指定语言，会影响主题显示的语言，按需修改</span></code></pre></div>\n\n<h3 id=\"创建「关于页」\"><a href=\"#创建「关于页」\" class=\"headerlink\" title=\"创建「关于页」\"></a>创建「关于页」</h3><p>首次使用主题的「关于页」需要手动创建：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">new</span> <span class=\"hljs-string\">page</span> <span class=\"hljs-string\">about</span></code></pre></div>\n\n<p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p>\n<p>修改后的文件示例如下：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs md\">---\ntitle: 标题\n<span class=\"hljs-section\">layout: about</span>\n<span class=\"hljs-section\">---</span>\n\n这里写关于页的正文，支持 Markdown, HTML</code></pre></div>\n\n<div class=\"note note-warning\">\n            <p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>\n          </div>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>更详细的配置信息等请参考<a href=\"https://hexo.fluid-dev.com/docs/\">官方文档</a></p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><ul>\n<li><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">Hexo Fluid GitHub</a></li>\n<li><a href=\"https://hexo.fluid-dev.com/docs/\">Hexo Fluid 用户手册</a></li>\n<li><a href=\"https://hexo.fluid-dev.com/\">Fluid’s blog</a></li>\n</ul>\n","site":{"data":{}},"wordcount":585,"excerpt":"","more":"<h3 id=\"Fluid简介\"><a href=\"#Fluid简介\" class=\"headerlink\" title=\"Fluid简介\"></a>Fluid简介</h3><p>一款 Material Design 风格的 Hexo 博客主题</p>\n<p><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/20220321172250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_se,x_10,y_10\" alt=\"https://hexo.fluid-dev.com/\"></p>\n<h3 id=\"安装主题-version：1-8-14\"><a href=\"#安装主题-version：1-8-14\" class=\"headerlink\" title=\"安装主题(version：1.8.14)\"></a>安装主题(version：1.8.14)</h3><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客根目录执行命令：</p>\n<pre><code class=\"hljs bash\">npm install --save hexo-theme-fluid</code></pre>\n\n<p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href=\"https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml\"><code>_config.yml</code></a>内容复制过去。</p>\n<div class=\"note note-warning\">\n            <p><code>_config.fluid.yml</code>和hexo的<code>_config.yml</code>同级,可以根据个人需求配置主题相关内容,无法访问可以查看博客<strong>Hexo Fluid主题_config.yml</strong></p>\n          </div>\n\n<h3 id=\"指定主题\"><a href=\"#指定主题\" class=\"headerlink\" title=\"指定主题\"></a>指定主题</h3><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">fluid</span>  <span class=\"hljs-comment\"># 指定主题</span>\n\n<span class=\"hljs-attr\">language:</span> <span class=\"hljs-string\">zh-CN</span>  <span class=\"hljs-comment\"># 指定语言，会影响主题显示的语言，按需修改</span></code></pre>\n\n<h3 id=\"创建「关于页」\"><a href=\"#创建「关于页」\" class=\"headerlink\" title=\"创建「关于页」\"></a>创建「关于页」</h3><p>首次使用主题的「关于页」需要手动创建：</p>\n<pre><code class=\"hljs yml\"><span class=\"hljs-string\">hexo</span> <span class=\"hljs-string\">new</span> <span class=\"hljs-string\">page</span> <span class=\"hljs-string\">about</span></code></pre>\n\n<p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p>\n<p>修改后的文件示例如下：</p>\n<pre><code class=\"hljs md\">---\ntitle: 标题\n<span class=\"hljs-section\">layout: about</span>\n<span class=\"hljs-section\">---</span>\n\n这里写关于页的正文，支持 Markdown, HTML</code></pre>\n\n<div class=\"note note-warning\">\n            <p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>\n          </div>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>更详细的配置信息等请参考<a href=\"https://hexo.fluid-dev.com/docs/\">官方文档</a></p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><ul>\n<li><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">Hexo Fluid GitHub</a></li>\n<li><a href=\"https://hexo.fluid-dev.com/docs/\">Hexo Fluid 用户手册</a></li>\n<li><a href=\"https://hexo.fluid-dev.com/\">Fluid’s blog</a></li>\n</ul>\n"},{"title":"第一篇博客","excerpt":"Hello World","sticky":1,"index_img":"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/raycast-untitled.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10","_content":"\n``` java\npublic class HelloWorld\n{\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n","source":"_posts/hello-world.md","raw":"---\ntitle: 第一篇博客\nexcerpt: Hello World\nsticky: 1\nindex_img: https://instrument-file.oss-cn-beijing.aliyuncs.com/img/raycast-untitled.png?x-oss-process=image/resize,m_pad,w_268,h_160/watermark,type_ZmFuZ3poZW5na2FpdGk,size_20,text_QOmxvOWtkOmFsQ==,color_012EA5,shadow_0,t_100,g_south,x_10,y_10\n---\n\n``` java\npublic class HelloWorld\n{\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n","slug":"hello-world","published":1,"date":"2022-03-20T05:53:29.607Z","updated":"2022-03-22T06:41:45.777Z","_id":"cl10sameq0006owsp7kh4579p","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span>\n&#123;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>\n    &#123;\n        System.out.println(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>);\n    &#125;\n&#125;</code></pre></div>\n","site":{"data":{}},"wordcount":123,"more":"<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span>\n&#123;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>\n    &#123;\n        System.out.println(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>);\n    &#125;\n&#125;</code></pre>\n"},{"title":"离散数学-集合的基本运算","date":"2022-03-20T08:00:00.000Z","_content":"\n> 集合的基本运算包含集合的并，交，补，差等等。\n\n### 1. 集合的`并`运算\n\n- 由所有属于**_A_**或者属于**_B_**的元素并在一起而构成的集合，记作**_A_**∪**_B_**，即**_A_**∪**_B_**={x|x∈**_A_**或x∈**_B_**}.\n- **_A_**={1,2,3} ; **_B_** ={1,2,3,4}**_A_**∪**_B_** = {1,2,3,4}\n- 文氏图表示：\n    ![**_A_**∪**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202111181450080.jpg)\n- 并运算性质\n    1. 幂等率：**_A_**∪**_A_**=**_A_**\n    2. 同一率：**_A_**∪**_∅_**=**_A_**\n    3. 零一率：**_A_**∪**_U_**=**_U_**\n    4. 结合率：(**_A_**∪**_B_**)∪**_C_**=**_A_**∪(**_B_**∪**_C_**)\n    5. 交换率：**_A_**∪**_B_**=**_B_**∪**_A_**\n\n### 2. 集合的交运算\n\n- 由所有即属于**_A_**又属于**_B_**的元素构成的集合，记作**_A_**∩**_B_**，即**_A_**∩**_B_**={x|x∈**_A_**且x∈**_B_**}。\n- **_A_**={1,2,3} ; **_B_** ={1,2,3,4}**_A_**∩**_B_**=#{1,2,3}\n- 文氏图\n    ![**_A_**∩**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181501126.jpg)\n- 交运算性质：\n    1. 幂等率：**_A_**∩**_A_**=**_A_**\n    2. 同一率：**_A_**∩**_U_**=**_A_**\n    3. 零一率：**_A_**∩**_∅_**=**_∅_**\n    4. 结合率：(**_A_**∩**_B_**)∩**_C_**=**_A_**∩(**_B_**∩**_C_**)\n    5. 交换率：**_A_**∩**_B_**=**_B_**∩**_A_**\n- 定理：\n    1. 设**_A_**，**_B_**，**_C_**是三个集合，则下列分配律成立：\n        **_A_**∩(**_B_**∪**_C_**)=(**_A_**∩**_B_**)∪(**_A_**∩**_C_**)\n        **_A_**∪(**_B_**∩**_C_**)=(**_A_**∪**_B_**)∩(**_A_**∪**_C_**)\n    2. 设**_A_**，**_B_**为两个集合，则下列关系是成立：\n        **_A_**∪(**_A_**∩**_B_**)=**_A_**\n        **_A_**∩(**_A_**∪**_B_**)=**_A_**\n\n### 3. 集合的补\n\n1. 相对补\n    - 他是由属于集合**_A_**但不属于**_B_**的所有元素构成的，记作**_A_**——**_B_**（或**_A_** \\ **_B_**）。**_A_**——**_B_**称为集合**_B_**关于**_A_**的补集或相对补。即**_A_**——**_B_**={x|x∈**_A_**且x∉**_B_**}.\n    - **_A_**={1,2,3} ; **_B_**={a,b}**_A_**——**_B_**={1,2,3}\n    - 文氏图\n        ![**_A_**——**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181711241.jpg)\n    - 差运算性质:\n        1. **_A_**——**_A_**=**_∅_**\n        2. **_A_**——**_∅_**=**_A_**\n        3. **_A_**——**_U_**=**_∅_**\n2. 绝对补\n    - 设**_U_**是全集，**_A_**是**_U_**的一个子集，称**_U_**——**_A_**为**_A_**关于全集的补集，也叫~**_A_**或<sup class=\"normal\">—</sup>**_A_**，即<sup class=\"normal\">—</sup>**_A_**=**_U_**——**_A_**={x|x∈**_U_**且x∉**_A_**}。\n    - 文氏图\n        ![**_U_**——**_A_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181722370.png)\n    - 补运算性质\n        1. 双重否定定律：~(~**_A_**)=**_A_**\n        2. 摩根率：\n            - ：~**_∅_**=**_U_**\n            - ：~**_U_**=**_∅_**\n        3. 矛盾律：**_A_**∩(~**_A_**)=**_∅_**\n        4. 排中率：**_A_**∪(~**_A_**)=**_U_**\n    - 定理\n        - 1. 设**_A_**，**_B_**是两个集合，则下列关系式成立：\n        ~(**_A_**∪**_B_**)=~**_A_**∩~**_B_**\n        ~(**_A_**∩**_B_**)=~**_A_**∪~**_B_**\n        这个定律是德摩根定律。\n        - 2. 设**_A_** , **_B_** , **_C_**是任意三个集合 , 则下列关系式成立:\n            **_A_**——**_B_**=**_A_**∩~**_B_**\n            **_A_**——**_B_**=**_A_**——(**_A_**∩**_B_**)\n3. 集合的对称差\n    - 设**_A_**,**_B_**是两个集合 , 集合**_A_**和**_B_**的对称差或环扣,记作**_A_**⊕**_B_**,它是一个集合 , 其元素或属于**_A_**或属于**_B_** , 但不能既属于**_A_**也属于**_B_**. 即**_A_**⊕**_B_**=(**_A_**∪**_B_**)——(**_A_**∩**_B_**) .\n    - **_A_**={0,1,2} ; **_B_** ={2,3}**_A_**⊕**_B_**=(**_A_**∪**_B_**)——(**_A_**∩**_B_**)={0,1,2,3}——{2}={0,1,3}**_A_**⊕**_B_**=(**_A_**——**_B_**)∪(**_A_**——**_B_**)={0,1}——{3}={0,1,3}\n    - 文氏图\n        ![**_A_**⊕**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111221631038.jpg)\n","source":"_posts/math/discrete1.md","raw":"---\ntitle: 离散数学-集合的基本运算\ncategories: \n - [数学,离散数学]\ntags: \n - 离散数学\ndate: 2022-03-20 16:00:00\n---\n\n> 集合的基本运算包含集合的并，交，补，差等等。\n\n### 1. 集合的`并`运算\n\n- 由所有属于**_A_**或者属于**_B_**的元素并在一起而构成的集合，记作**_A_**∪**_B_**，即**_A_**∪**_B_**={x|x∈**_A_**或x∈**_B_**}.\n- **_A_**={1,2,3} ; **_B_** ={1,2,3,4}**_A_**∪**_B_** = {1,2,3,4}\n- 文氏图表示：\n    ![**_A_**∪**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202111181450080.jpg)\n- 并运算性质\n    1. 幂等率：**_A_**∪**_A_**=**_A_**\n    2. 同一率：**_A_**∪**_∅_**=**_A_**\n    3. 零一率：**_A_**∪**_U_**=**_U_**\n    4. 结合率：(**_A_**∪**_B_**)∪**_C_**=**_A_**∪(**_B_**∪**_C_**)\n    5. 交换率：**_A_**∪**_B_**=**_B_**∪**_A_**\n\n### 2. 集合的交运算\n\n- 由所有即属于**_A_**又属于**_B_**的元素构成的集合，记作**_A_**∩**_B_**，即**_A_**∩**_B_**={x|x∈**_A_**且x∈**_B_**}。\n- **_A_**={1,2,3} ; **_B_** ={1,2,3,4}**_A_**∩**_B_**=#{1,2,3}\n- 文氏图\n    ![**_A_**∩**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181501126.jpg)\n- 交运算性质：\n    1. 幂等率：**_A_**∩**_A_**=**_A_**\n    2. 同一率：**_A_**∩**_U_**=**_A_**\n    3. 零一率：**_A_**∩**_∅_**=**_∅_**\n    4. 结合率：(**_A_**∩**_B_**)∩**_C_**=**_A_**∩(**_B_**∩**_C_**)\n    5. 交换率：**_A_**∩**_B_**=**_B_**∩**_A_**\n- 定理：\n    1. 设**_A_**，**_B_**，**_C_**是三个集合，则下列分配律成立：\n        **_A_**∩(**_B_**∪**_C_**)=(**_A_**∩**_B_**)∪(**_A_**∩**_C_**)\n        **_A_**∪(**_B_**∩**_C_**)=(**_A_**∪**_B_**)∩(**_A_**∪**_C_**)\n    2. 设**_A_**，**_B_**为两个集合，则下列关系是成立：\n        **_A_**∪(**_A_**∩**_B_**)=**_A_**\n        **_A_**∩(**_A_**∪**_B_**)=**_A_**\n\n### 3. 集合的补\n\n1. 相对补\n    - 他是由属于集合**_A_**但不属于**_B_**的所有元素构成的，记作**_A_**——**_B_**（或**_A_** \\ **_B_**）。**_A_**——**_B_**称为集合**_B_**关于**_A_**的补集或相对补。即**_A_**——**_B_**={x|x∈**_A_**且x∉**_B_**}.\n    - **_A_**={1,2,3} ; **_B_**={a,b}**_A_**——**_B_**={1,2,3}\n    - 文氏图\n        ![**_A_**——**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181711241.jpg)\n    - 差运算性质:\n        1. **_A_**——**_A_**=**_∅_**\n        2. **_A_**——**_∅_**=**_A_**\n        3. **_A_**——**_U_**=**_∅_**\n2. 绝对补\n    - 设**_U_**是全集，**_A_**是**_U_**的一个子集，称**_U_**——**_A_**为**_A_**关于全集的补集，也叫~**_A_**或<sup class=\"normal\">—</sup>**_A_**，即<sup class=\"normal\">—</sup>**_A_**=**_U_**——**_A_**={x|x∈**_U_**且x∉**_A_**}。\n    - 文氏图\n        ![**_U_**——**_A_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181722370.png)\n    - 补运算性质\n        1. 双重否定定律：~(~**_A_**)=**_A_**\n        2. 摩根率：\n            - ：~**_∅_**=**_U_**\n            - ：~**_U_**=**_∅_**\n        3. 矛盾律：**_A_**∩(~**_A_**)=**_∅_**\n        4. 排中率：**_A_**∪(~**_A_**)=**_U_**\n    - 定理\n        - 1. 设**_A_**，**_B_**是两个集合，则下列关系式成立：\n        ~(**_A_**∪**_B_**)=~**_A_**∩~**_B_**\n        ~(**_A_**∩**_B_**)=~**_A_**∪~**_B_**\n        这个定律是德摩根定律。\n        - 2. 设**_A_** , **_B_** , **_C_**是任意三个集合 , 则下列关系式成立:\n            **_A_**——**_B_**=**_A_**∩~**_B_**\n            **_A_**——**_B_**=**_A_**——(**_A_**∩**_B_**)\n3. 集合的对称差\n    - 设**_A_**,**_B_**是两个集合 , 集合**_A_**和**_B_**的对称差或环扣,记作**_A_**⊕**_B_**,它是一个集合 , 其元素或属于**_A_**或属于**_B_** , 但不能既属于**_A_**也属于**_B_**. 即**_A_**⊕**_B_**=(**_A_**∪**_B_**)——(**_A_**∩**_B_**) .\n    - **_A_**={0,1,2} ; **_B_** ={2,3}**_A_**⊕**_B_**=(**_A_**∪**_B_**)——(**_A_**∩**_B_**)={0,1,2,3}——{2}={0,1,3}**_A_**⊕**_B_**=(**_A_**——**_B_**)∪(**_A_**——**_B_**)={0,1}——{3}={0,1,3}\n    - 文氏图\n        ![**_A_**⊕**_B_**](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111221631038.jpg)\n","slug":"math/discrete1","published":1,"updated":"2022-03-21T13:21:02.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samer0007owspbbig2jt9","content":"<blockquote>\n<p>集合的基本运算包含集合的并，交，补，差等等。</p>\n</blockquote>\n<h3 id=\"1-集合的并运算\"><a href=\"#1-集合的并运算\" class=\"headerlink\" title=\"1. 集合的并运算\"></a>1. 集合的<code>并</code>运算</h3><ul>\n<li>由所有属于**<em>A</em><strong>或者属于</strong><em>B</em><strong>的元素并在一起而构成的集合，记作</strong><em>A</em><strong>∪</strong><em>B</em><strong>，即</strong><em>A</em><strong>∪</strong><em>B</em><strong>={x|x∈</strong><em>A</em><strong>或x∈</strong><em>B</em>**}.</li>\n<li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong> ={1,2,3,4}<strong><em>A</em><strong>∪</strong><em>B</em></strong> = {1,2,3,4}</li>\n<li>文氏图表示：<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202111181450080.jpg\" alt=\"**_A_**∪**_B_**\"></li>\n<li>并运算性质<ol>\n<li>幂等率：**<em>A</em><strong>∪</strong><em>A</em><strong>=</strong><em>A</em>**</li>\n<li>同一率：**<em>A</em><strong>∪</strong><em>∅</em><strong>=</strong><em>A</em>**</li>\n<li>零一率：**<em>A</em><strong>∪</strong><em>U</em><strong>=</strong><em>U</em>**</li>\n<li>结合率：(<strong><em>A</em><strong>∪</strong><em>B</em></strong>)∪**<em>C</em><strong>=</strong><em>A</em><strong>∪(</strong><em>B</em><strong>∪</strong><em>C</em>**)</li>\n<li>交换率：**<em>A</em><strong>∪</strong><em>B</em><strong>=</strong><em>B</em><strong>∪</strong><em>A</em>**</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-集合的交运算\"><a href=\"#2-集合的交运算\" class=\"headerlink\" title=\"2. 集合的交运算\"></a>2. 集合的交运算</h3><ul>\n<li>由所有即属于**<em>A</em><strong>又属于</strong><em>B</em><strong>的元素构成的集合，记作</strong><em>A</em><strong>∩</strong><em>B</em><strong>，即</strong><em>A</em><strong>∩</strong><em>B</em><strong>={x|x∈</strong><em>A</em><strong>且x∈</strong><em>B</em>**}。</li>\n<li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong> ={1,2,3,4}<strong><em>A</em><strong>∩</strong><em>B</em></strong>=#{1,2,3}</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181501126.jpg\" alt=\"**_A_**∩**_B_**\"></li>\n<li>交运算性质：<ol>\n<li>幂等率：**<em>A</em><strong>∩</strong><em>A</em><strong>=</strong><em>A</em>**</li>\n<li>同一率：**<em>A</em><strong>∩</strong><em>U</em><strong>=</strong><em>A</em>**</li>\n<li>零一率：**<em>A</em><strong>∩</strong><em>∅</em><strong>=</strong><em>∅</em>**</li>\n<li>结合率：(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)∩**<em>C</em><strong>=</strong><em>A</em><strong>∩(</strong><em>B</em><strong>∩</strong><em>C</em>**)</li>\n<li>交换率：**<em>A</em><strong>∩</strong><em>B</em><strong>=</strong><em>B</em><strong>∩</strong><em>A</em>**</li>\n</ol>\n</li>\n<li>定理：<ol>\n<li>设**<em>A</em><strong>，</strong><em>B</em><strong>，</strong><em>C</em><strong>是三个集合，则下列分配律成立：<br> <strong><em>A</em><strong>∩(</strong><em>B</em><strong>∪</strong><em>C</em></strong>)=(</strong><em>A</em><strong>∩</strong><em>B</em><strong>)∪(</strong><em>A</em><strong>∩</strong><em>C</em><strong>)<br> <strong><em>A</em><strong>∪(</strong><em>B</em><strong>∩</strong><em>C</em></strong>)=(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)∩(</strong><em>A</em><strong>∪</strong><em>C</em>**)</li>\n<li>设**<em>A</em><strong>，</strong><em>B</em><strong>为两个集合，则下列关系是成立：<br> <strong><em>A</em><strong>∪(</strong><em>A</em><strong>∩</strong><em>B</em></strong>)=</strong><em>A</em>**<br> <strong><em>A</em><strong>∩(</strong><em>A</em><strong>∪</strong><em>B</em></strong>)=<strong><em>A</em></strong></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-集合的补\"><a href=\"#3-集合的补\" class=\"headerlink\" title=\"3. 集合的补\"></a>3. 集合的补</h3><ol>\n<li>相对补<ul>\n<li>他是由属于集合**<em>A</em><strong>但不属于</strong><em>B</em><strong>的所有元素构成的，记作</strong><em>A</em><strong>——</strong><em>B</em><strong>（或</strong><em>A</em>** \\ <strong><em>B</em><strong>）。</strong><em>A</em><strong>——</strong><em>B</em><strong>称为集合</strong><em>B</em><strong>关于</strong><em>A</em><strong>的补集或相对补。即</strong><em>A</em><strong>——</strong><em>B</em></strong>={x|x∈**<em>A</em><strong>且x∉</strong><em>B</em>**}.</li>\n<li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong>={a,b}<strong><em>A</em><strong>——</strong><em>B</em></strong>={1,2,3}</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181711241.jpg\" alt=\"**_A_**——**_B_**\"></li>\n<li>差运算性质:<ol>\n<li><strong><em>A</em><strong>——</strong><em>A</em></strong>=<strong><em>∅</em></strong></li>\n<li><strong><em>A</em><strong>——</strong><em>∅</em></strong>=<strong><em>A</em></strong></li>\n<li><strong><em>A</em><strong>——</strong><em>U</em></strong>=<strong><em>∅</em></strong></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>绝对补<ul>\n<li>设**<em>U</em><strong>是全集，</strong><em>A</em><strong>是</strong><em>U</em><strong>的一个子集，称</strong><em>U</em><strong>——</strong><em>A</em><strong>为</strong><em>A</em><strong>关于全集的补集，也叫~</strong><em>A</em><strong>或<sup class=\"normal\">—</sup></strong><em>A</em><strong>，即<sup class=\"normal\">—</sup></strong><em>A</em><strong>=</strong><em>U</em><strong>——</strong><em>A</em><strong>={x|x∈</strong><em>U</em><strong>且x∉</strong><em>A</em>**}。</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181722370.png\" alt=\"**_U_**——**_A_**\"></li>\n<li>补运算性质<ol>\n<li>双重否定定律：<del>(</del><strong><em>A</em></strong>)=<strong><em>A</em></strong></li>\n<li>摩根率：<ul>\n<li>：~<strong><em>∅</em></strong>=<strong><em>U</em></strong></li>\n<li>：~<strong><em>U</em></strong>=<strong><em>∅</em></strong></li>\n</ul>\n</li>\n<li>矛盾律：**<em>A</em><strong>∩(~</strong><em>A</em><strong>)=</strong><em>∅</em>**</li>\n<li>排中率：**<em>A</em><strong>∪(~</strong><em>A</em><strong>)=</strong><em>U</em>**</li>\n</ol>\n</li>\n<li>定理<ul>\n<li><ol>\n<li>设**<em>A</em><strong>，</strong><em>B</em><strong>是两个集合，则下列关系式成立：<br>~(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)=~</strong><em>A</em><strong>∩~</strong><em>B</em>**<br><del>(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)=</del><strong><em>A</em><strong>∪~</strong><em>B</em></strong><br>这个定律是德摩根定律。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>设**<em>A</em>** , <strong><em>B</em></strong> , **<em>C</em>**是任意三个集合 , 则下列关系式成立:</li>\n</ol>\n  <strong><em>A</em><strong>——</strong><em>B</em></strong>=<strong><em>A</em><strong>∩~</strong><em>B</em></strong><br>  <strong><em>A</em><strong>——</strong><em>B</em></strong>=<strong><em>A</em><strong>——(</strong><em>A</em><strong>∩</strong><em>B</em></strong>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>集合的对称差<ul>\n<li>设**<em>A</em><strong>,</strong><em>B</em><strong>是两个集合 , 集合</strong><em>A</em><strong>和</strong><em>B</em><strong>的对称差或环扣,记作</strong><em>A</em><strong>⊕</strong><em>B</em><strong>,它是一个集合 , 其元素或属于</strong><em>A</em><strong>或属于</strong><em>B</em>** , 但不能既属于**<em>A</em><strong>也属于</strong><em>B</em><strong>. 即</strong><em>A</em><strong>⊕</strong><em>B</em><strong>=(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)——(</strong><em>A</em><strong>∩</strong><em>B</em>**) .</li>\n<li><strong><em>A</em></strong>={0,1,2} ; <strong><em>B</em></strong> ={2,3}<strong><em>A</em><strong>⊕</strong><em>B</em></strong>=(<strong><em>A</em><strong>∪</strong><em>B</em></strong>)——(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)={0,1,2,3}——{2}={0,1,3}<strong><em>A</em><strong>⊕</strong><em>B</em></strong>=(<strong><em>A</em><strong>——</strong><em>B</em></strong>)∪(<strong><em>A</em><strong>——</strong><em>B</em></strong>)={0,1}——{3}={0,1,3}</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111221631038.jpg\" alt=\"**_A_**⊕**_B_**\"></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":1061,"excerpt":"","more":"<blockquote>\n<p>集合的基本运算包含集合的并，交，补，差等等。</p>\n</blockquote>\n<h3 id=\"1-集合的并运算\"><a href=\"#1-集合的并运算\" class=\"headerlink\" title=\"1. 集合的并运算\"></a>1. 集合的<code>并</code>运算</h3><ul>\n<li>由所有属于**<em>A</em><strong>或者属于</strong><em>B</em><strong>的元素并在一起而构成的集合，记作</strong><em>A</em><strong>∪</strong><em>B</em><strong>，即</strong><em>A</em><strong>∪</strong><em>B</em><strong>={x|x∈</strong><em>A</em><strong>或x∈</strong><em>B</em>**}.</li>\n<li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong> ={1,2,3,4}<strong><em>A</em><strong>∪</strong><em>B</em></strong> = {1,2,3,4}</li>\n<li>文氏图表示：<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202111181450080.jpg\" alt=\"**_A_**∪**_B_**\"></li>\n<li>并运算性质<ol>\n<li>幂等率：**<em>A</em><strong>∪</strong><em>A</em><strong>=</strong><em>A</em>**</li>\n<li>同一率：**<em>A</em><strong>∪</strong><em>∅</em><strong>=</strong><em>A</em>**</li>\n<li>零一率：**<em>A</em><strong>∪</strong><em>U</em><strong>=</strong><em>U</em>**</li>\n<li>结合率：(<strong><em>A</em><strong>∪</strong><em>B</em></strong>)∪**<em>C</em><strong>=</strong><em>A</em><strong>∪(</strong><em>B</em><strong>∪</strong><em>C</em>**)</li>\n<li>交换率：**<em>A</em><strong>∪</strong><em>B</em><strong>=</strong><em>B</em><strong>∪</strong><em>A</em>**</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-集合的交运算\"><a href=\"#2-集合的交运算\" class=\"headerlink\" title=\"2. 集合的交运算\"></a>2. 集合的交运算</h3><ul>\n<li>由所有即属于**<em>A</em><strong>又属于</strong><em>B</em><strong>的元素构成的集合，记作</strong><em>A</em><strong>∩</strong><em>B</em><strong>，即</strong><em>A</em><strong>∩</strong><em>B</em><strong>={x|x∈</strong><em>A</em><strong>且x∈</strong><em>B</em>**}。</li>\n<li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong> ={1,2,3,4}<strong><em>A</em><strong>∩</strong><em>B</em></strong>=#{1,2,3}</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181501126.jpg\" alt=\"**_A_**∩**_B_**\"></li>\n<li>交运算性质：<ol>\n<li>幂等率：**<em>A</em><strong>∩</strong><em>A</em><strong>=</strong><em>A</em>**</li>\n<li>同一率：**<em>A</em><strong>∩</strong><em>U</em><strong>=</strong><em>A</em>**</li>\n<li>零一率：**<em>A</em><strong>∩</strong><em>∅</em><strong>=</strong><em>∅</em>**</li>\n<li>结合率：(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)∩**<em>C</em><strong>=</strong><em>A</em><strong>∩(</strong><em>B</em><strong>∩</strong><em>C</em>**)</li>\n<li>交换率：**<em>A</em><strong>∩</strong><em>B</em><strong>=</strong><em>B</em><strong>∩</strong><em>A</em>**</li>\n</ol>\n</li>\n<li>定理：<ol>\n<li>设**<em>A</em><strong>，</strong><em>B</em><strong>，</strong><em>C</em><strong>是三个集合，则下列分配律成立：<br> <strong><em>A</em><strong>∩(</strong><em>B</em><strong>∪</strong><em>C</em></strong>)=(</strong><em>A</em><strong>∩</strong><em>B</em><strong>)∪(</strong><em>A</em><strong>∩</strong><em>C</em><strong>)<br> <strong><em>A</em><strong>∪(</strong><em>B</em><strong>∩</strong><em>C</em></strong>)=(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)∩(</strong><em>A</em><strong>∪</strong><em>C</em>**)</li>\n<li>设**<em>A</em><strong>，</strong><em>B</em><strong>为两个集合，则下列关系是成立：<br> <strong><em>A</em><strong>∪(</strong><em>A</em><strong>∩</strong><em>B</em></strong>)=</strong><em>A</em>**<br> <strong><em>A</em><strong>∩(</strong><em>A</em><strong>∪</strong><em>B</em></strong>)=<strong><em>A</em></strong></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"3-集合的补\"><a href=\"#3-集合的补\" class=\"headerlink\" title=\"3. 集合的补\"></a>3. 集合的补</h3><ol>\n<li>相对补<ul>\n<li>他是由属于集合**<em>A</em><strong>但不属于</strong><em>B</em><strong>的所有元素构成的，记作</strong><em>A</em><strong>——</strong><em>B</em><strong>（或</strong><em>A</em>** \\ <strong><em>B</em><strong>）。</strong><em>A</em><strong>——</strong><em>B</em><strong>称为集合</strong><em>B</em><strong>关于</strong><em>A</em><strong>的补集或相对补。即</strong><em>A</em><strong>——</strong><em>B</em></strong>={x|x∈**<em>A</em><strong>且x∉</strong><em>B</em>**}.</li>\n<li><strong><em>A</em></strong>={1,2,3} ; <strong><em>B</em></strong>={a,b}<strong><em>A</em><strong>——</strong><em>B</em></strong>={1,2,3}</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181711241.jpg\" alt=\"**_A_**——**_B_**\"></li>\n<li>差运算性质:<ol>\n<li><strong><em>A</em><strong>——</strong><em>A</em></strong>=<strong><em>∅</em></strong></li>\n<li><strong><em>A</em><strong>——</strong><em>∅</em></strong>=<strong><em>A</em></strong></li>\n<li><strong><em>A</em><strong>——</strong><em>U</em></strong>=<strong><em>∅</em></strong></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>绝对补<ul>\n<li>设**<em>U</em><strong>是全集，</strong><em>A</em><strong>是</strong><em>U</em><strong>的一个子集，称</strong><em>U</em><strong>——</strong><em>A</em><strong>为</strong><em>A</em><strong>关于全集的补集，也叫~</strong><em>A</em><strong>或<sup class=\"normal\">—</sup></strong><em>A</em><strong>，即<sup class=\"normal\">—</sup></strong><em>A</em><strong>=</strong><em>U</em><strong>——</strong><em>A</em><strong>={x|x∈</strong><em>U</em><strong>且x∉</strong><em>A</em>**}。</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111181722370.png\" alt=\"**_U_**——**_A_**\"></li>\n<li>补运算性质<ol>\n<li>双重否定定律：<del>(</del><strong><em>A</em></strong>)=<strong><em>A</em></strong></li>\n<li>摩根率：<ul>\n<li>：~<strong><em>∅</em></strong>=<strong><em>U</em></strong></li>\n<li>：~<strong><em>U</em></strong>=<strong><em>∅</em></strong></li>\n</ul>\n</li>\n<li>矛盾律：**<em>A</em><strong>∩(~</strong><em>A</em><strong>)=</strong><em>∅</em>**</li>\n<li>排中率：**<em>A</em><strong>∪(~</strong><em>A</em><strong>)=</strong><em>U</em>**</li>\n</ol>\n</li>\n<li>定理<ul>\n<li><ol>\n<li>设**<em>A</em><strong>，</strong><em>B</em><strong>是两个集合，则下列关系式成立：<br>~(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)=~</strong><em>A</em><strong>∩~</strong><em>B</em>**<br><del>(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)=</del><strong><em>A</em><strong>∪~</strong><em>B</em></strong><br>这个定律是德摩根定律。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>设**<em>A</em>** , <strong><em>B</em></strong> , **<em>C</em>**是任意三个集合 , 则下列关系式成立:</li>\n</ol>\n  <strong><em>A</em><strong>——</strong><em>B</em></strong>=<strong><em>A</em><strong>∩~</strong><em>B</em></strong><br>  <strong><em>A</em><strong>——</strong><em>B</em></strong>=<strong><em>A</em><strong>——(</strong><em>A</em><strong>∩</strong><em>B</em></strong>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>集合的对称差<ul>\n<li>设**<em>A</em><strong>,</strong><em>B</em><strong>是两个集合 , 集合</strong><em>A</em><strong>和</strong><em>B</em><strong>的对称差或环扣,记作</strong><em>A</em><strong>⊕</strong><em>B</em><strong>,它是一个集合 , 其元素或属于</strong><em>A</em><strong>或属于</strong><em>B</em>** , 但不能既属于**<em>A</em><strong>也属于</strong><em>B</em><strong>. 即</strong><em>A</em><strong>⊕</strong><em>B</em><strong>=(</strong><em>A</em><strong>∪</strong><em>B</em><strong>)——(</strong><em>A</em><strong>∩</strong><em>B</em>**) .</li>\n<li><strong><em>A</em></strong>={0,1,2} ; <strong><em>B</em></strong> ={2,3}<strong><em>A</em><strong>⊕</strong><em>B</em></strong>=(<strong><em>A</em><strong>∪</strong><em>B</em></strong>)——(<strong><em>A</em><strong>∩</strong><em>B</em></strong>)={0,1,2,3}——{2}={0,1,3}<strong><em>A</em><strong>⊕</strong><em>B</em></strong>=(<strong><em>A</em><strong>——</strong><em>B</em></strong>)∪(<strong><em>A</em><strong>——</strong><em>B</em></strong>)={0,1}——{3}={0,1,3}</li>\n<li>文氏图<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111221631038.jpg\" alt=\"**_A_**⊕**_B_**\"></li>\n</ul>\n</li>\n</ol>\n"},{"title":"数学","date":"2022-03-20T07:22:19.000Z","_content":"\n来源: [百度百科](https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037)\n> 数学[英语：mathematics，源自古希腊语μθημα（máthēma）；经常被缩写为math或maths]，是研究数量、结构、变化、空间以及信息等概念的一门学科。数学是人类对事物的抽象结构与模式进行严格描述的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。\n","source":"_posts/math/math.md","raw":"---\ntitle: 数学\ncategories: \n - 数学\ndate: 2022-03-20 15:22:19\n---\n\n来源: [百度百科](https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037)\n> 数学[英语：mathematics，源自古希腊语μθημα（máthēma）；经常被缩写为math或maths]，是研究数量、结构、变化、空间以及信息等概念的一门学科。数学是人类对事物的抽象结构与模式进行严格描述的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。\n","slug":"math/math","published":1,"updated":"2022-03-20T07:45:21.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10sameu000bowspeau2ftp0","content":"<p>来源: <a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037\">百度百科</a></p>\n<blockquote>\n<p>数学[英语：mathematics，源自古希腊语μθημα（máthēma）；经常被缩写为math或maths]，是研究数量、结构、变化、空间以及信息等概念的一门学科。数学是人类对事物的抽象结构与模式进行严格描述的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。</p>\n</blockquote>\n","site":{"data":{}},"wordcount":259,"excerpt":"","more":"<p>来源: <a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6/107037\">百度百科</a></p>\n<blockquote>\n<p>数学[英语：mathematics，源自古希腊语μθημα（máthēma）；经常被缩写为math或maths]，是研究数量、结构、变化、空间以及信息等概念的一门学科。数学是人类对事物的抽象结构与模式进行严格描述的一种通用手段，可以应用于现实世界的任何问题，所有的数学对象本质上都是人为定义的。从这个意义上，数学属于形式科学，而不是自然科学。不同的数学家和哲学家对数学的确切范围和定义有一系列的看法。在人类历史发展和社会生活中，数学发挥着不可替代的作用，同时也是学习和研究现代科学技术必不可少的基本工具。</p>\n</blockquote>\n"},{"title":"离散数学-集合论","date":"2022-03-20T08:00:00.000Z","_content":"\n> 深入理解集合、子集、空集、全集的表示方法、集合相等、幂集等基本概念；熟练掌握集合的并、交、补运算；能用文氏图表示集合运算；熟练掌握集合运算的基本定律，能熟练地应用这些定律证明集合恒等式；深刻理解序偶与笛卡尔积的概念；理解复合关系与逆关系的概念，掌握关系的性质，等价关系、偏序关系等的定义，了解关系的闭包的计算方法；理解函数、复合函数和逆函数的概念；了解特征函数和容斥原理。\n\n### 重点和难点\n\n- 集合的概念和基本运算\n- 笛卡尔积和关系的基本运算\n- 复合关系和逆关系\n- 关系的性质，等价关系与偏序关系\n- 关系的闭包（三个闭包）\n- 映射的基本概念\n- 复合映射和逆映射\n\n#### 1. 集合的基本概念\n\n- 数学理论研究概念分为两类\n    - `原始`概念：不能给出确切的定义，只能给出描述如直线。\n    - `派生`概念：可以由其他概念来定义的概念，如平面几何中的正方形可以定义为临边相等的矩形。\n- 集合也是一种原始概念，指具有共同性质的对象汇集成的一个整体。\n- 集合中的每一个对象称为**`集合的元素`**。\n- 通常用大写字母A,B,C...表示集合，用小写字母a，b，c...表示集合中的元素。\n- 若**_A_**表示一个集合，_a_是集合**_A_**中的元素记_a_∈**_A_**，读作a属于A；若_a_不是集合**_A_**中的元素记_a_∉**_A_**，读作啊不属于A。\n- 集合**_A_**的元素个数称为集合的基数或势，可以记为|**_A_**|或（#**_A_**）。\n- 集合的元素个数无限的集合称为`无穷集`或`无线集`，元素个数有限的集合称为`有穷集`或`有限集`。\n\n#### 2. 集合的性质\n\n- `确定性`：给定一个元素_a_和一个集合**_A_**，_a_或者属于或者不属于**_A_**，二者必居其一，且仅居其一。\n- `无序性`: 集合中元素的排列次序是任意的.\n- `互异性`：元素_a_在集合**_A_**中无论重复多少次，_a_只能看作**_A_**中的一个元素。\n- `抽象性`：集合中元素可以是具体的，也可以是抽象的，甚至一个集合也可以作为另一个集合的元素。\n\n#### 3. 集合的表示方法\n\n- 列举法\n    - 把集合中的所有元素--列举出来，或列出足够多的元素以及反映出集合中成员的特征，元素之间用逗号分开，并用大括号括起来。\n    - B={a,b,c,d,e,f,...,x,y,z}\n- 描述法\n    - 把集合中的元素所满足的条件或具有的性质描述出来，即将条件或性质用文字或符号在花括号内竖线后面表示出来。\n    - C={x|x∈Z且3<x≤6} ,即C={4,5,6}\n- 文氏图法\n    - 用一个大的矩形表示全集U（最大的集合--所涉及的全部集合都是这个集合的子集），在矩形中花一些圆或其它的几何图形来表示集合，有时也用一些点来表示集合的特定元素。\n    - 集合A={1，2，3} 文氏图法如下图↓\n        ![](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111171523746.png)\n- 递归法 \n    - 通过计算规则定义集合中的元素。首先给出该集合的初始元素；然后给出由集合中已知元素构造其他元素的方法；最后有限次使用前面的步骤得到元素是集合中的元素。\n    - 斐波那契数列：a0=1，a1=1，an=an-1+an-2\n\n#### 4. 集合间的关系\n\n1. 子集\n> `子集`定义：给定两个集合**_A_**和**_B_**，若**_A_**中的`任意`元素都属于**_B_**，则称**_A_**是**_B_**的`子集`，或称**_A_**包含于**_B_**，或称**_B_**包含**_A_**，通常基座**_A_**⊆**_B_**,或**_B_**⊇**_A_**.\n- 集合A={1,2,3,4,5},B={1,3},C={1,3,5}则有B⊆A，C⊆A，B⊆C\n2. 集合相等\n> `集合相等`定义：如果两个集合**_A_**和**_B_**的元素完全相同，则称这两个集合`完全相等`，记**_A_**=**_B_**\n- A={1,2,3,4},B={4,3,2,1} A=B\n- 性质：\n    - `自反性`：对于任意集合**_A_**，均为**_A_**⊆**_A_**。\n    - `反对称性`：对于任意集合**_A_**和**_B_**，若**_A_**⊆**_B_**且**_B_**⊆**_A_**，则**_A_**=**_B_**。\n    - `传递性`：对于任意集合**_A_**，**_B_**和**_C_**，若**_A_**⊆**_B_**，**_B_**⊆**_C_**，则**_A_**⊆**_C_**\n- 定理：对于任意两个集合**_A_**，**_B_**，**_A_**=**_B_**的充要条件是**_A_**⊆**_B_**且**_B_**⊆**_A_**\n3. 真子集\n> 定义：如果集合**_A_**是集合**_B_** 的子集，但**_A_**和**_B_**不相等，也就是说**_B_**中至少有一个元素不属于**_A_**，则称**_A_**是**_B_**的`真子集`，也称**_B_**真包含**_A_**，或**_A_**真包含于**_B_**，记作**_A_**⊂**_B_**或**_B_**⊃**_A_**\n4. 全集\n> 定义：在一个具体问题中，如果涉及的集合都是某个集合的子集，则这个集合称为`全集`或`论域`，记作**_U_**或（**_E_**）\n5. 空集\n> 定义：不含任何元素的集合，称为`空集`，记为**`∅`**，有时也用`{}`来表示。\n- 定理：空集是一切集合的子集。即对于任意的集合**_A_**,均有`∅ ⊆`**_`A`_**\n- 定理：空集是唯一的\n6. 幂集\n> 定义：设**_A_**是集合，**_A_**的所有子集构成的集合称为**_A_**的`幂集`，记作`p(A)`或`2`<sup class=\"normal\">`A`</sup>\n7. 平凡子集\n> 定义：对任意集合**_A_**，有∅ ∈**_p(A)_**和**_A_**∈**_p(A)_**，在**_A_**的所有子集中，**_A_**和**_∅_**这两个子集又叫`平凡子集`\n8. 定理：设**_A_**是个有限集且|**_A_**|=n，则**_p(A)_**=2<sup class=\"normal\">n</sup>\n","source":"_posts/math/discrete2.md","raw":"---\ntitle: 离散数学-集合论\ncategories: \n - [数学,离散数学]\ntags: \n - 离散数学\ndate: 2022-03-20 16:00:00\n---\n\n> 深入理解集合、子集、空集、全集的表示方法、集合相等、幂集等基本概念；熟练掌握集合的并、交、补运算；能用文氏图表示集合运算；熟练掌握集合运算的基本定律，能熟练地应用这些定律证明集合恒等式；深刻理解序偶与笛卡尔积的概念；理解复合关系与逆关系的概念，掌握关系的性质，等价关系、偏序关系等的定义，了解关系的闭包的计算方法；理解函数、复合函数和逆函数的概念；了解特征函数和容斥原理。\n\n### 重点和难点\n\n- 集合的概念和基本运算\n- 笛卡尔积和关系的基本运算\n- 复合关系和逆关系\n- 关系的性质，等价关系与偏序关系\n- 关系的闭包（三个闭包）\n- 映射的基本概念\n- 复合映射和逆映射\n\n#### 1. 集合的基本概念\n\n- 数学理论研究概念分为两类\n    - `原始`概念：不能给出确切的定义，只能给出描述如直线。\n    - `派生`概念：可以由其他概念来定义的概念，如平面几何中的正方形可以定义为临边相等的矩形。\n- 集合也是一种原始概念，指具有共同性质的对象汇集成的一个整体。\n- 集合中的每一个对象称为**`集合的元素`**。\n- 通常用大写字母A,B,C...表示集合，用小写字母a，b，c...表示集合中的元素。\n- 若**_A_**表示一个集合，_a_是集合**_A_**中的元素记_a_∈**_A_**，读作a属于A；若_a_不是集合**_A_**中的元素记_a_∉**_A_**，读作啊不属于A。\n- 集合**_A_**的元素个数称为集合的基数或势，可以记为|**_A_**|或（#**_A_**）。\n- 集合的元素个数无限的集合称为`无穷集`或`无线集`，元素个数有限的集合称为`有穷集`或`有限集`。\n\n#### 2. 集合的性质\n\n- `确定性`：给定一个元素_a_和一个集合**_A_**，_a_或者属于或者不属于**_A_**，二者必居其一，且仅居其一。\n- `无序性`: 集合中元素的排列次序是任意的.\n- `互异性`：元素_a_在集合**_A_**中无论重复多少次，_a_只能看作**_A_**中的一个元素。\n- `抽象性`：集合中元素可以是具体的，也可以是抽象的，甚至一个集合也可以作为另一个集合的元素。\n\n#### 3. 集合的表示方法\n\n- 列举法\n    - 把集合中的所有元素--列举出来，或列出足够多的元素以及反映出集合中成员的特征，元素之间用逗号分开，并用大括号括起来。\n    - B={a,b,c,d,e,f,...,x,y,z}\n- 描述法\n    - 把集合中的元素所满足的条件或具有的性质描述出来，即将条件或性质用文字或符号在花括号内竖线后面表示出来。\n    - C={x|x∈Z且3<x≤6} ,即C={4,5,6}\n- 文氏图法\n    - 用一个大的矩形表示全集U（最大的集合--所涉及的全部集合都是这个集合的子集），在矩形中花一些圆或其它的几何图形来表示集合，有时也用一些点来表示集合的特定元素。\n    - 集合A={1，2，3} 文氏图法如下图↓\n        ![](https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111171523746.png)\n- 递归法 \n    - 通过计算规则定义集合中的元素。首先给出该集合的初始元素；然后给出由集合中已知元素构造其他元素的方法；最后有限次使用前面的步骤得到元素是集合中的元素。\n    - 斐波那契数列：a0=1，a1=1，an=an-1+an-2\n\n#### 4. 集合间的关系\n\n1. 子集\n> `子集`定义：给定两个集合**_A_**和**_B_**，若**_A_**中的`任意`元素都属于**_B_**，则称**_A_**是**_B_**的`子集`，或称**_A_**包含于**_B_**，或称**_B_**包含**_A_**，通常基座**_A_**⊆**_B_**,或**_B_**⊇**_A_**.\n- 集合A={1,2,3,4,5},B={1,3},C={1,3,5}则有B⊆A，C⊆A，B⊆C\n2. 集合相等\n> `集合相等`定义：如果两个集合**_A_**和**_B_**的元素完全相同，则称这两个集合`完全相等`，记**_A_**=**_B_**\n- A={1,2,3,4},B={4,3,2,1} A=B\n- 性质：\n    - `自反性`：对于任意集合**_A_**，均为**_A_**⊆**_A_**。\n    - `反对称性`：对于任意集合**_A_**和**_B_**，若**_A_**⊆**_B_**且**_B_**⊆**_A_**，则**_A_**=**_B_**。\n    - `传递性`：对于任意集合**_A_**，**_B_**和**_C_**，若**_A_**⊆**_B_**，**_B_**⊆**_C_**，则**_A_**⊆**_C_**\n- 定理：对于任意两个集合**_A_**，**_B_**，**_A_**=**_B_**的充要条件是**_A_**⊆**_B_**且**_B_**⊆**_A_**\n3. 真子集\n> 定义：如果集合**_A_**是集合**_B_** 的子集，但**_A_**和**_B_**不相等，也就是说**_B_**中至少有一个元素不属于**_A_**，则称**_A_**是**_B_**的`真子集`，也称**_B_**真包含**_A_**，或**_A_**真包含于**_B_**，记作**_A_**⊂**_B_**或**_B_**⊃**_A_**\n4. 全集\n> 定义：在一个具体问题中，如果涉及的集合都是某个集合的子集，则这个集合称为`全集`或`论域`，记作**_U_**或（**_E_**）\n5. 空集\n> 定义：不含任何元素的集合，称为`空集`，记为**`∅`**，有时也用`{}`来表示。\n- 定理：空集是一切集合的子集。即对于任意的集合**_A_**,均有`∅ ⊆`**_`A`_**\n- 定理：空集是唯一的\n6. 幂集\n> 定义：设**_A_**是集合，**_A_**的所有子集构成的集合称为**_A_**的`幂集`，记作`p(A)`或`2`<sup class=\"normal\">`A`</sup>\n7. 平凡子集\n> 定义：对任意集合**_A_**，有∅ ∈**_p(A)_**和**_A_**∈**_p(A)_**，在**_A_**的所有子集中，**_A_**和**_∅_**这两个子集又叫`平凡子集`\n8. 定理：设**_A_**是个有限集且|**_A_**|=n，则**_p(A)_**=2<sup class=\"normal\">n</sup>\n","slug":"math/discrete2","published":1,"updated":"2022-03-21T13:21:13.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samev000cowspba45hi04","content":"<blockquote>\n<p>深入理解集合、子集、空集、全集的表示方法、集合相等、幂集等基本概念；熟练掌握集合的并、交、补运算；能用文氏图表示集合运算；熟练掌握集合运算的基本定律，能熟练地应用这些定律证明集合恒等式；深刻理解序偶与笛卡尔积的概念；理解复合关系与逆关系的概念，掌握关系的性质，等价关系、偏序关系等的定义，了解关系的闭包的计算方法；理解函数、复合函数和逆函数的概念；了解特征函数和容斥原理。</p>\n</blockquote>\n<h3 id=\"重点和难点\"><a href=\"#重点和难点\" class=\"headerlink\" title=\"重点和难点\"></a>重点和难点</h3><ul>\n<li>集合的概念和基本运算</li>\n<li>笛卡尔积和关系的基本运算</li>\n<li>复合关系和逆关系</li>\n<li>关系的性质，等价关系与偏序关系</li>\n<li>关系的闭包（三个闭包）</li>\n<li>映射的基本概念</li>\n<li>复合映射和逆映射</li>\n</ul>\n<h4 id=\"1-集合的基本概念\"><a href=\"#1-集合的基本概念\" class=\"headerlink\" title=\"1. 集合的基本概念\"></a>1. 集合的基本概念</h4><ul>\n<li>数学理论研究概念分为两类<ul>\n<li><code>原始</code>概念：不能给出确切的定义，只能给出描述如直线。</li>\n<li><code>派生</code>概念：可以由其他概念来定义的概念，如平面几何中的正方形可以定义为临边相等的矩形。</li>\n</ul>\n</li>\n<li>集合也是一种原始概念，指具有共同性质的对象汇集成的一个整体。</li>\n<li>集合中的每一个对象称为**<code>集合的元素</code>**。</li>\n<li>通常用大写字母A,B,C…表示集合，用小写字母a，b，c…表示集合中的元素。</li>\n<li>若**<em>A</em><strong>表示一个集合，_a_是集合</strong><em>A</em><strong>中的元素记_a_∈</strong><em>A</em><strong>，读作a属于A；若_a_不是集合</strong><em>A</em><strong>中的元素记_a_∉</strong><em>A</em>**，读作啊不属于A。</li>\n<li>集合**<em>A</em><strong>的元素个数称为集合的基数或势，可以记为|</strong><em>A</em><strong>|或（#</strong><em>A</em>**）。</li>\n<li>集合的元素个数无限的集合称为<code>无穷集</code>或<code>无线集</code>，元素个数有限的集合称为<code>有穷集</code>或<code>有限集</code>。</li>\n</ul>\n<h4 id=\"2-集合的性质\"><a href=\"#2-集合的性质\" class=\"headerlink\" title=\"2. 集合的性质\"></a>2. 集合的性质</h4><ul>\n<li><code>确定性</code>：给定一个元素_a_和一个集合**<em>A</em><strong>，_a_或者属于或者不属于</strong><em>A</em>**，二者必居其一，且仅居其一。</li>\n<li><code>无序性</code>: 集合中元素的排列次序是任意的.</li>\n<li><code>互异性</code>：元素_a_在集合**<em>A</em><strong>中无论重复多少次，_a_只能看作</strong><em>A</em>**中的一个元素。</li>\n<li><code>抽象性</code>：集合中元素可以是具体的，也可以是抽象的，甚至一个集合也可以作为另一个集合的元素。</li>\n</ul>\n<h4 id=\"3-集合的表示方法\"><a href=\"#3-集合的表示方法\" class=\"headerlink\" title=\"3. 集合的表示方法\"></a>3. 集合的表示方法</h4><ul>\n<li>列举法<ul>\n<li>把集合中的所有元素–列举出来，或列出足够多的元素以及反映出集合中成员的特征，元素之间用逗号分开，并用大括号括起来。</li>\n<li>B={a,b,c,d,e,f,…,x,y,z}</li>\n</ul>\n</li>\n<li>描述法<ul>\n<li>把集合中的元素所满足的条件或具有的性质描述出来，即将条件或性质用文字或符号在花括号内竖线后面表示出来。</li>\n<li>C={x|x∈Z且3&lt;x≤6} ,即C={4,5,6}</li>\n</ul>\n</li>\n<li>文氏图法<ul>\n<li>用一个大的矩形表示全集U（最大的集合–所涉及的全部集合都是这个集合的子集），在矩形中花一些圆或其它的几何图形来表示集合，有时也用一些点来表示集合的特定元素。</li>\n<li>集合A={1，2，3} 文氏图法如下图↓<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111171523746.png\"></li>\n</ul>\n</li>\n<li>递归法 <ul>\n<li>通过计算规则定义集合中的元素。首先给出该集合的初始元素；然后给出由集合中已知元素构造其他元素的方法；最后有限次使用前面的步骤得到元素是集合中的元素。</li>\n<li>斐波那契数列：a0=1，a1=1，an=an-1+an-2</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-集合间的关系\"><a href=\"#4-集合间的关系\" class=\"headerlink\" title=\"4. 集合间的关系\"></a>4. 集合间的关系</h4><ol>\n<li>子集<blockquote>\n<p><code>子集</code>定义：给定两个集合**<em>A</em><strong>和</strong><em>B</em><strong>，若</strong><em>A</em><strong>中的<code>任意</code>元素都属于</strong><em>B</em><strong>，则称</strong><em>A</em><strong>是</strong><em>B</em><strong>的<code>子集</code>，或称</strong><em>A</em><strong>包含于</strong><em>B</em><strong>，或称</strong><em>B</em><strong>包含</strong><em>A</em><strong>，通常基座</strong><em>A</em><strong>⊆</strong><em>B</em><strong>,或</strong><em>B</em><strong>⊇</strong><em>A</em>**.</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>集合A={1,2,3,4,5},B={1,3},C={1,3,5}则有B⊆A，C⊆A，B⊆C</li>\n</ul>\n<ol start=\"2\">\n<li>集合相等<blockquote>\n<p><code>集合相等</code>定义：如果两个集合**<em>A</em><strong>和</strong><em>B</em><strong>的元素完全相同，则称这两个集合<code>完全相等</code>，记</strong><em>A</em><strong>=</strong><em>B</em>**</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>A={1,2,3,4},B={4,3,2,1} A=B</li>\n<li>性质：<ul>\n<li><code>自反性</code>：对于任意集合**<em>A</em><strong>，均为</strong><em>A</em><strong>⊆</strong><em>A</em>**。</li>\n<li><code>反对称性</code>：对于任意集合**<em>A</em><strong>和</strong><em>B</em><strong>，若</strong><em>A</em><strong>⊆</strong><em>B</em><strong>且</strong><em>B</em><strong>⊆</strong><em>A</em><strong>，则</strong><em>A</em><strong>=</strong><em>B</em>**。</li>\n<li><code>传递性</code>：对于任意集合**<em>A</em><strong>，</strong><em>B</em><strong>和</strong><em>C</em><strong>，若</strong><em>A</em><strong>⊆</strong><em>B</em><strong>，</strong><em>B</em><strong>⊆</strong><em>C</em><strong>，则</strong><em>A</em><strong>⊆</strong><em>C</em>**</li>\n</ul>\n</li>\n<li>定理：对于任意两个集合**<em>A</em><strong>，</strong><em>B</em><strong>，</strong><em>A</em><strong>=</strong><em>B</em><strong>的充要条件是</strong><em>A</em><strong>⊆</strong><em>B</em><strong>且</strong><em>B</em><strong>⊆</strong><em>A</em>**</li>\n</ul>\n<ol start=\"3\">\n<li>真子集<blockquote>\n<p>定义：如果集合**<em>A</em><strong>是集合</strong><em>B</em>** 的子集，但**<em>A</em><strong>和</strong><em>B</em><strong>不相等，也就是说</strong><em>B</em><strong>中至少有一个元素不属于</strong><em>A</em><strong>，则称</strong><em>A</em><strong>是</strong><em>B</em><strong>的<code>真子集</code>，也称</strong><em>B</em><strong>真包含</strong><em>A</em><strong>，或</strong><em>A</em><strong>真包含于</strong><em>B</em><strong>，记作</strong><em>A</em><strong>⊂</strong><em>B</em><strong>或</strong><em>B</em><strong>⊃</strong><em>A</em>**</p>\n</blockquote>\n</li>\n<li>全集<blockquote>\n<p>定义：在一个具体问题中，如果涉及的集合都是某个集合的子集，则这个集合称为<code>全集</code>或<code>论域</code>，记作**<em>U</em><strong>或（</strong><em>E</em>**）</p>\n</blockquote>\n</li>\n<li>空集<blockquote>\n<p>定义：不含任何元素的集合，称为<code>空集</code>，记为**<code>∅</code>**，有时也用<code>&#123;&#125;</code>来表示。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>定理：空集是一切集合的子集。即对于任意的集合**<em>A</em><strong>,均有<code>∅ ⊆</code></strong><em><code>A</code></em>**</li>\n<li>定理：空集是唯一的</li>\n</ul>\n<ol start=\"6\">\n<li>幂集<blockquote>\n<p>定义：设**<em>A</em><strong>是集合，</strong><em>A</em><strong>的所有子集构成的集合称为</strong><em>A</em>**的<code>幂集</code>，记作<code>p(A)</code>或<code>2</code><sup class=\"normal\"><code>A</code></sup></p>\n</blockquote>\n</li>\n<li>平凡子集<blockquote>\n<p>定义：对任意集合**<em>A</em><strong>，有∅ ∈</strong><em>p(A)</em><strong>和</strong><em>A</em><strong>∈</strong><em>p(A)</em><strong>，在</strong><em>A</em><strong>的所有子集中，</strong><em>A</em><strong>和</strong><em>∅</em>**这两个子集又叫<code>平凡子集</code></p>\n</blockquote>\n</li>\n<li>定理：设**<em>A</em><strong>是个有限集且|</strong><em>A</em><strong>|=n，则</strong><em>p(A)</em>**=2<sup class=\"normal\">n</sup></li>\n</ol>\n","site":{"data":{}},"wordcount":1810,"excerpt":"","more":"<blockquote>\n<p>深入理解集合、子集、空集、全集的表示方法、集合相等、幂集等基本概念；熟练掌握集合的并、交、补运算；能用文氏图表示集合运算；熟练掌握集合运算的基本定律，能熟练地应用这些定律证明集合恒等式；深刻理解序偶与笛卡尔积的概念；理解复合关系与逆关系的概念，掌握关系的性质，等价关系、偏序关系等的定义，了解关系的闭包的计算方法；理解函数、复合函数和逆函数的概念；了解特征函数和容斥原理。</p>\n</blockquote>\n<h3 id=\"重点和难点\"><a href=\"#重点和难点\" class=\"headerlink\" title=\"重点和难点\"></a>重点和难点</h3><ul>\n<li>集合的概念和基本运算</li>\n<li>笛卡尔积和关系的基本运算</li>\n<li>复合关系和逆关系</li>\n<li>关系的性质，等价关系与偏序关系</li>\n<li>关系的闭包（三个闭包）</li>\n<li>映射的基本概念</li>\n<li>复合映射和逆映射</li>\n</ul>\n<h4 id=\"1-集合的基本概念\"><a href=\"#1-集合的基本概念\" class=\"headerlink\" title=\"1. 集合的基本概念\"></a>1. 集合的基本概念</h4><ul>\n<li>数学理论研究概念分为两类<ul>\n<li><code>原始</code>概念：不能给出确切的定义，只能给出描述如直线。</li>\n<li><code>派生</code>概念：可以由其他概念来定义的概念，如平面几何中的正方形可以定义为临边相等的矩形。</li>\n</ul>\n</li>\n<li>集合也是一种原始概念，指具有共同性质的对象汇集成的一个整体。</li>\n<li>集合中的每一个对象称为**<code>集合的元素</code>**。</li>\n<li>通常用大写字母A,B,C…表示集合，用小写字母a，b，c…表示集合中的元素。</li>\n<li>若**<em>A</em><strong>表示一个集合，_a_是集合</strong><em>A</em><strong>中的元素记_a_∈</strong><em>A</em><strong>，读作a属于A；若_a_不是集合</strong><em>A</em><strong>中的元素记_a_∉</strong><em>A</em>**，读作啊不属于A。</li>\n<li>集合**<em>A</em><strong>的元素个数称为集合的基数或势，可以记为|</strong><em>A</em><strong>|或（#</strong><em>A</em>**）。</li>\n<li>集合的元素个数无限的集合称为<code>无穷集</code>或<code>无线集</code>，元素个数有限的集合称为<code>有穷集</code>或<code>有限集</code>。</li>\n</ul>\n<h4 id=\"2-集合的性质\"><a href=\"#2-集合的性质\" class=\"headerlink\" title=\"2. 集合的性质\"></a>2. 集合的性质</h4><ul>\n<li><code>确定性</code>：给定一个元素_a_和一个集合**<em>A</em><strong>，_a_或者属于或者不属于</strong><em>A</em>**，二者必居其一，且仅居其一。</li>\n<li><code>无序性</code>: 集合中元素的排列次序是任意的.</li>\n<li><code>互异性</code>：元素_a_在集合**<em>A</em><strong>中无论重复多少次，_a_只能看作</strong><em>A</em>**中的一个元素。</li>\n<li><code>抽象性</code>：集合中元素可以是具体的，也可以是抽象的，甚至一个集合也可以作为另一个集合的元素。</li>\n</ul>\n<h4 id=\"3-集合的表示方法\"><a href=\"#3-集合的表示方法\" class=\"headerlink\" title=\"3. 集合的表示方法\"></a>3. 集合的表示方法</h4><ul>\n<li>列举法<ul>\n<li>把集合中的所有元素–列举出来，或列出足够多的元素以及反映出集合中成员的特征，元素之间用逗号分开，并用大括号括起来。</li>\n<li>B={a,b,c,d,e,f,…,x,y,z}</li>\n</ul>\n</li>\n<li>描述法<ul>\n<li>把集合中的元素所满足的条件或具有的性质描述出来，即将条件或性质用文字或符号在花括号内竖线后面表示出来。</li>\n<li>C={x|x∈Z且3&lt;x≤6} ,即C={4,5,6}</li>\n</ul>\n</li>\n<li>文氏图法<ul>\n<li>用一个大的矩形表示全集U（最大的集合–所涉及的全部集合都是这个集合的子集），在矩形中花一些圆或其它的几何图形来表示集合，有时也用一些点来表示集合的特定元素。</li>\n<li>集合A={1，2，3} 文氏图法如下图↓<br>  <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/img/202111171523746.png\"></li>\n</ul>\n</li>\n<li>递归法 <ul>\n<li>通过计算规则定义集合中的元素。首先给出该集合的初始元素；然后给出由集合中已知元素构造其他元素的方法；最后有限次使用前面的步骤得到元素是集合中的元素。</li>\n<li>斐波那契数列：a0=1，a1=1，an=an-1+an-2</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-集合间的关系\"><a href=\"#4-集合间的关系\" class=\"headerlink\" title=\"4. 集合间的关系\"></a>4. 集合间的关系</h4><ol>\n<li>子集<blockquote>\n<p><code>子集</code>定义：给定两个集合**<em>A</em><strong>和</strong><em>B</em><strong>，若</strong><em>A</em><strong>中的<code>任意</code>元素都属于</strong><em>B</em><strong>，则称</strong><em>A</em><strong>是</strong><em>B</em><strong>的<code>子集</code>，或称</strong><em>A</em><strong>包含于</strong><em>B</em><strong>，或称</strong><em>B</em><strong>包含</strong><em>A</em><strong>，通常基座</strong><em>A</em><strong>⊆</strong><em>B</em><strong>,或</strong><em>B</em><strong>⊇</strong><em>A</em>**.</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>集合A={1,2,3,4,5},B={1,3},C={1,3,5}则有B⊆A，C⊆A，B⊆C</li>\n</ul>\n<ol start=\"2\">\n<li>集合相等<blockquote>\n<p><code>集合相等</code>定义：如果两个集合**<em>A</em><strong>和</strong><em>B</em><strong>的元素完全相同，则称这两个集合<code>完全相等</code>，记</strong><em>A</em><strong>=</strong><em>B</em>**</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>A={1,2,3,4},B={4,3,2,1} A=B</li>\n<li>性质：<ul>\n<li><code>自反性</code>：对于任意集合**<em>A</em><strong>，均为</strong><em>A</em><strong>⊆</strong><em>A</em>**。</li>\n<li><code>反对称性</code>：对于任意集合**<em>A</em><strong>和</strong><em>B</em><strong>，若</strong><em>A</em><strong>⊆</strong><em>B</em><strong>且</strong><em>B</em><strong>⊆</strong><em>A</em><strong>，则</strong><em>A</em><strong>=</strong><em>B</em>**。</li>\n<li><code>传递性</code>：对于任意集合**<em>A</em><strong>，</strong><em>B</em><strong>和</strong><em>C</em><strong>，若</strong><em>A</em><strong>⊆</strong><em>B</em><strong>，</strong><em>B</em><strong>⊆</strong><em>C</em><strong>，则</strong><em>A</em><strong>⊆</strong><em>C</em>**</li>\n</ul>\n</li>\n<li>定理：对于任意两个集合**<em>A</em><strong>，</strong><em>B</em><strong>，</strong><em>A</em><strong>=</strong><em>B</em><strong>的充要条件是</strong><em>A</em><strong>⊆</strong><em>B</em><strong>且</strong><em>B</em><strong>⊆</strong><em>A</em>**</li>\n</ul>\n<ol start=\"3\">\n<li>真子集<blockquote>\n<p>定义：如果集合**<em>A</em><strong>是集合</strong><em>B</em>** 的子集，但**<em>A</em><strong>和</strong><em>B</em><strong>不相等，也就是说</strong><em>B</em><strong>中至少有一个元素不属于</strong><em>A</em><strong>，则称</strong><em>A</em><strong>是</strong><em>B</em><strong>的<code>真子集</code>，也称</strong><em>B</em><strong>真包含</strong><em>A</em><strong>，或</strong><em>A</em><strong>真包含于</strong><em>B</em><strong>，记作</strong><em>A</em><strong>⊂</strong><em>B</em><strong>或</strong><em>B</em><strong>⊃</strong><em>A</em>**</p>\n</blockquote>\n</li>\n<li>全集<blockquote>\n<p>定义：在一个具体问题中，如果涉及的集合都是某个集合的子集，则这个集合称为<code>全集</code>或<code>论域</code>，记作**<em>U</em><strong>或（</strong><em>E</em>**）</p>\n</blockquote>\n</li>\n<li>空集<blockquote>\n<p>定义：不含任何元素的集合，称为<code>空集</code>，记为**<code>∅</code>**，有时也用<code>&#123;&#125;</code>来表示。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>定理：空集是一切集合的子集。即对于任意的集合**<em>A</em><strong>,均有<code>∅ ⊆</code></strong><em><code>A</code></em>**</li>\n<li>定理：空集是唯一的</li>\n</ul>\n<ol start=\"6\">\n<li>幂集<blockquote>\n<p>定义：设**<em>A</em><strong>是集合，</strong><em>A</em><strong>的所有子集构成的集合称为</strong><em>A</em>**的<code>幂集</code>，记作<code>p(A)</code>或<code>2</code><sup class=\"normal\"><code>A</code></sup></p>\n</blockquote>\n</li>\n<li>平凡子集<blockquote>\n<p>定义：对任意集合**<em>A</em><strong>，有∅ ∈</strong><em>p(A)</em><strong>和</strong><em>A</em><strong>∈</strong><em>p(A)</em><strong>，在</strong><em>A</em><strong>的所有子集中，</strong><em>A</em><strong>和</strong><em>∅</em>**这两个子集又叫<code>平凡子集</code></p>\n</blockquote>\n</li>\n<li>定理：设**<em>A</em><strong>是个有限集且|</strong><em>A</em><strong>|=n，则</strong><em>p(A)</em>**=2<sup class=\"normal\">n</sup></li>\n</ol>\n"},{"title":"java基础一","date":"2022-03-20T09:01:00.000Z","_content":"\n### java的特性和优势\n\n1. 简单性\n2. 面向对象\n3. 可移植性\n4. 高性能\n5. 分布式\n6. 动态性\n7. 多线程\n8. 安全性\n9. 健壮性\n10. 使用的人多\n\n### JDK,JRE,JVM的关系\n\n1. JDK  : Java Development Kit java 开发者工具包含JRE和JVM\n\n2. JRE  : Java Runtime Environment JAVA 运行环境包含JVM\n\n3. JVM : Java Virtual Machine JAVA 虚拟机\n\n### 删除JDK( windows 环境)\n\n1. 删除  java ~~***环境变量***~~ ( JAVA_HOME , Path 下 JAVA相关)\n2. 删除 java 目录 或 卸载 java\n3. java -version 测试\n\n### 安装JDK ( windows环境)\n\n1. [根据不同系统下载对应版本下载JDK8](https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html) \n\n2. 双击安装 JDK\n\n3. 记住安装目录\n\n4. 配置环境变量\n\n   1. 此电脑->属性->高级系统设置->环境变量\n   2. 系统变量添加 JAVA_HOME \n      - 变量名: JAVA_HOME 变量值 : E:\\Tools\\JDK-8\n   3. 用户变量 在Path 下添加 \n      - %JAVA_HOME%\\bin\n      - %JAVA_HOME%\\jre\\bin\n\n   4. 打开 cmd java -version 测试 JDK是否安装成功\n\n### Hello World!\n\n1. 新建文件 HelloWorld.java 首字母大写\n\n```java\npublic class HelloWorld{\n    public static void main(String[] ages){\n        System.out.print(\"Hello World!\");\n    }\n}\n```\n\n2. 在当前文件夹目录下运行 **javac HelloWorld.java** 在当前文件夹编译生成 **HelloWorld.class**\n3. 在当前文件夹目录下运行 **java HelloWorld.class** 控制台打印 ***Hello World!***\n\n### JAVA 程序运行机制\n\njava 及时解释型也是编译型语言\n\n**运行机制**\n\n原程序 `*.java`文件 通过 --> Java编译器 转换为 --> 字节码`*.claa` 文件 --> 放入虚拟机的 类装载器中 --> 字节码校验器 --> 解释器 --> 操作系统平台\n\n先编译 --> 在解释\n\n### 安装运行软件\n\nidea\n\n### 来源\n\n- 哔哩哔哩 [遇见狂神说](https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0)\n","source":"_posts/java/basic1.md","raw":"---\ntitle: java基础一\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:01:00\n---\n\n### java的特性和优势\n\n1. 简单性\n2. 面向对象\n3. 可移植性\n4. 高性能\n5. 分布式\n6. 动态性\n7. 多线程\n8. 安全性\n9. 健壮性\n10. 使用的人多\n\n### JDK,JRE,JVM的关系\n\n1. JDK  : Java Development Kit java 开发者工具包含JRE和JVM\n\n2. JRE  : Java Runtime Environment JAVA 运行环境包含JVM\n\n3. JVM : Java Virtual Machine JAVA 虚拟机\n\n### 删除JDK( windows 环境)\n\n1. 删除  java ~~***环境变量***~~ ( JAVA_HOME , Path 下 JAVA相关)\n2. 删除 java 目录 或 卸载 java\n3. java -version 测试\n\n### 安装JDK ( windows环境)\n\n1. [根据不同系统下载对应版本下载JDK8](https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html) \n\n2. 双击安装 JDK\n\n3. 记住安装目录\n\n4. 配置环境变量\n\n   1. 此电脑->属性->高级系统设置->环境变量\n   2. 系统变量添加 JAVA_HOME \n      - 变量名: JAVA_HOME 变量值 : E:\\Tools\\JDK-8\n   3. 用户变量 在Path 下添加 \n      - %JAVA_HOME%\\bin\n      - %JAVA_HOME%\\jre\\bin\n\n   4. 打开 cmd java -version 测试 JDK是否安装成功\n\n### Hello World!\n\n1. 新建文件 HelloWorld.java 首字母大写\n\n```java\npublic class HelloWorld{\n    public static void main(String[] ages){\n        System.out.print(\"Hello World!\");\n    }\n}\n```\n\n2. 在当前文件夹目录下运行 **javac HelloWorld.java** 在当前文件夹编译生成 **HelloWorld.class**\n3. 在当前文件夹目录下运行 **java HelloWorld.class** 控制台打印 ***Hello World!***\n\n### JAVA 程序运行机制\n\njava 及时解释型也是编译型语言\n\n**运行机制**\n\n原程序 `*.java`文件 通过 --> Java编译器 转换为 --> 字节码`*.claa` 文件 --> 放入虚拟机的 类装载器中 --> 字节码校验器 --> 解释器 --> 操作系统平台\n\n先编译 --> 在解释\n\n### 安装运行软件\n\nidea\n\n### 来源\n\n- 哔哩哔哩 [遇见狂神说](https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0)\n","slug":"java/basic1","published":1,"updated":"2022-03-21T13:18:02.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samex000howspcm8b5r7c","content":"<h3 id=\"java的特性和优势\"><a href=\"#java的特性和优势\" class=\"headerlink\" title=\"java的特性和优势\"></a>java的特性和优势</h3><ol>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n<li>使用的人多</li>\n</ol>\n<h3 id=\"JDK-JRE-JVM的关系\"><a href=\"#JDK-JRE-JVM的关系\" class=\"headerlink\" title=\"JDK,JRE,JVM的关系\"></a>JDK,JRE,JVM的关系</h3><ol>\n<li><p>JDK  : Java Development Kit java 开发者工具包含JRE和JVM</p>\n</li>\n<li><p>JRE  : Java Runtime Environment JAVA 运行环境包含JVM</p>\n</li>\n<li><p>JVM : Java Virtual Machine JAVA 虚拟机</p>\n</li>\n</ol>\n<h3 id=\"删除JDK-windows-环境\"><a href=\"#删除JDK-windows-环境\" class=\"headerlink\" title=\"删除JDK( windows 环境)\"></a>删除JDK( windows 环境)</h3><ol>\n<li>删除  java <del><em><strong>环境变量</strong></em></del> ( JAVA_HOME , Path 下 JAVA相关)</li>\n<li>删除 java 目录 或 卸载 java</li>\n<li>java -version 测试</li>\n</ol>\n<h3 id=\"安装JDK-windows环境\"><a href=\"#安装JDK-windows环境\" class=\"headerlink\" title=\"安装JDK ( windows环境)\"></a>安装JDK ( windows环境)</h3><ol>\n<li><p><a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\">根据不同系统下载对应版本下载JDK8</a> </p>\n</li>\n<li><p>双击安装 JDK</p>\n</li>\n<li><p>记住安装目录</p>\n</li>\n<li><p>配置环境变量</p>\n<ol>\n<li><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p>\n</li>\n<li><p>系统变量添加 JAVA_HOME </p>\n<ul>\n<li>变量名: JAVA_HOME 变量值 : E:\\Tools\\JDK-8</li>\n</ul>\n</li>\n<li><p>用户变量 在Path 下添加 </p>\n<ul>\n<li>%JAVA_HOME%\\bin</li>\n<li>%JAVA_HOME%\\jre\\bin</li>\n</ul>\n</li>\n<li><p>打开 cmd java -version 测试 JDK是否安装成功</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h3><ol>\n<li>新建文件 HelloWorld.java 首字母大写</li>\n</ol>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span>&#123;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] ages)</span>&#123;\n        System.out.print(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>);\n    &#125;\n&#125;</code></pre></div>\n\n<ol start=\"2\">\n<li>在当前文件夹目录下运行 <strong>javac HelloWorld.java</strong> 在当前文件夹编译生成 <strong>HelloWorld.class</strong></li>\n<li>在当前文件夹目录下运行 <strong>java HelloWorld.class</strong> 控制台打印 <em><strong>Hello World!</strong></em></li>\n</ol>\n<h3 id=\"JAVA-程序运行机制\"><a href=\"#JAVA-程序运行机制\" class=\"headerlink\" title=\"JAVA 程序运行机制\"></a>JAVA 程序运行机制</h3><p>java 及时解释型也是编译型语言</p>\n<p><strong>运行机制</strong></p>\n<p>原程序 <code>*.java</code>文件 通过 –&gt; Java编译器 转换为 –&gt; 字节码<code>*.claa</code> 文件 –&gt; 放入虚拟机的 类装载器中 –&gt; 字节码校验器 –&gt; 解释器 –&gt; 操作系统平台</p>\n<p>先编译 –&gt; 在解释</p>\n<h3 id=\"安装运行软件\"><a href=\"#安装运行软件\" class=\"headerlink\" title=\"安装运行软件\"></a>安装运行软件</h3><p>idea</p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><ul>\n<li>哔哩哔哩 <a href=\"https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0\">遇见狂神说</a></li>\n</ul>\n","site":{"data":{}},"wordcount":859,"excerpt":"","more":"<h3 id=\"java的特性和优势\"><a href=\"#java的特性和优势\" class=\"headerlink\" title=\"java的特性和优势\"></a>java的特性和优势</h3><ol>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n<li>使用的人多</li>\n</ol>\n<h3 id=\"JDK-JRE-JVM的关系\"><a href=\"#JDK-JRE-JVM的关系\" class=\"headerlink\" title=\"JDK,JRE,JVM的关系\"></a>JDK,JRE,JVM的关系</h3><ol>\n<li><p>JDK  : Java Development Kit java 开发者工具包含JRE和JVM</p>\n</li>\n<li><p>JRE  : Java Runtime Environment JAVA 运行环境包含JVM</p>\n</li>\n<li><p>JVM : Java Virtual Machine JAVA 虚拟机</p>\n</li>\n</ol>\n<h3 id=\"删除JDK-windows-环境\"><a href=\"#删除JDK-windows-环境\" class=\"headerlink\" title=\"删除JDK( windows 环境)\"></a>删除JDK( windows 环境)</h3><ol>\n<li>删除  java <del><em><strong>环境变量</strong></em></del> ( JAVA_HOME , Path 下 JAVA相关)</li>\n<li>删除 java 目录 或 卸载 java</li>\n<li>java -version 测试</li>\n</ol>\n<h3 id=\"安装JDK-windows环境\"><a href=\"#安装JDK-windows环境\" class=\"headerlink\" title=\"安装JDK ( windows环境)\"></a>安装JDK ( windows环境)</h3><ol>\n<li><p><a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\">根据不同系统下载对应版本下载JDK8</a> </p>\n</li>\n<li><p>双击安装 JDK</p>\n</li>\n<li><p>记住安装目录</p>\n</li>\n<li><p>配置环境变量</p>\n<ol>\n<li><p>此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</p>\n</li>\n<li><p>系统变量添加 JAVA_HOME </p>\n<ul>\n<li>变量名: JAVA_HOME 变量值 : E:\\Tools\\JDK-8</li>\n</ul>\n</li>\n<li><p>用户变量 在Path 下添加 </p>\n<ul>\n<li>%JAVA_HOME%\\bin</li>\n<li>%JAVA_HOME%\\jre\\bin</li>\n</ul>\n</li>\n<li><p>打开 cmd java -version 测试 JDK是否安装成功</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h3><ol>\n<li>新建文件 HelloWorld.java 首字母大写</li>\n</ol>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span>&#123;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] ages)</span>&#123;\n        System.out.print(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>);\n    &#125;\n&#125;</code></pre>\n\n<ol start=\"2\">\n<li>在当前文件夹目录下运行 <strong>javac HelloWorld.java</strong> 在当前文件夹编译生成 <strong>HelloWorld.class</strong></li>\n<li>在当前文件夹目录下运行 <strong>java HelloWorld.class</strong> 控制台打印 <em><strong>Hello World!</strong></em></li>\n</ol>\n<h3 id=\"JAVA-程序运行机制\"><a href=\"#JAVA-程序运行机制\" class=\"headerlink\" title=\"JAVA 程序运行机制\"></a>JAVA 程序运行机制</h3><p>java 及时解释型也是编译型语言</p>\n<p><strong>运行机制</strong></p>\n<p>原程序 <code>*.java</code>文件 通过 –&gt; Java编译器 转换为 –&gt; 字节码<code>*.claa</code> 文件 –&gt; 放入虚拟机的 类装载器中 –&gt; 字节码校验器 –&gt; 解释器 –&gt; 操作系统平台</p>\n<p>先编译 –&gt; 在解释</p>\n<h3 id=\"安装运行软件\"><a href=\"#安装运行软件\" class=\"headerlink\" title=\"安装运行软件\"></a>安装运行软件</h3><p>idea</p>\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><ul>\n<li>哔哩哔哩 <a href=\"https://space.bilibili.com/95256449/?spm_id_from=333.999.0.0\">遇见狂神说</a></li>\n</ul>\n"},{"title":"java基础三","date":"2022-03-20T09:03:00.000Z","_content":"\n# 数据类型\n\n- Java 强语言类型 要求变量的使用严格符合规定 , 所有变量都必须要先定义后才能使用\n- Java 数据类型分为两大类\n- <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202108261609781.png\" alt=\"图示\"  />\n\n1. 定义基本数据类型\n\n   ```java\n   // 数值类型\n   int a = 10;\t\t// 常用 \n   long b = 10L;\t// 常用\n   \n   short c = 10;\n   byte d = 10;\n   \n   // 浮点数 ** 表现的字长有限也是离散的存舍入误差 大约 接近但不等于\n   /**\n    * 最好不使用浮点数比较 可以使用  BigDecimal\n    */\n   float e = 50.1F;\n   double f = 50.23232;\n   \n   /**\n    * 字符\n    * 字符本质上还是数字 可以强制转换成 int\n    * Unicode 表 对应\n    */\n   char g = 'a';\n   // Unicode 编码 U0000 ~ UFFFF\n   char gg = '\\u0061';\n   \n   // 布尔值\n   boolean h = true;\n   boolean i = false;\n   ```\n\n2. 进制\n\n   ```java\n   // 十进制\n   int a = 10;\n   // 二进制 \n   int aa = 0b10;\n   // 八进制\n   int aaa = 010;\n   // 十六进制\n   int aaaa = 0x10;\n   ```\n\n# 类型转换\n\n1. 由低到高\n\n   byte，short，char - >int - > long - > float - > double\n\n2. 运算中,不同类型的数据先转换为同一类型,然后就行运算\n3. \n   1. 强制类型转换 由高到低 \n   2. 自动类型转换 由低到高\n\n4. **注意点:**\n   1. 不能对布尔值转换\n   2. 不能把对象类型转换成不相关的类型\n   3. 由容量高想向容量低转换 强制转换 [(类型)变量名]\n   4. 转换时可能出现内存溢出或丢失精度!\n\n# 变量\n\n1. 值可以发生变化的\n\n2. 变量必须先声明类型\n\n3. 变量是基本的储存单元,其要素包括变量名,变量类型,变量作用域.\n\n   > ​\ttype  varName [=value]   [{,varName[=value]}]\n   >\n   > 数据类型 变量命  =值; 可以使用逗号隔开来声明多个变量 \n   >\n   > ```java\n   > //例\n   > int x = 0;\n   > int a,b,c,d;\n   > ```\n\n4. 注意\n\n   1. 每个变量必须有类型,可以是基础类型也可以是引用类型\n   2. 变量名必须是合法的标识符\n   3. 变量声明是一条完整的语句,因此每一个声明都有分好`;`结束\n\n5. 变量作用域\n\n   1. 类变量\n\n   2. 实例变量 ( 从属于`对象`  , 如果不自行初始化 , 默认为这个类型的默认值)\n\n      1. boolean 默认为 `false`\n      2. 数值类型默认值为 `0` 或 `0.0`\n      3. 除基本类型其他都为**`null`**\n\n   3. 局部变量\n\n   4. ```java\n      public class test{\n          // 类变量\n          static int i= 1;\n          \n          // 实例变量\n          int y = 10;\n          \n          public void method{\n              //局部变量\n              int z = 100;\n          }\n      }\n      ```\n\n# 常量\n\n1. 初始化后不能在改变的值\n\n2. 可以理解为特殊的变量 , 他的值被设定后 , 在程序运行过程中不允许被改变 . \n\n3. ```java\n   // final 常量类型 常量名 = 常量值 . \n   final int I = 1;\n   ```\n\n4. 常量名一般使用大写字符\n\n# 命名规范\n\n1. 所有变量 , 方法名 , 类名 , **见名知意**\n2. 类成员变量 / 局部变量 / 方法名 : 首字母小写和驼峰命名\n3. 常量 : 大写字母和下划线 ( 由`final`修饰符修饰的 )\n4. 类名 : 首字母大写驼峰命名\n\n# 运算符\n\n1. 算数运算符 : + , - , * , / , %  , ++ , --\n\n   - `+` : 加法运算，字符串连接运算\n   - `-` : 减法运算\n   - `*` : 乘法运算\n   - `/` : 除法运算\n   - `%` : 取模运算，两个数字相除取余数\n   - `++` : 自增 1　\n   - `--` : 自减 1\n\n   ```java\n   int a = 1;\n   \n   int b = a++; // a++先赋值后自增 1\n   int c = ++a; // ++a先自增 1 后赋值\n   System.out.println(b); // 输出结果 1\n   System.out.println(c); // 输出结果 3\n   ```\n\n   \n\n2. 赋值运算符 : = `变量名称=表达式内容`\n\n3. 关系运算符 : > , < , <= , >= , == , != , ipstanceof \n\n   - `>` : 大于\n   - `<` : 小于\n   - `<=` : 小于等于\n   - `>=` : 大于等于\n   - `==` : 恒等\n   - `!=` : 不等\n\n   > 1. ipstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例\n   >\n   > 2. ```java\n   >    boolean result = obj instanceof Class\n   >    ```\n   >\n   > 3. 其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。\n   >\n   > 4. **注意**：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。\n\n4. 逻辑运算符 : && , || , ! \n\n   - | 运算符 | 用法   | 含义   | 说明                                               | 实例       | 结果  |\n     | :----- | :----- | :----- | :------------------------------------------------- | :--------- | :---- |\n     | &&     | a&&b   | 短路与 | ab 全为 true 时，计算结果为 true，否则为 false。   | 2>1&&3<4   | true  |\n     | \\|\\|   | a\\|\\|b | 短路或 | ab 全为 false 时，计算结果为 false，否则为 true。  | 2<1\\|\\|3>4 | false |\n     | !      | !a     | 逻辑非 | a 为 true 时，值为 false，a 为 false 时，值为 true | !(2>4)     | true  |\n     | \\|     | a\\|b   | 逻辑或 | ab 全为 false 时，计算结果为 false，否则为 true    | 1>2\\|3>5   | false |\n     | &      | a&b    | 逻辑与 | ab 全为 true 时，计算结果为 true，否则为 false     | 1<2&3<5    | true  |\n\n   - && 与 & 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false）\n\n   - || 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true）\n\n   - **注意**：短路与（&&）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。\n\n   - > 逻辑运算符的优先级为：！运算级别最高，&& 运算高于 || 运算。！运算符的优先级高于算术运算符，而 && 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。\n\n5. 位运算符 : & , | , ^ , ~ , >> , << , >>>\n\n6. 条件运算符 : ? : \n\n7. 扩展赋值运算符 : += , -= , *= , /=\n\n# 包机制\n\n1. 为了更好的组织类 , Java 提供了包机制 , 用于区别类名的命名空间\n\n2. ```java\n   // 语法格式\n   package pkg1.pakg2.pakg3. ......;\n   ```\n\n3. 一般利用公司域名倒置作为包名\n\n4. 为了能够使用某一个包成员 , 我么需要 Java 程序中明确导入该包\n\n5. ```java\n   // 语法格式\n   import pkg1.pakg2.pakg3. ...... .ClassName | *;\n   ```\n\n\n#  javadoc\n\n生成文档\n\n```cmd\njavadoc -encoding UTF-8 -charset UTF-8 ClassName.java\n```\n\n","source":"_posts/java/basic3.md","raw":"---\ntitle: java基础三\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:03:00\n---\n\n# 数据类型\n\n- Java 强语言类型 要求变量的使用严格符合规定 , 所有变量都必须要先定义后才能使用\n- Java 数据类型分为两大类\n- <img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202108261609781.png\" alt=\"图示\"  />\n\n1. 定义基本数据类型\n\n   ```java\n   // 数值类型\n   int a = 10;\t\t// 常用 \n   long b = 10L;\t// 常用\n   \n   short c = 10;\n   byte d = 10;\n   \n   // 浮点数 ** 表现的字长有限也是离散的存舍入误差 大约 接近但不等于\n   /**\n    * 最好不使用浮点数比较 可以使用  BigDecimal\n    */\n   float e = 50.1F;\n   double f = 50.23232;\n   \n   /**\n    * 字符\n    * 字符本质上还是数字 可以强制转换成 int\n    * Unicode 表 对应\n    */\n   char g = 'a';\n   // Unicode 编码 U0000 ~ UFFFF\n   char gg = '\\u0061';\n   \n   // 布尔值\n   boolean h = true;\n   boolean i = false;\n   ```\n\n2. 进制\n\n   ```java\n   // 十进制\n   int a = 10;\n   // 二进制 \n   int aa = 0b10;\n   // 八进制\n   int aaa = 010;\n   // 十六进制\n   int aaaa = 0x10;\n   ```\n\n# 类型转换\n\n1. 由低到高\n\n   byte，short，char - >int - > long - > float - > double\n\n2. 运算中,不同类型的数据先转换为同一类型,然后就行运算\n3. \n   1. 强制类型转换 由高到低 \n   2. 自动类型转换 由低到高\n\n4. **注意点:**\n   1. 不能对布尔值转换\n   2. 不能把对象类型转换成不相关的类型\n   3. 由容量高想向容量低转换 强制转换 [(类型)变量名]\n   4. 转换时可能出现内存溢出或丢失精度!\n\n# 变量\n\n1. 值可以发生变化的\n\n2. 变量必须先声明类型\n\n3. 变量是基本的储存单元,其要素包括变量名,变量类型,变量作用域.\n\n   > ​\ttype  varName [=value]   [{,varName[=value]}]\n   >\n   > 数据类型 变量命  =值; 可以使用逗号隔开来声明多个变量 \n   >\n   > ```java\n   > //例\n   > int x = 0;\n   > int a,b,c,d;\n   > ```\n\n4. 注意\n\n   1. 每个变量必须有类型,可以是基础类型也可以是引用类型\n   2. 变量名必须是合法的标识符\n   3. 变量声明是一条完整的语句,因此每一个声明都有分好`;`结束\n\n5. 变量作用域\n\n   1. 类变量\n\n   2. 实例变量 ( 从属于`对象`  , 如果不自行初始化 , 默认为这个类型的默认值)\n\n      1. boolean 默认为 `false`\n      2. 数值类型默认值为 `0` 或 `0.0`\n      3. 除基本类型其他都为**`null`**\n\n   3. 局部变量\n\n   4. ```java\n      public class test{\n          // 类变量\n          static int i= 1;\n          \n          // 实例变量\n          int y = 10;\n          \n          public void method{\n              //局部变量\n              int z = 100;\n          }\n      }\n      ```\n\n# 常量\n\n1. 初始化后不能在改变的值\n\n2. 可以理解为特殊的变量 , 他的值被设定后 , 在程序运行过程中不允许被改变 . \n\n3. ```java\n   // final 常量类型 常量名 = 常量值 . \n   final int I = 1;\n   ```\n\n4. 常量名一般使用大写字符\n\n# 命名规范\n\n1. 所有变量 , 方法名 , 类名 , **见名知意**\n2. 类成员变量 / 局部变量 / 方法名 : 首字母小写和驼峰命名\n3. 常量 : 大写字母和下划线 ( 由`final`修饰符修饰的 )\n4. 类名 : 首字母大写驼峰命名\n\n# 运算符\n\n1. 算数运算符 : + , - , * , / , %  , ++ , --\n\n   - `+` : 加法运算，字符串连接运算\n   - `-` : 减法运算\n   - `*` : 乘法运算\n   - `/` : 除法运算\n   - `%` : 取模运算，两个数字相除取余数\n   - `++` : 自增 1　\n   - `--` : 自减 1\n\n   ```java\n   int a = 1;\n   \n   int b = a++; // a++先赋值后自增 1\n   int c = ++a; // ++a先自增 1 后赋值\n   System.out.println(b); // 输出结果 1\n   System.out.println(c); // 输出结果 3\n   ```\n\n   \n\n2. 赋值运算符 : = `变量名称=表达式内容`\n\n3. 关系运算符 : > , < , <= , >= , == , != , ipstanceof \n\n   - `>` : 大于\n   - `<` : 小于\n   - `<=` : 小于等于\n   - `>=` : 大于等于\n   - `==` : 恒等\n   - `!=` : 不等\n\n   > 1. ipstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例\n   >\n   > 2. ```java\n   >    boolean result = obj instanceof Class\n   >    ```\n   >\n   > 3. 其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。\n   >\n   > 4. **注意**：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。\n\n4. 逻辑运算符 : && , || , ! \n\n   - | 运算符 | 用法   | 含义   | 说明                                               | 实例       | 结果  |\n     | :----- | :----- | :----- | :------------------------------------------------- | :--------- | :---- |\n     | &&     | a&&b   | 短路与 | ab 全为 true 时，计算结果为 true，否则为 false。   | 2>1&&3<4   | true  |\n     | \\|\\|   | a\\|\\|b | 短路或 | ab 全为 false 时，计算结果为 false，否则为 true。  | 2<1\\|\\|3>4 | false |\n     | !      | !a     | 逻辑非 | a 为 true 时，值为 false，a 为 false 时，值为 true | !(2>4)     | true  |\n     | \\|     | a\\|b   | 逻辑或 | ab 全为 false 时，计算结果为 false，否则为 true    | 1>2\\|3>5   | false |\n     | &      | a&b    | 逻辑与 | ab 全为 true 时，计算结果为 true，否则为 false     | 1<2&3<5    | true  |\n\n   - && 与 & 区别：如果 a 为 false，则不计算 b（因为不论 b 为何值，结果都为 false）\n\n   - || 与 | 区别：如果 a 为 true，则不计算 b（因为不论 b 为何值，结果都为 true）\n\n   - **注意**：短路与（&&）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。\n\n   - > 逻辑运算符的优先级为：！运算级别最高，&& 运算高于 || 运算。！运算符的优先级高于算术运算符，而 && 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。\n\n5. 位运算符 : & , | , ^ , ~ , >> , << , >>>\n\n6. 条件运算符 : ? : \n\n7. 扩展赋值运算符 : += , -= , *= , /=\n\n# 包机制\n\n1. 为了更好的组织类 , Java 提供了包机制 , 用于区别类名的命名空间\n\n2. ```java\n   // 语法格式\n   package pkg1.pakg2.pakg3. ......;\n   ```\n\n3. 一般利用公司域名倒置作为包名\n\n4. 为了能够使用某一个包成员 , 我么需要 Java 程序中明确导入该包\n\n5. ```java\n   // 语法格式\n   import pkg1.pakg2.pakg3. ...... .ClassName | *;\n   ```\n\n\n#  javadoc\n\n生成文档\n\n```cmd\njavadoc -encoding UTF-8 -charset UTF-8 ClassName.java\n```\n\n","slug":"java/basic3","published":1,"updated":"2022-03-21T13:18:26.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samez000iowsp1bspex6a","content":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li>Java 强语言类型 要求变量的使用严格符合规定 , 所有变量都必须要先定义后才能使用</li>\n<li>Java 数据类型分为两大类</li>\n<li><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202108261609781.png\" alt=\"图示\"  /></li>\n</ul>\n<ol>\n<li><p>定义基本数据类型</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 数值类型</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\t\t<span class=\"hljs-comment\">// 常用 </span>\n<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10L</span>;\t<span class=\"hljs-comment\">// 常用</span>\n\n<span class=\"hljs-type\">short</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-comment\">// 浮点数 ** 表现的字长有限也是离散的存舍入误差 大约 接近但不等于</span>\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 最好不使用浮点数比较 可以使用  BigDecimal</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50.1F</span>;\n<span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50.23232</span>;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 字符</span>\n<span class=\"hljs-comment\"> * 字符本质上还是数字 可以强制转换成 int</span>\n<span class=\"hljs-comment\"> * Unicode 表 对应</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">g</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n<span class=\"hljs-comment\">// Unicode 编码 U0000 ~ UFFFF</span>\n<span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">gg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;\\u0061&#x27;</span>;\n\n<span class=\"hljs-comment\">// 布尔值</span>\n<span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;</code></pre></div></li>\n<li><p>进制</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 十进制</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-comment\">// 二进制 </span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0b10</span>;\n<span class=\"hljs-comment\">// 八进制</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aaa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">010</span>;\n<span class=\"hljs-comment\">// 十六进制</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aaaa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0x10</span>;</code></pre></div></li>\n</ol>\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><ol>\n<li><p>由低到高</p>\n<p>byte，short，char - &gt;int - &gt; long - &gt; float - &gt; double</p>\n</li>\n<li><p>运算中,不同类型的数据先转换为同一类型,然后就行运算</p>\n</li>\n<li><ol>\n<li>强制类型转换 由高到低 </li>\n<li>自动类型转换 由低到高</li>\n</ol>\n</li>\n<li><p><strong>注意点:</strong></p>\n<ol>\n<li>不能对布尔值转换</li>\n<li>不能把对象类型转换成不相关的类型</li>\n<li>由容量高想向容量低转换 强制转换 [(类型)变量名]</li>\n<li>转换时可能出现内存溢出或丢失精度!</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><ol>\n<li><p>值可以发生变化的</p>\n</li>\n<li><p>变量必须先声明类型</p>\n</li>\n<li><p>变量是基本的储存单元,其要素包括变量名,变量类型,变量作用域.</p>\n<blockquote>\n<p>​    type  varName [=value]   [{,varName[=value]}]</p>\n<p>数据类型 变量命  =值; 可以使用逗号隔开来声明多个变量 </p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//例</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-type\">int</span> a,b,c,d;</code></pre></div></blockquote>\n</li>\n<li><p>注意</p>\n<ol>\n<li>每个变量必须有类型,可以是基础类型也可以是引用类型</li>\n<li>变量名必须是合法的标识符</li>\n<li>变量声明是一条完整的语句,因此每一个声明都有分好<code>;</code>结束</li>\n</ol>\n</li>\n<li><p>变量作用域</p>\n<ol>\n<li><p>类变量</p>\n</li>\n<li><p>实例变量 ( 从属于<code>对象</code>  , 如果不自行初始化 , 默认为这个类型的默认值)</p>\n<ol>\n<li>boolean 默认为 <code>false</code></li>\n<li>数值类型默认值为 <code>0</code> 或 <code>0.0</code></li>\n<li>除基本类型其他都为**<code>null</code>**</li>\n</ol>\n</li>\n<li><p>局部变量</p>\n</li>\n<li><p>```java<br>public class test{</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs\">// 类变量\nstatic int i= 1;\n\n// 实例变量\nint y = 10;\n\npublic void method&#123;\n    //局部变量\n    int z = 100;\n&#125;\n</code></pre></div>\n<p>}</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs axapta\">\n<span class=\"hljs-meta\"># 常量</span>\n\n<span class=\"hljs-number\">1.</span> 初始化后不能在改变的值\n\n<span class=\"hljs-number\">2.</span> 可以理解为特殊的变量 , 他的值被设定后 , 在程序运行过程中不允许被改变 . \n\n<span class=\"hljs-number\">3.</span> ```java\n   <span class=\"hljs-comment\">// final 常量类型 常量名 = 常量值 . </span>\n   <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span> I = <span class=\"hljs-number\">1</span>;</code></pre></div></li>\n</ol>\n</li>\n<li><p>常量名一般使用大写字符</p>\n</li>\n</ol>\n<h1 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h1><ol>\n<li>所有变量 , 方法名 , 类名 , <strong>见名知意</strong></li>\n<li>类成员变量 / 局部变量 / 方法名 : 首字母小写和驼峰命名</li>\n<li>常量 : 大写字母和下划线 ( 由<code>final</code>修饰符修饰的 )</li>\n<li>类名 : 首字母大写驼峰命名</li>\n</ol>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><ol>\n<li><p>算数运算符 : + , - , * , / , %  , ++ , –</p>\n<ul>\n<li><code>+</code> : 加法运算，字符串连接运算</li>\n<li><code>-</code> : 减法运算</li>\n<li><code>*</code> : 乘法运算</li>\n<li><code>/</code> : 除法运算</li>\n<li><code>%</code> : 取模运算，两个数字相除取余数</li>\n<li><code>++</code> : 自增 1　</li>\n<li><code>--</code> : 自减 1</li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a++; <span class=\"hljs-comment\">// a++先赋值后自增 1</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> ++a; <span class=\"hljs-comment\">// ++a先自增 1 后赋值</span>\nSystem.out.println(b); <span class=\"hljs-comment\">// 输出结果 1</span>\nSystem.out.println(c); <span class=\"hljs-comment\">// 输出结果 3</span></code></pre></div></li>\n<li><p>赋值运算符 : = <code>变量名称=表达式内容</code></p>\n</li>\n<li><p>关系运算符 : &gt; , &lt; , &lt;= , &gt;= , == , != , ipstanceof </p>\n<ul>\n<li><code>&gt;</code> : 大于</li>\n<li><code>&lt;</code> : 小于</li>\n<li><code>&lt;=</code> : 小于等于</li>\n<li><code>&gt;=</code> : 大于等于</li>\n<li><code>==</code> : 恒等</li>\n<li><code>!=</code> : 不等</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>ipstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例</p>\n</li>\n<li><p>```java<br>boolean result = obj instanceof Class</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs elixir\">\n<span class=\"hljs-number\">3</span>. 其中 obj 为一个对象，<span class=\"hljs-title class_\">Class</span> 表示一个类或者一个接口，当 obj 为 <span class=\"hljs-title class_\">Class</span> 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 <span class=\"hljs-literal\">true</span>，否则返回<span class=\"hljs-literal\">false</span>。\n\n<span class=\"hljs-number\">4</span>. **注意**：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。\n\n<span class=\"hljs-number\">4</span>. 逻辑运算符 : &amp;&amp; , || , ! \n\n  - | 运算符 | 用法   | 含义   | 说明                                               | 实例       | 结果  |\n    | <span class=\"hljs-symbol\">:-----</span> | <span class=\"hljs-symbol\">:-----</span> | <span class=\"hljs-symbol\">:-----</span> | <span class=\"hljs-symbol\">:-------------------------------------------------</span> | <span class=\"hljs-symbol\">:---------</span> | <span class=\"hljs-symbol\">:----</span> |\n    | &amp;&amp;     | a&amp;&amp;b   | 短路与 | ab 全为 <span class=\"hljs-literal\">true</span> 时，计算结果为 <span class=\"hljs-literal\">true</span>，否则为 <span class=\"hljs-literal\">false</span>。   | <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-number\">1</span>&amp;&amp;<span class=\"hljs-number\">3</span>&lt;<span class=\"hljs-number\">4</span>   | <span class=\"hljs-literal\">true</span>  |\n    | \\|\\|   | a\\|\\|b | 短路或 | ab 全为 <span class=\"hljs-literal\">false</span> 时，计算结果为 <span class=\"hljs-literal\">false</span>，否则为 <span class=\"hljs-literal\">true</span>。  | <span class=\"hljs-number\">2</span>&lt;<span class=\"hljs-number\">1</span>\\|\\|<span class=\"hljs-number\">3</span>&gt;<span class=\"hljs-number\">4</span> | <span class=\"hljs-literal\">false</span> |\n    | !      | !a     | 逻辑非 | a 为 <span class=\"hljs-literal\">true</span> 时，值为 <span class=\"hljs-literal\">false</span>，a 为 <span class=\"hljs-literal\">false</span> 时，值为 <span class=\"hljs-literal\">true</span> | !(<span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-number\">4</span>)     | <span class=\"hljs-literal\">true</span>  |\n    | \\|     | a\\|b   | 逻辑或 | ab 全为 <span class=\"hljs-literal\">false</span> 时，计算结果为 <span class=\"hljs-literal\">false</span>，否则为 <span class=\"hljs-literal\">true</span>    | <span class=\"hljs-number\">1</span>&gt;<span class=\"hljs-number\">2</span>\\|<span class=\"hljs-number\">3</span>&gt;<span class=\"hljs-number\">5</span>   | <span class=\"hljs-literal\">false</span> |\n    | &amp;      | a&amp;b    | 逻辑与 | ab 全为 <span class=\"hljs-literal\">true</span> 时，计算结果为 <span class=\"hljs-literal\">true</span>，否则为 <span class=\"hljs-literal\">false</span>     | <span class=\"hljs-number\">1</span>&lt;<span class=\"hljs-number\">2</span>&amp;<span class=\"hljs-number\">3</span>&lt;<span class=\"hljs-number\">5</span>    | <span class=\"hljs-literal\">true</span>  |\n\n  - &amp;&amp; 与 &amp; 区别：如果 a 为 <span class=\"hljs-literal\">false</span>，则不计算 b（因为不论 b 为何值，结果都为 <span class=\"hljs-literal\">false</span>）\n\n  - || 与 | 区别：如果 a 为 <span class=\"hljs-literal\">true</span>，则不计算 b（因为不论 b 为何值，结果都为 <span class=\"hljs-literal\">true</span>）\n\n  - **注意**：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。\n\n  - &gt; 逻辑运算符的优先级为：！运算级别最高，&amp;&amp; 运算高于 || 运算。！运算符的优先级高于算术运算符，而 &amp;&amp; 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。\n\n<span class=\"hljs-number\">5</span>. 位运算符 : &amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;\n\n<span class=\"hljs-number\">6</span>. 条件运算符 : ? : \n\n<span class=\"hljs-number\">7</span>. 扩展赋值运算符 : += , -= , *= , /=\n\n<span class=\"hljs-comment\"># 包机制</span>\n\n<span class=\"hljs-number\">1</span>. 为了更好的组织类 , <span class=\"hljs-title class_\">Java</span> 提供了包机制 , 用于区别类名的命名空间\n\n<span class=\"hljs-number\">2</span>. ```java\n  // 语法格式\n  package pkg1.pakg2.pakg3. ......;</code></pre></div></li>\n</ol>\n</blockquote>\n</li>\n<li><p>一般利用公司域名倒置作为包名</p>\n</li>\n<li><p>为了能够使用某一个包成员 , 我么需要 Java 程序中明确导入该包</p>\n</li>\n<li><p>```java<br>// 语法格式<br>import pkg1.pakg2.pakg3. …… .ClassName | *;</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs autohotkey\">\n\n#  javadoc\n\n生成文档\n\n```cmd\njavadoc -encoding UTF-<span class=\"hljs-number\">8</span> -charset UTF-<span class=\"hljs-number\">8</span> ClassName.java</code></pre></div></li>\n</ol>\n","site":{"data":{}},"wordcount":2814,"excerpt":"","more":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ul>\n<li>Java 强语言类型 要求变量的使用严格符合规定 , 所有变量都必须要先定义后才能使用</li>\n<li>Java 数据类型分为两大类</li>\n<li><img src=\"https://instrument-file.oss-cn-beijing.aliyuncs.com/Typora/202108261609781.png\" alt=\"图示\"  /></li>\n</ul>\n<ol>\n<li><p>定义基本数据类型</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 数值类型</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\t\t<span class=\"hljs-comment\">// 常用 </span>\n<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10L</span>;\t<span class=\"hljs-comment\">// 常用</span>\n\n<span class=\"hljs-type\">short</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-type\">byte</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-comment\">// 浮点数 ** 表现的字长有限也是离散的存舍入误差 大约 接近但不等于</span>\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 最好不使用浮点数比较 可以使用  BigDecimal</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">e</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50.1F</span>;\n<span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50.23232</span>;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 字符</span>\n<span class=\"hljs-comment\"> * 字符本质上还是数字 可以强制转换成 int</span>\n<span class=\"hljs-comment\"> * Unicode 表 对应</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">g</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n<span class=\"hljs-comment\">// Unicode 编码 U0000 ~ UFFFF</span>\n<span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">gg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;\\u0061&#x27;</span>;\n\n<span class=\"hljs-comment\">// 布尔值</span>\n<span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;</code></pre></li>\n<li><p>进制</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 十进制</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-comment\">// 二进制 </span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0b10</span>;\n<span class=\"hljs-comment\">// 八进制</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aaa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">010</span>;\n<span class=\"hljs-comment\">// 十六进制</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aaaa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0x10</span>;</code></pre></li>\n</ol>\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><ol>\n<li><p>由低到高</p>\n<p>byte，short，char - &gt;int - &gt; long - &gt; float - &gt; double</p>\n</li>\n<li><p>运算中,不同类型的数据先转换为同一类型,然后就行运算</p>\n</li>\n<li><ol>\n<li>强制类型转换 由高到低 </li>\n<li>自动类型转换 由低到高</li>\n</ol>\n</li>\n<li><p><strong>注意点:</strong></p>\n<ol>\n<li>不能对布尔值转换</li>\n<li>不能把对象类型转换成不相关的类型</li>\n<li>由容量高想向容量低转换 强制转换 [(类型)变量名]</li>\n<li>转换时可能出现内存溢出或丢失精度!</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><ol>\n<li><p>值可以发生变化的</p>\n</li>\n<li><p>变量必须先声明类型</p>\n</li>\n<li><p>变量是基本的储存单元,其要素包括变量名,变量类型,变量作用域.</p>\n<blockquote>\n<p>​    type  varName [=value]   [{,varName[=value]}]</p>\n<p>数据类型 变量命  =值; 可以使用逗号隔开来声明多个变量 </p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">//例</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-type\">int</span> a,b,c,d;</code></pre></blockquote>\n</li>\n<li><p>注意</p>\n<ol>\n<li>每个变量必须有类型,可以是基础类型也可以是引用类型</li>\n<li>变量名必须是合法的标识符</li>\n<li>变量声明是一条完整的语句,因此每一个声明都有分好<code>;</code>结束</li>\n</ol>\n</li>\n<li><p>变量作用域</p>\n<ol>\n<li><p>类变量</p>\n</li>\n<li><p>实例变量 ( 从属于<code>对象</code>  , 如果不自行初始化 , 默认为这个类型的默认值)</p>\n<ol>\n<li>boolean 默认为 <code>false</code></li>\n<li>数值类型默认值为 <code>0</code> 或 <code>0.0</code></li>\n<li>除基本类型其他都为**<code>null</code>**</li>\n</ol>\n</li>\n<li><p>局部变量</p>\n</li>\n<li><p>```java<br>public class test{</p>\n<pre><code>// 类变量\nstatic int i= 1;\n\n// 实例变量\nint y = 10;\n\npublic void method&#123;\n    //局部变量\n    int z = 100;\n&#125;\n</code></pre>\n<p>}</p>\n<pre><code class=\"hljs axapta\">\n<span class=\"hljs-meta\"># 常量</span>\n\n<span class=\"hljs-number\">1.</span> 初始化后不能在改变的值\n\n<span class=\"hljs-number\">2.</span> 可以理解为特殊的变量 , 他的值被设定后 , 在程序运行过程中不允许被改变 . \n\n<span class=\"hljs-number\">3.</span> ```java\n   <span class=\"hljs-comment\">// final 常量类型 常量名 = 常量值 . </span>\n   <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span> I = <span class=\"hljs-number\">1</span>;</code></pre></li>\n</ol>\n</li>\n<li><p>常量名一般使用大写字符</p>\n</li>\n</ol>\n<h1 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h1><ol>\n<li>所有变量 , 方法名 , 类名 , <strong>见名知意</strong></li>\n<li>类成员变量 / 局部变量 / 方法名 : 首字母小写和驼峰命名</li>\n<li>常量 : 大写字母和下划线 ( 由<code>final</code>修饰符修饰的 )</li>\n<li>类名 : 首字母大写驼峰命名</li>\n</ol>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><ol>\n<li><p>算数运算符 : + , - , * , / , %  , ++ , –</p>\n<ul>\n<li><code>+</code> : 加法运算，字符串连接运算</li>\n<li><code>-</code> : 减法运算</li>\n<li><code>*</code> : 乘法运算</li>\n<li><code>/</code> : 除法运算</li>\n<li><code>%</code> : 取模运算，两个数字相除取余数</li>\n<li><code>++</code> : 自增 1　</li>\n<li><code>--</code> : 自减 1</li>\n</ul>\n<pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a++; <span class=\"hljs-comment\">// a++先赋值后自增 1</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> ++a; <span class=\"hljs-comment\">// ++a先自增 1 后赋值</span>\nSystem.out.println(b); <span class=\"hljs-comment\">// 输出结果 1</span>\nSystem.out.println(c); <span class=\"hljs-comment\">// 输出结果 3</span></code></pre></li>\n<li><p>赋值运算符 : = <code>变量名称=表达式内容</code></p>\n</li>\n<li><p>关系运算符 : &gt; , &lt; , &lt;= , &gt;= , == , != , ipstanceof </p>\n<ul>\n<li><code>&gt;</code> : 大于</li>\n<li><code>&lt;</code> : 小于</li>\n<li><code>&lt;=</code> : 小于等于</li>\n<li><code>&gt;=</code> : 大于等于</li>\n<li><code>==</code> : 恒等</li>\n<li><code>!=</code> : 不等</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>ipstanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例</p>\n</li>\n<li><p>```java<br>boolean result = obj instanceof Class</p>\n<pre><code class=\"hljs elixir\">\n<span class=\"hljs-number\">3</span>. 其中 obj 为一个对象，<span class=\"hljs-title class_\">Class</span> 表示一个类或者一个接口，当 obj 为 <span class=\"hljs-title class_\">Class</span> 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 <span class=\"hljs-literal\">true</span>，否则返回<span class=\"hljs-literal\">false</span>。\n\n<span class=\"hljs-number\">4</span>. **注意**：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。\n\n<span class=\"hljs-number\">4</span>. 逻辑运算符 : &amp;&amp; , || , ! \n\n  - | 运算符 | 用法   | 含义   | 说明                                               | 实例       | 结果  |\n    | <span class=\"hljs-symbol\">:-----</span> | <span class=\"hljs-symbol\">:-----</span> | <span class=\"hljs-symbol\">:-----</span> | <span class=\"hljs-symbol\">:-------------------------------------------------</span> | <span class=\"hljs-symbol\">:---------</span> | <span class=\"hljs-symbol\">:----</span> |\n    | &amp;&amp;     | a&amp;&amp;b   | 短路与 | ab 全为 <span class=\"hljs-literal\">true</span> 时，计算结果为 <span class=\"hljs-literal\">true</span>，否则为 <span class=\"hljs-literal\">false</span>。   | <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-number\">1</span>&amp;&amp;<span class=\"hljs-number\">3</span>&lt;<span class=\"hljs-number\">4</span>   | <span class=\"hljs-literal\">true</span>  |\n    | \\|\\|   | a\\|\\|b | 短路或 | ab 全为 <span class=\"hljs-literal\">false</span> 时，计算结果为 <span class=\"hljs-literal\">false</span>，否则为 <span class=\"hljs-literal\">true</span>。  | <span class=\"hljs-number\">2</span>&lt;<span class=\"hljs-number\">1</span>\\|\\|<span class=\"hljs-number\">3</span>&gt;<span class=\"hljs-number\">4</span> | <span class=\"hljs-literal\">false</span> |\n    | !      | !a     | 逻辑非 | a 为 <span class=\"hljs-literal\">true</span> 时，值为 <span class=\"hljs-literal\">false</span>，a 为 <span class=\"hljs-literal\">false</span> 时，值为 <span class=\"hljs-literal\">true</span> | !(<span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-number\">4</span>)     | <span class=\"hljs-literal\">true</span>  |\n    | \\|     | a\\|b   | 逻辑或 | ab 全为 <span class=\"hljs-literal\">false</span> 时，计算结果为 <span class=\"hljs-literal\">false</span>，否则为 <span class=\"hljs-literal\">true</span>    | <span class=\"hljs-number\">1</span>&gt;<span class=\"hljs-number\">2</span>\\|<span class=\"hljs-number\">3</span>&gt;<span class=\"hljs-number\">5</span>   | <span class=\"hljs-literal\">false</span> |\n    | &amp;      | a&amp;b    | 逻辑与 | ab 全为 <span class=\"hljs-literal\">true</span> 时，计算结果为 <span class=\"hljs-literal\">true</span>，否则为 <span class=\"hljs-literal\">false</span>     | <span class=\"hljs-number\">1</span>&lt;<span class=\"hljs-number\">2</span>&amp;<span class=\"hljs-number\">3</span>&lt;<span class=\"hljs-number\">5</span>    | <span class=\"hljs-literal\">true</span>  |\n\n  - &amp;&amp; 与 &amp; 区别：如果 a 为 <span class=\"hljs-literal\">false</span>，则不计算 b（因为不论 b 为何值，结果都为 <span class=\"hljs-literal\">false</span>）\n\n  - || 与 | 区别：如果 a 为 <span class=\"hljs-literal\">true</span>，则不计算 b（因为不论 b 为何值，结果都为 <span class=\"hljs-literal\">true</span>）\n\n  - **注意**：短路与（&amp;&amp;）和短路或（||）能够采用最优化的计算方式，从而提高效率。在实际编程时，应该优先考虑使用短路与和短路或。\n\n  - &gt; 逻辑运算符的优先级为：！运算级别最高，&amp;&amp; 运算高于 || 运算。！运算符的优先级高于算术运算符，而 &amp;&amp; 和 || 运算则低于关系运算符。结合方向是：逻辑非（单目运算符）具有右结合性，逻辑与和逻辑或（双目运算符）具有左结合性。\n\n<span class=\"hljs-number\">5</span>. 位运算符 : &amp; , | , ^ , ~ , &gt;&gt; , &lt;&lt; , &gt;&gt;&gt;\n\n<span class=\"hljs-number\">6</span>. 条件运算符 : ? : \n\n<span class=\"hljs-number\">7</span>. 扩展赋值运算符 : += , -= , *= , /=\n\n<span class=\"hljs-comment\"># 包机制</span>\n\n<span class=\"hljs-number\">1</span>. 为了更好的组织类 , <span class=\"hljs-title class_\">Java</span> 提供了包机制 , 用于区别类名的命名空间\n\n<span class=\"hljs-number\">2</span>. ```java\n  // 语法格式\n  package pkg1.pakg2.pakg3. ......;</code></pre></li>\n</ol>\n</blockquote>\n</li>\n<li><p>一般利用公司域名倒置作为包名</p>\n</li>\n<li><p>为了能够使用某一个包成员 , 我么需要 Java 程序中明确导入该包</p>\n</li>\n<li><p>```java<br>// 语法格式<br>import pkg1.pakg2.pakg3. …… .ClassName | *;</p>\n<pre><code class=\"hljs autohotkey\">\n\n#  javadoc\n\n生成文档\n\n```cmd\njavadoc -encoding UTF-<span class=\"hljs-number\">8</span> -charset UTF-<span class=\"hljs-number\">8</span> ClassName.java</code></pre></li>\n</ol>\n"},{"title":"java基础二","date":"2022-03-20T09:02:00.000Z","_content":"\n# JAVA基础语法\n\n1. 注释\n\n1. 单行注释\t`// 文本`\n2. 多行注释    `/* 文本 */`\n3. 文本注释    `/** 文本 */`\n4. 有趣的代码注释 哈哈\n\n\n```java\n/***\n *             ,%%%%%%%%,\n *           ,%%/\\%%%%/\\%%\n *          ,%%%\\c \"\" J/%%%\n * %.       %%%%/ o  o \\%%%\n * `%%.     %%%%    _  |%%%\n *  `%%     `%%%%(__Y__)%%'\n *  //       ;%%%%`\\-/%%%'\n * ((       /  `%%%%%%%'\n *  \\\\    .'          |\n *   \\\\  /       \\  | |\n *    \\\\/         ) | |\n *     \\         /_ | |__\n *     (___________))))))) 攻城湿\n *\n *        _       _\n * __   _(_)_   _(_) __ _ _ __\n * \\ \\ / / \\ \\ / / |/ _` |'_ \\\n *  \\ V /| |\\ V /| | (_| | | | |\n *   \\_/ |_| \\_/ |_|\\__,_|_| |_|\n */\n\n```\n\n#####  2. 标识符\n\n- 关键字 ↓常用关键字\n\n  <table class=\"table-view log-set-param\"><tbody><tr><td><strong>关键字</strong></td><td><strong>含义</strong></td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循<a href=\"https://baike.baidu.com/item/IEEE%20754\"><u><span style=\"color:#0066cc;\">IEEE 754</span></u></a>算术规范<sup class=\"sup--normal\"><span style=\"font-size:12px;\"> [1]</span></sup><a class=\"sup-anchor\">&nbsp;</a></td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td rowspan=\"1\" colspan=\"1\">while</td><td rowspan=\"1\" colspan=\"1\">用在循环结构中</td></tr></tbody></table>\n\n- ***Java 所有组成部分都需要名字. 类名,变量名及方法名都被称为标识符.***\n\n- ***所有标识符都应该以字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 开始*** \n- ***首字母之后可以是字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 和数字 随意组合***\n- ***<font color = \"red\">不能使用关键字作为变量名或方法名 .</font>***\n- ***标识符是<font color=\"red\">大小写敏感</font>的 .***\n- ~~***可以使用中文命名,但是一般不建议这样使用,也不建议使用拼音***~~","source":"_posts/java/basic2.md","raw":"---\ntitle: java基础二\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:02:00\n---\n\n# JAVA基础语法\n\n1. 注释\n\n1. 单行注释\t`// 文本`\n2. 多行注释    `/* 文本 */`\n3. 文本注释    `/** 文本 */`\n4. 有趣的代码注释 哈哈\n\n\n```java\n/***\n *             ,%%%%%%%%,\n *           ,%%/\\%%%%/\\%%\n *          ,%%%\\c \"\" J/%%%\n * %.       %%%%/ o  o \\%%%\n * `%%.     %%%%    _  |%%%\n *  `%%     `%%%%(__Y__)%%'\n *  //       ;%%%%`\\-/%%%'\n * ((       /  `%%%%%%%'\n *  \\\\    .'          |\n *   \\\\  /       \\  | |\n *    \\\\/         ) | |\n *     \\         /_ | |__\n *     (___________))))))) 攻城湿\n *\n *        _       _\n * __   _(_)_   _(_) __ _ _ __\n * \\ \\ / / \\ \\ / / |/ _` |'_ \\\n *  \\ V /| |\\ V /| | (_| | | | |\n *   \\_/ |_| \\_/ |_|\\__,_|_| |_|\n */\n\n```\n\n#####  2. 标识符\n\n- 关键字 ↓常用关键字\n\n  <table class=\"table-view log-set-param\"><tbody><tr><td><strong>关键字</strong></td><td><strong>含义</strong></td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循<a href=\"https://baike.baidu.com/item/IEEE%20754\"><u><span style=\"color:#0066cc;\">IEEE 754</span></u></a>算术规范<sup class=\"sup--normal\"><span style=\"font-size:12px;\"> [1]</span></sup><a class=\"sup-anchor\">&nbsp;</a></td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td rowspan=\"1\" colspan=\"1\">while</td><td rowspan=\"1\" colspan=\"1\">用在循环结构中</td></tr></tbody></table>\n\n- ***Java 所有组成部分都需要名字. 类名,变量名及方法名都被称为标识符.***\n\n- ***所有标识符都应该以字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 开始*** \n- ***首字母之后可以是字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 和数字 随意组合***\n- ***<font color = \"red\">不能使用关键字作为变量名或方法名 .</font>***\n- ***标识符是<font color=\"red\">大小写敏感</font>的 .***\n- ~~***可以使用中文命名,但是一般不建议这样使用,也不建议使用拼音***~~","slug":"java/basic2","published":1,"updated":"2022-03-21T13:18:23.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samf0000nowspcq77a9c6","content":"<h1 id=\"JAVA基础语法\"><a href=\"#JAVA基础语法\" class=\"headerlink\" title=\"JAVA基础语法\"></a>JAVA基础语法</h1><ol>\n<li><p>注释</p>\n</li>\n<li><p>单行注释    <code>// 文本</code></p>\n</li>\n<li><p>多行注释    <code>/* 文本 */</code></p>\n</li>\n<li><p>文本注释    <code>/** 文本 */</code></p>\n</li>\n<li><p>有趣的代码注释 哈哈</p>\n</li>\n</ol>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/***</span>\n<span class=\"hljs-comment\"> *             ,%%%%%%%%,</span>\n<span class=\"hljs-comment\"> *           ,%%/\\%%%%/\\%%</span>\n<span class=\"hljs-comment\"> *          ,%%%\\c &quot;&quot; J/%%%</span>\n<span class=\"hljs-comment\"> * %.       %%%%/ o  o \\%%%</span>\n<span class=\"hljs-comment\"> * `%%.     %%%%    _  |%%%</span>\n<span class=\"hljs-comment\"> *  `%%     `%%%%(__Y__)%%&#x27;</span>\n<span class=\"hljs-comment\"> *  //       ;%%%%`\\-/%%%&#x27;</span>\n<span class=\"hljs-comment\"> * ((       /  `%%%%%%%&#x27;</span>\n<span class=\"hljs-comment\"> *  \\\\    .&#x27;          |</span>\n<span class=\"hljs-comment\"> *   \\\\  /       \\  | |</span>\n<span class=\"hljs-comment\"> *    \\\\/         ) | |</span>\n<span class=\"hljs-comment\"> *     \\         /_ | |__</span>\n<span class=\"hljs-comment\"> *     (___________))))))) 攻城湿</span>\n<span class=\"hljs-comment\"> *</span>\n<span class=\"hljs-comment\"> *        _       _</span>\n<span class=\"hljs-comment\"> * __   _(_)_   _(_) __ _ _ __</span>\n<span class=\"hljs-comment\"> * \\ \\ / / \\ \\ / / |/ _` |&#x27;_ \\</span>\n<span class=\"hljs-comment\"> *  \\ V /| |\\ V /| | (_| | | | |</span>\n<span class=\"hljs-comment\"> *   \\_/ |_| \\_/ |_|\\__,_|_| |_|</span>\n<span class=\"hljs-comment\"> */</span>\n</code></pre></div>\n\n<h5 id=\"2-标识符\"><a href=\"#2-标识符\" class=\"headerlink\" title=\"2. 标识符\"></a>2. 标识符</h5><ul>\n<li><p>关键字 ↓常用关键字</p>\n<table class=\"table-view log-set-param\"><tbody><tr><td><strong>关键字</strong></td><td><strong>含义</strong></td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循<a href=\"https://baike.baidu.com/item/IEEE%20754\"><u><span style=\"color:#0066cc;\">IEEE 754</span></u></a>算术规范<sup class=\"sup--normal\"><span style=\"font-size:12px;\"> [1]</span></sup><a class=\"sup-anchor\">&nbsp;</a></td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td rowspan=\"1\" colspan=\"1\">while</td><td rowspan=\"1\" colspan=\"1\">用在循环结构中</td></tr></tbody></table></li>\n<li><p><em><strong>Java 所有组成部分都需要名字. 类名,变量名及方法名都被称为标识符.</strong></em></p>\n</li>\n<li><p><em><strong>所有标识符都应该以字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 开始</strong></em> </p>\n</li>\n<li><p><em><strong>首字母之后可以是字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 和数字 随意组合</strong></em></p>\n</li>\n<li><p><em><strong><font color = \"red\">不能使用关键字作为变量名或方法名 .</font></strong></em></p>\n</li>\n<li><p><em><strong>标识符是<font color=\"red\">大小写敏感</font>的 .</strong></em></p>\n</li>\n<li><p><del><em><strong>可以使用中文命名,但是一般不建议这样使用,也不建议使用拼音</strong></em></del></p>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":1583,"excerpt":"","more":"<h1 id=\"JAVA基础语法\"><a href=\"#JAVA基础语法\" class=\"headerlink\" title=\"JAVA基础语法\"></a>JAVA基础语法</h1><ol>\n<li><p>注释</p>\n</li>\n<li><p>单行注释    <code>// 文本</code></p>\n</li>\n<li><p>多行注释    <code>/* 文本 */</code></p>\n</li>\n<li><p>文本注释    <code>/** 文本 */</code></p>\n</li>\n<li><p>有趣的代码注释 哈哈</p>\n</li>\n</ol>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">/***</span>\n<span class=\"hljs-comment\"> *             ,%%%%%%%%,</span>\n<span class=\"hljs-comment\"> *           ,%%/\\%%%%/\\%%</span>\n<span class=\"hljs-comment\"> *          ,%%%\\c &quot;&quot; J/%%%</span>\n<span class=\"hljs-comment\"> * %.       %%%%/ o  o \\%%%</span>\n<span class=\"hljs-comment\"> * `%%.     %%%%    _  |%%%</span>\n<span class=\"hljs-comment\"> *  `%%     `%%%%(__Y__)%%&#x27;</span>\n<span class=\"hljs-comment\"> *  //       ;%%%%`\\-/%%%&#x27;</span>\n<span class=\"hljs-comment\"> * ((       /  `%%%%%%%&#x27;</span>\n<span class=\"hljs-comment\"> *  \\\\    .&#x27;          |</span>\n<span class=\"hljs-comment\"> *   \\\\  /       \\  | |</span>\n<span class=\"hljs-comment\"> *    \\\\/         ) | |</span>\n<span class=\"hljs-comment\"> *     \\         /_ | |__</span>\n<span class=\"hljs-comment\"> *     (___________))))))) 攻城湿</span>\n<span class=\"hljs-comment\"> *</span>\n<span class=\"hljs-comment\"> *        _       _</span>\n<span class=\"hljs-comment\"> * __   _(_)_   _(_) __ _ _ __</span>\n<span class=\"hljs-comment\"> * \\ \\ / / \\ \\ / / |/ _` |&#x27;_ \\</span>\n<span class=\"hljs-comment\"> *  \\ V /| |\\ V /| | (_| | | | |</span>\n<span class=\"hljs-comment\"> *   \\_/ |_| \\_/ |_|\\__,_|_| |_|</span>\n<span class=\"hljs-comment\"> */</span>\n</code></pre>\n\n<h5 id=\"2-标识符\"><a href=\"#2-标识符\" class=\"headerlink\" title=\"2. 标识符\"></a>2. 标识符</h5><ul>\n<li><p>关键字 ↓常用关键字</p>\n<table class=\"table-view log-set-param\"><tbody><tr><td><strong>关键字</strong></td><td><strong>含义</strong></td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循<a href=\"https://baike.baidu.com/item/IEEE%20754\"><u><span style=\"color:#0066cc;\">IEEE 754</span></u></a>算术规范<sup class=\"sup--normal\"><span style=\"font-size:12px;\"> [1]</span></sup><a class=\"sup-anchor\">&nbsp;</a></td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td rowspan=\"1\" colspan=\"1\">while</td><td rowspan=\"1\" colspan=\"1\">用在循环结构中</td></tr></tbody></table></li>\n<li><p><em><strong>Java 所有组成部分都需要名字. 类名,变量名及方法名都被称为标识符.</strong></em></p>\n</li>\n<li><p><em><strong>所有标识符都应该以字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 开始</strong></em> </p>\n</li>\n<li><p><em><strong>首字母之后可以是字母( A-Z 或者 a-z ) , 美元符号( $ ) , 或者下划线( _ ) 和数字 随意组合</strong></em></p>\n</li>\n<li><p><em><strong><font color = \"red\">不能使用关键字作为变量名或方法名 .</font></strong></em></p>\n</li>\n<li><p><em><strong>标识符是<font color=\"red\">大小写敏感</font>的 .</strong></em></p>\n</li>\n<li><p><del><em><strong>可以使用中文命名,但是一般不建议这样使用,也不建议使用拼音</strong></em></del></p>\n</li>\n</ul>\n"},{"title":"java基础四","date":"2022-03-20T09:04:00.000Z","_content":"\n# Java 流程控制\n\n### 一. Scanner 对象\n\n- Scanner 可以实现人机交互 , java.util.Scanner 是Java 1.5 的新特性\n\n- 基本用法\n\n  ```java\n  Scanner scanner = new Scanner(System.in);\n  ```\n\n- 使用 : 通过 Scanner 的 `next()` 和 `nextLine()` 方法获取输入的字符串 , 在读取前我们一般需要 使用 `hasNext()` 与 `hasNextLine()` 判断是否还有输入数据 . \n\n```java\n// 使用\nScanner scanner = new Scanner(System.in);\nSystem.out.println(\"请输入一串字符\");\n/// 判断是否输入 字符串\nif(scanner.hasNext()){\n    String str = scanner.next();\n    System.out.println(\"输入的字符串: \"+str);\n}\n// 结束\nscannr.close();\n\n```\n\n```\n// 使用\nScanner scanner = new Scanner(System.in);\nSystem.out.println(\"请输入一串字符\");\n/// 判断是否输入 字符串\nif(scanner.hasNextLine()){\n    String str = scanner.nextLine();\n    System.out.println(\"输入的字符串: \"+str);\n}\n// 结束\nscannr.close();\n```\n\n- `next()` , `nextLine()` 的区别\n  - next()\n    1. 读取到有效字符才可以结束输入 !\n    2. 输入有效字符之前有空白 , next()  自动去除\n    3. 只有输入有效字符才把后面的输入的空白座位分隔符或者结束符\n    4. **`next()`** 不能获取有空格的字符串\n  - nextLine()\n    1. 以 `Enter` 为结束符 , `newxLine()` 获取`Enter` 之前的所有数据\n    2. 可以有空格留空\n- nextLine() 使用频率更高\n\n### 二. 顺序结构\n\n- Java 基本结构就是顺序结构 , 除非特别指示 , 否则就按照顺序一句一句执行 . \n- 顺序结构是最简单的算法结构 . \n- 语句与语句之间 , 框与框之间是按照从上到下的顺序进行的 , 他由若干个依次执行的处理步骤组成的 , 他是任何一个算法都离不开的一种基本算法结构 . \n\n### 三. 选择结构\n\n1. `if` 选择结构\n\n   ```java\n   if(布尔表达式){\n   // 表达式值为 true 走这里\n   }\n   \n   // if 双选择结构\n   if(布尔表达式){\n   \t// 表达式值为 true 走这里\n   }else{\n       // 表达式为 false 走这里\n   }\n   \n   // if 多选择结构\n   if(布尔表达式1){\n   \t// 表达式1值为 true 走这里\n   }else if(布尔表达式2){\n   \t// 表达式值2为 true 走这里\n   }else if(布尔表达式3){\n   \t// 表达式3值为 true 走这里\n   }else{\n       // 当以上表达式为 false 走这里\n   }\n   \n   // 嵌套 if 结构 互相互不干扰\n   if(布尔表达式3){\n   \t// 表达式3值为 true 走这里\n       if(布尔表达式3){\n   \t// 表达式3值为 true 走这里\n   }else{\n       // 当以上表达式为 false 走这里\n   }\n   }else{\n       // 当以上表达式为 false 走这里\n   }\n   \n   ```\n\n2. `switch` 多选择结构 \n\n   ```java\n   switch(expression){ // expression 可以为byte,short,int,char,String(jdk 7 之后)\n       //可以添加 任意数量的 case 语句 value必须为字符串常量或字面量\n       case value :　\n           // 可以添加相关逻辑\n           break; // break 可有可无 无break继续走下面的case(case穿透) 有break 终止 \n       case value :　\n           break;\n       case value :　\n           break;\n       default : // 可有可无 有默认执行\n           break;\n   }\n   // 如果 expression 类型为String 通过 hashCode() 判断\n   ```\n\n###  四. 循环结构\n\n1. `while` 循环\n\n   1. \n      \n      ```java\n      while(布尔表达式){ // 表达式为 true 时 就会循环执行 \n          // 循环体\n      }\n      ```\n      \n      \n      \n   2. 大多数情况下会让表达式失效 值为 `false` 停止执行\n\n   3. 循环条件为 `true` 会造成 一直循环死循环, 业务逻辑中避免出现死循环,死循环会导致程序崩溃或降低性能\n\n2. `do` ... `while` 循环\n\n   1. \n      \n      ```java\n      do{\n          // 循环体\n      }while(布尔表达式);\n      ```\n      \n      \n      \n   2.  表达式不满足时也至少循环执行一次\n\n   3. `while` 先判断后执行 `do` ... `while` 先执行一次在判断\n\n3. `for` 循环\n\n   1. \n      \n      ```java\n      for(定义初始循环控制变量并赋值;布尔表达式;循环控制变量变更){\n          // 循环体\n      }\n      ```\n      \n      \n      \n   2. `for` 循环的两种方式\n   \n      ```java\n      String[] x = [\"a\",\"b\",\"c\",\"d\"];\n      // 普通 for 循环\n      for(int i = x.length-1 ; i >= 0 ;i--){\n          System.out.println(x[i]);\n      }\n      // 增强 for 循环\n      for(String i : x){\n          System.out.println(i);\n      }\n      ```\n   \n      \n   \n   3. `for` 循环 更灵活,更高效\n\n### 五. `break` 和`continue`\n\n1. **break**\n   - `break`控制循环的流程 .\n   - `break`用于强行退出循环 , 不再进行剩下的循环 . \n   - `break`语句也在`switch`语句中使用 . \n2. **continue**\n   - `continue`用于终止某次循环 . \n   - 结束本次循环 , 不再进行执行循环体中尚未执行的语句 , 进行下一次循环 . \n\n### 六. `goto`关键字\n\n1. `goto` 是Java的一个保留字 , 但并未在语言中得到正式使用 ; Java 中没有goto\n\n2. `标签`: 是指后面跟一个冒号的标识符 , 例如 : label:\n\n   ```java\n   // 不建议使用\t\n   outer:for(int i = 0 ; i < 500 ; i++){\n       for(int j = 2 ; j < i/2 ; j++){\n           if(i % j == 0){\n               continue outer;\n           }\n       }\n   }\n   ```\n\n   \n\n","source":"_posts/java/basic4.md","raw":"---\ntitle: java基础四\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:04:00\n---\n\n# Java 流程控制\n\n### 一. Scanner 对象\n\n- Scanner 可以实现人机交互 , java.util.Scanner 是Java 1.5 的新特性\n\n- 基本用法\n\n  ```java\n  Scanner scanner = new Scanner(System.in);\n  ```\n\n- 使用 : 通过 Scanner 的 `next()` 和 `nextLine()` 方法获取输入的字符串 , 在读取前我们一般需要 使用 `hasNext()` 与 `hasNextLine()` 判断是否还有输入数据 . \n\n```java\n// 使用\nScanner scanner = new Scanner(System.in);\nSystem.out.println(\"请输入一串字符\");\n/// 判断是否输入 字符串\nif(scanner.hasNext()){\n    String str = scanner.next();\n    System.out.println(\"输入的字符串: \"+str);\n}\n// 结束\nscannr.close();\n\n```\n\n```\n// 使用\nScanner scanner = new Scanner(System.in);\nSystem.out.println(\"请输入一串字符\");\n/// 判断是否输入 字符串\nif(scanner.hasNextLine()){\n    String str = scanner.nextLine();\n    System.out.println(\"输入的字符串: \"+str);\n}\n// 结束\nscannr.close();\n```\n\n- `next()` , `nextLine()` 的区别\n  - next()\n    1. 读取到有效字符才可以结束输入 !\n    2. 输入有效字符之前有空白 , next()  自动去除\n    3. 只有输入有效字符才把后面的输入的空白座位分隔符或者结束符\n    4. **`next()`** 不能获取有空格的字符串\n  - nextLine()\n    1. 以 `Enter` 为结束符 , `newxLine()` 获取`Enter` 之前的所有数据\n    2. 可以有空格留空\n- nextLine() 使用频率更高\n\n### 二. 顺序结构\n\n- Java 基本结构就是顺序结构 , 除非特别指示 , 否则就按照顺序一句一句执行 . \n- 顺序结构是最简单的算法结构 . \n- 语句与语句之间 , 框与框之间是按照从上到下的顺序进行的 , 他由若干个依次执行的处理步骤组成的 , 他是任何一个算法都离不开的一种基本算法结构 . \n\n### 三. 选择结构\n\n1. `if` 选择结构\n\n   ```java\n   if(布尔表达式){\n   // 表达式值为 true 走这里\n   }\n   \n   // if 双选择结构\n   if(布尔表达式){\n   \t// 表达式值为 true 走这里\n   }else{\n       // 表达式为 false 走这里\n   }\n   \n   // if 多选择结构\n   if(布尔表达式1){\n   \t// 表达式1值为 true 走这里\n   }else if(布尔表达式2){\n   \t// 表达式值2为 true 走这里\n   }else if(布尔表达式3){\n   \t// 表达式3值为 true 走这里\n   }else{\n       // 当以上表达式为 false 走这里\n   }\n   \n   // 嵌套 if 结构 互相互不干扰\n   if(布尔表达式3){\n   \t// 表达式3值为 true 走这里\n       if(布尔表达式3){\n   \t// 表达式3值为 true 走这里\n   }else{\n       // 当以上表达式为 false 走这里\n   }\n   }else{\n       // 当以上表达式为 false 走这里\n   }\n   \n   ```\n\n2. `switch` 多选择结构 \n\n   ```java\n   switch(expression){ // expression 可以为byte,short,int,char,String(jdk 7 之后)\n       //可以添加 任意数量的 case 语句 value必须为字符串常量或字面量\n       case value :　\n           // 可以添加相关逻辑\n           break; // break 可有可无 无break继续走下面的case(case穿透) 有break 终止 \n       case value :　\n           break;\n       case value :　\n           break;\n       default : // 可有可无 有默认执行\n           break;\n   }\n   // 如果 expression 类型为String 通过 hashCode() 判断\n   ```\n\n###  四. 循环结构\n\n1. `while` 循环\n\n   1. \n      \n      ```java\n      while(布尔表达式){ // 表达式为 true 时 就会循环执行 \n          // 循环体\n      }\n      ```\n      \n      \n      \n   2. 大多数情况下会让表达式失效 值为 `false` 停止执行\n\n   3. 循环条件为 `true` 会造成 一直循环死循环, 业务逻辑中避免出现死循环,死循环会导致程序崩溃或降低性能\n\n2. `do` ... `while` 循环\n\n   1. \n      \n      ```java\n      do{\n          // 循环体\n      }while(布尔表达式);\n      ```\n      \n      \n      \n   2.  表达式不满足时也至少循环执行一次\n\n   3. `while` 先判断后执行 `do` ... `while` 先执行一次在判断\n\n3. `for` 循环\n\n   1. \n      \n      ```java\n      for(定义初始循环控制变量并赋值;布尔表达式;循环控制变量变更){\n          // 循环体\n      }\n      ```\n      \n      \n      \n   2. `for` 循环的两种方式\n   \n      ```java\n      String[] x = [\"a\",\"b\",\"c\",\"d\"];\n      // 普通 for 循环\n      for(int i = x.length-1 ; i >= 0 ;i--){\n          System.out.println(x[i]);\n      }\n      // 增强 for 循环\n      for(String i : x){\n          System.out.println(i);\n      }\n      ```\n   \n      \n   \n   3. `for` 循环 更灵活,更高效\n\n### 五. `break` 和`continue`\n\n1. **break**\n   - `break`控制循环的流程 .\n   - `break`用于强行退出循环 , 不再进行剩下的循环 . \n   - `break`语句也在`switch`语句中使用 . \n2. **continue**\n   - `continue`用于终止某次循环 . \n   - 结束本次循环 , 不再进行执行循环体中尚未执行的语句 , 进行下一次循环 . \n\n### 六. `goto`关键字\n\n1. `goto` 是Java的一个保留字 , 但并未在语言中得到正式使用 ; Java 中没有goto\n\n2. `标签`: 是指后面跟一个冒号的标识符 , 例如 : label:\n\n   ```java\n   // 不建议使用\t\n   outer:for(int i = 0 ; i < 500 ; i++){\n       for(int j = 2 ; j < i/2 ; j++){\n           if(i % j == 0){\n               continue outer;\n           }\n       }\n   }\n   ```\n\n   \n\n","slug":"java/basic4","published":1,"updated":"2022-03-21T13:18:29.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samf1000oowsp502z12xz","content":"<h1 id=\"Java-流程控制\"><a href=\"#Java-流程控制\" class=\"headerlink\" title=\"Java 流程控制\"></a>Java 流程控制</h1><h3 id=\"一-Scanner-对象\"><a href=\"#一-Scanner-对象\" class=\"headerlink\" title=\"一. Scanner 对象\"></a>一. Scanner 对象</h3><ul>\n<li><p>Scanner 可以实现人机交互 , java.util.Scanner 是Java 1.5 的新特性</p>\n</li>\n<li><p>基本用法</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);</code></pre></div></li>\n<li><p>使用 : 通过 Scanner 的 <code>next()</code> 和 <code>nextLine()</code> 方法获取输入的字符串 , 在读取前我们一般需要 使用 <code>hasNext()</code> 与 <code>hasNextLine()</code> 判断是否还有输入数据 . </p>\n</li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用</span>\n<span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\nSystem.out.println(<span class=\"hljs-string\">&quot;请输入一串字符&quot;</span>);\n<span class=\"hljs-comment\">/// 判断是否输入 字符串</span>\n<span class=\"hljs-keyword\">if</span>(scanner.hasNext())&#123;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> scanner.next();\n    System.out.println(<span class=\"hljs-string\">&quot;输入的字符串: &quot;</span>+str);\n&#125;\n<span class=\"hljs-comment\">// 结束</span>\nscannr.close();\n</code></pre></div>\n\n<div class=\"code-wrapper\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 使用</span>\nScanner scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(System.<span class=\"hljs-params\">in</span>)</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;请输入一串字符&quot;</span>);\n<span class=\"hljs-comment\">/// 判断是否输入 字符串</span>\n<span class=\"hljs-keyword\">if</span>(scanner.has<span class=\"hljs-constructor\">NextLine()</span>)&#123;\n    String str = scanner.next<span class=\"hljs-constructor\">Line()</span>;\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;输入的字符串: &quot;</span>+str);\n&#125;\n<span class=\"hljs-comment\">// 结束</span>\nscannr.close<span class=\"hljs-literal\">()</span>;</code></pre></div>\n\n<ul>\n<li><code>next()</code> , <code>nextLine()</code> 的区别<ul>\n<li>next()<ol>\n<li>读取到有效字符才可以结束输入 !</li>\n<li>输入有效字符之前有空白 , next()  自动去除</li>\n<li>只有输入有效字符才把后面的输入的空白座位分隔符或者结束符</li>\n<li><strong><code>next()</code></strong> 不能获取有空格的字符串</li>\n</ol>\n</li>\n<li>nextLine()<ol>\n<li>以 <code>Enter</code> 为结束符 , <code>newxLine()</code> 获取<code>Enter</code> 之前的所有数据</li>\n<li>可以有空格留空</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>nextLine() 使用频率更高</li>\n</ul>\n<h3 id=\"二-顺序结构\"><a href=\"#二-顺序结构\" class=\"headerlink\" title=\"二. 顺序结构\"></a>二. 顺序结构</h3><ul>\n<li>Java 基本结构就是顺序结构 , 除非特别指示 , 否则就按照顺序一句一句执行 . </li>\n<li>顺序结构是最简单的算法结构 . </li>\n<li>语句与语句之间 , 框与框之间是按照从上到下的顺序进行的 , 他由若干个依次执行的处理步骤组成的 , 他是任何一个算法都离不开的一种基本算法结构 . </li>\n</ul>\n<h3 id=\"三-选择结构\"><a href=\"#三-选择结构\" class=\"headerlink\" title=\"三. 选择结构\"></a>三. 选择结构</h3><ol>\n<li><p><code>if</code> 选择结构</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span>(布尔表达式)&#123;\n<span class=\"hljs-comment\">// 表达式值为 true 走这里</span>\n&#125;\n\n<span class=\"hljs-comment\">// if 双选择结构</span>\n<span class=\"hljs-keyword\">if</span>(布尔表达式)&#123;\n\t<span class=\"hljs-comment\">// 表达式值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 表达式为 false 走这里</span>\n&#125;\n\n<span class=\"hljs-comment\">// if 多选择结构</span>\n<span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">1</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式1值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">2</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式值2为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">3</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式3值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 当以上表达式为 false 走这里</span>\n&#125;\n\n<span class=\"hljs-comment\">// 嵌套 if 结构 互相互不干扰</span>\n<span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">3</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式3值为 true 走这里</span>\n    <span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">3</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式3值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 当以上表达式为 false 走这里</span>\n&#125;\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 当以上表达式为 false 走这里</span>\n&#125;\n</code></pre></div></li>\n<li><p><code>switch</code> 多选择结构 </p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">switch</span>(expression)&#123; <span class=\"hljs-comment\">// expression 可以为byte,short,int,char,String(jdk 7 之后)</span>\n    <span class=\"hljs-comment\">//可以添加 任意数量的 case 语句 value必须为字符串常量或字面量</span>\n    <span class=\"hljs-keyword\">case</span> value :　\n        <span class=\"hljs-comment\">// 可以添加相关逻辑</span>\n        <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// break 可有可无 无break继续走下面的case(case穿透) 有break 终止 </span>\n    <span class=\"hljs-keyword\">case</span> value :　\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> value :　\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">default</span> : <span class=\"hljs-comment\">// 可有可无 有默认执行</span>\n        <span class=\"hljs-keyword\">break</span>;\n&#125;\n<span class=\"hljs-comment\">// 如果 expression 类型为String 通过 hashCode() 判断</span></code></pre></div></li>\n</ol>\n<h3 id=\"四-循环结构\"><a href=\"#四-循环结构\" class=\"headerlink\" title=\"四. 循环结构\"></a>四. 循环结构</h3><ol>\n<li><p><code>while</code> 循环</p>\n<ol>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span>(布尔表达式)&#123; <span class=\"hljs-comment\">// 表达式为 true 时 就会循环执行 </span>\n    <span class=\"hljs-comment\">// 循环体</span>\n&#125;</code></pre></div></li>\n<li><p>大多数情况下会让表达式失效 值为 <code>false</code> 停止执行</p>\n</li>\n<li><p>循环条件为 <code>true</code> 会造成 一直循环死循环, 业务逻辑中避免出现死循环,死循环会导致程序崩溃或降低性能</p>\n</li>\n</ol>\n</li>\n<li><p><code>do</code> … <code>while</code> 循环</p>\n<ol>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">do</span>&#123;\n    <span class=\"hljs-comment\">// 循环体</span>\n&#125;<span class=\"hljs-keyword\">while</span>(布尔表达式);</code></pre></div></li>\n<li><p> 表达式不满足时也至少循环执行一次</p>\n</li>\n<li><p><code>while</code> 先判断后执行 <code>do</code> … <code>while</code> 先执行一次在判断</p>\n</li>\n</ol>\n</li>\n<li><p><code>for</code> 循环</p>\n<ol>\n<li><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span>(定义初始循环控制变量并赋值;布尔表达式;循环控制变量变更)&#123;\n    <span class=\"hljs-comment\">// 循环体</span>\n&#125;</code></pre></div></li>\n<li><p><code>for</code> 循环的两种方式</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\">String[] x = [<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>,<span class=\"hljs-string\">&quot;d&quot;</span>];\n<span class=\"hljs-comment\">// 普通 for 循环</span>\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> x.length-<span class=\"hljs-number\">1</span> ; i &gt;= <span class=\"hljs-number\">0</span> ;i--)&#123;\n    System.out.println(x[i]);\n&#125;\n<span class=\"hljs-comment\">// 增强 for 循环</span>\n<span class=\"hljs-keyword\">for</span>(String i : x)&#123;\n    System.out.println(i);\n&#125;</code></pre></div></li>\n<li><p><code>for</code> 循环 更灵活,更高效</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"五-break-和continue\"><a href=\"#五-break-和continue\" class=\"headerlink\" title=\"五. break 和continue\"></a>五. <code>break</code> 和<code>continue</code></h3><ol>\n<li><strong>break</strong><ul>\n<li><code>break</code>控制循环的流程 .</li>\n<li><code>break</code>用于强行退出循环 , 不再进行剩下的循环 . </li>\n<li><code>break</code>语句也在<code>switch</code>语句中使用 . </li>\n</ul>\n</li>\n<li><strong>continue</strong><ul>\n<li><code>continue</code>用于终止某次循环 . </li>\n<li>结束本次循环 , 不再进行执行循环体中尚未执行的语句 , 进行下一次循环 . </li>\n</ul>\n</li>\n</ol>\n<h3 id=\"六-goto关键字\"><a href=\"#六-goto关键字\" class=\"headerlink\" title=\"六. goto关键字\"></a>六. <code>goto</code>关键字</h3><ol>\n<li><p><code>goto</code> 是Java的一个保留字 , 但并未在语言中得到正式使用 ; Java 中没有goto</p>\n</li>\n<li><p><code>标签</code>: 是指后面跟一个冒号的标识符 , 例如 : label:</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 不建议使用\t</span>\nouter:<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">500</span> ; i++)&#123;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> ; j &lt; i/<span class=\"hljs-number\">2</span> ; j++)&#123;\n        <span class=\"hljs-keyword\">if</span>(i % j == <span class=\"hljs-number\">0</span>)&#123;\n            <span class=\"hljs-keyword\">continue</span> outer;\n        &#125;\n    &#125;\n&#125;</code></pre></div></li>\n</ol>\n","site":{"data":{}},"wordcount":2480,"excerpt":"","more":"<h1 id=\"Java-流程控制\"><a href=\"#Java-流程控制\" class=\"headerlink\" title=\"Java 流程控制\"></a>Java 流程控制</h1><h3 id=\"一-Scanner-对象\"><a href=\"#一-Scanner-对象\" class=\"headerlink\" title=\"一. Scanner 对象\"></a>一. Scanner 对象</h3><ul>\n<li><p>Scanner 可以实现人机交互 , java.util.Scanner 是Java 1.5 的新特性</p>\n</li>\n<li><p>基本用法</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);</code></pre></li>\n<li><p>使用 : 通过 Scanner 的 <code>next()</code> 和 <code>nextLine()</code> 方法获取输入的字符串 , 在读取前我们一般需要 使用 <code>hasNext()</code> 与 <code>hasNextLine()</code> 判断是否还有输入数据 . </p>\n</li>\n</ul>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用</span>\n<span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\nSystem.out.println(<span class=\"hljs-string\">&quot;请输入一串字符&quot;</span>);\n<span class=\"hljs-comment\">/// 判断是否输入 字符串</span>\n<span class=\"hljs-keyword\">if</span>(scanner.hasNext())&#123;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> scanner.next();\n    System.out.println(<span class=\"hljs-string\">&quot;输入的字符串: &quot;</span>+str);\n&#125;\n<span class=\"hljs-comment\">// 结束</span>\nscannr.close();\n</code></pre>\n\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 使用</span>\nScanner scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(System.<span class=\"hljs-params\">in</span>)</span>;\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;请输入一串字符&quot;</span>);\n<span class=\"hljs-comment\">/// 判断是否输入 字符串</span>\n<span class=\"hljs-keyword\">if</span>(scanner.has<span class=\"hljs-constructor\">NextLine()</span>)&#123;\n    String str = scanner.next<span class=\"hljs-constructor\">Line()</span>;\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">&quot;输入的字符串: &quot;</span>+str);\n&#125;\n<span class=\"hljs-comment\">// 结束</span>\nscannr.close<span class=\"hljs-literal\">()</span>;</code></pre>\n\n<ul>\n<li><code>next()</code> , <code>nextLine()</code> 的区别<ul>\n<li>next()<ol>\n<li>读取到有效字符才可以结束输入 !</li>\n<li>输入有效字符之前有空白 , next()  自动去除</li>\n<li>只有输入有效字符才把后面的输入的空白座位分隔符或者结束符</li>\n<li><strong><code>next()</code></strong> 不能获取有空格的字符串</li>\n</ol>\n</li>\n<li>nextLine()<ol>\n<li>以 <code>Enter</code> 为结束符 , <code>newxLine()</code> 获取<code>Enter</code> 之前的所有数据</li>\n<li>可以有空格留空</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>nextLine() 使用频率更高</li>\n</ul>\n<h3 id=\"二-顺序结构\"><a href=\"#二-顺序结构\" class=\"headerlink\" title=\"二. 顺序结构\"></a>二. 顺序结构</h3><ul>\n<li>Java 基本结构就是顺序结构 , 除非特别指示 , 否则就按照顺序一句一句执行 . </li>\n<li>顺序结构是最简单的算法结构 . </li>\n<li>语句与语句之间 , 框与框之间是按照从上到下的顺序进行的 , 他由若干个依次执行的处理步骤组成的 , 他是任何一个算法都离不开的一种基本算法结构 . </li>\n</ul>\n<h3 id=\"三-选择结构\"><a href=\"#三-选择结构\" class=\"headerlink\" title=\"三. 选择结构\"></a>三. 选择结构</h3><ol>\n<li><p><code>if</code> 选择结构</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span>(布尔表达式)&#123;\n<span class=\"hljs-comment\">// 表达式值为 true 走这里</span>\n&#125;\n\n<span class=\"hljs-comment\">// if 双选择结构</span>\n<span class=\"hljs-keyword\">if</span>(布尔表达式)&#123;\n\t<span class=\"hljs-comment\">// 表达式值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 表达式为 false 走这里</span>\n&#125;\n\n<span class=\"hljs-comment\">// if 多选择结构</span>\n<span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">1</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式1值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">2</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式值2为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">3</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式3值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 当以上表达式为 false 走这里</span>\n&#125;\n\n<span class=\"hljs-comment\">// 嵌套 if 结构 互相互不干扰</span>\n<span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">3</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式3值为 true 走这里</span>\n    <span class=\"hljs-keyword\">if</span>(布尔表达式<span class=\"hljs-number\">3</span>)&#123;\n\t<span class=\"hljs-comment\">// 表达式3值为 true 走这里</span>\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 当以上表达式为 false 走这里</span>\n&#125;\n&#125;<span class=\"hljs-keyword\">else</span>&#123;\n    <span class=\"hljs-comment\">// 当以上表达式为 false 走这里</span>\n&#125;\n</code></pre></li>\n<li><p><code>switch</code> 多选择结构 </p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">switch</span>(expression)&#123; <span class=\"hljs-comment\">// expression 可以为byte,short,int,char,String(jdk 7 之后)</span>\n    <span class=\"hljs-comment\">//可以添加 任意数量的 case 语句 value必须为字符串常量或字面量</span>\n    <span class=\"hljs-keyword\">case</span> value :　\n        <span class=\"hljs-comment\">// 可以添加相关逻辑</span>\n        <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// break 可有可无 无break继续走下面的case(case穿透) 有break 终止 </span>\n    <span class=\"hljs-keyword\">case</span> value :　\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> value :　\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">default</span> : <span class=\"hljs-comment\">// 可有可无 有默认执行</span>\n        <span class=\"hljs-keyword\">break</span>;\n&#125;\n<span class=\"hljs-comment\">// 如果 expression 类型为String 通过 hashCode() 判断</span></code></pre></li>\n</ol>\n<h3 id=\"四-循环结构\"><a href=\"#四-循环结构\" class=\"headerlink\" title=\"四. 循环结构\"></a>四. 循环结构</h3><ol>\n<li><p><code>while</code> 循环</p>\n<ol>\n<li><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span>(布尔表达式)&#123; <span class=\"hljs-comment\">// 表达式为 true 时 就会循环执行 </span>\n    <span class=\"hljs-comment\">// 循环体</span>\n&#125;</code></pre></li>\n<li><p>大多数情况下会让表达式失效 值为 <code>false</code> 停止执行</p>\n</li>\n<li><p>循环条件为 <code>true</code> 会造成 一直循环死循环, 业务逻辑中避免出现死循环,死循环会导致程序崩溃或降低性能</p>\n</li>\n</ol>\n</li>\n<li><p><code>do</code> … <code>while</code> 循环</p>\n<ol>\n<li><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">do</span>&#123;\n    <span class=\"hljs-comment\">// 循环体</span>\n&#125;<span class=\"hljs-keyword\">while</span>(布尔表达式);</code></pre></li>\n<li><p> 表达式不满足时也至少循环执行一次</p>\n</li>\n<li><p><code>while</code> 先判断后执行 <code>do</code> … <code>while</code> 先执行一次在判断</p>\n</li>\n</ol>\n</li>\n<li><p><code>for</code> 循环</p>\n<ol>\n<li><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span>(定义初始循环控制变量并赋值;布尔表达式;循环控制变量变更)&#123;\n    <span class=\"hljs-comment\">// 循环体</span>\n&#125;</code></pre></li>\n<li><p><code>for</code> 循环的两种方式</p>\n<pre><code class=\"hljs java\">String[] x = [<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>,<span class=\"hljs-string\">&quot;d&quot;</span>];\n<span class=\"hljs-comment\">// 普通 for 循环</span>\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> x.length-<span class=\"hljs-number\">1</span> ; i &gt;= <span class=\"hljs-number\">0</span> ;i--)&#123;\n    System.out.println(x[i]);\n&#125;\n<span class=\"hljs-comment\">// 增强 for 循环</span>\n<span class=\"hljs-keyword\">for</span>(String i : x)&#123;\n    System.out.println(i);\n&#125;</code></pre></li>\n<li><p><code>for</code> 循环 更灵活,更高效</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"五-break-和continue\"><a href=\"#五-break-和continue\" class=\"headerlink\" title=\"五. break 和continue\"></a>五. <code>break</code> 和<code>continue</code></h3><ol>\n<li><strong>break</strong><ul>\n<li><code>break</code>控制循环的流程 .</li>\n<li><code>break</code>用于强行退出循环 , 不再进行剩下的循环 . </li>\n<li><code>break</code>语句也在<code>switch</code>语句中使用 . </li>\n</ul>\n</li>\n<li><strong>continue</strong><ul>\n<li><code>continue</code>用于终止某次循环 . </li>\n<li>结束本次循环 , 不再进行执行循环体中尚未执行的语句 , 进行下一次循环 . </li>\n</ul>\n</li>\n</ol>\n<h3 id=\"六-goto关键字\"><a href=\"#六-goto关键字\" class=\"headerlink\" title=\"六. goto关键字\"></a>六. <code>goto</code>关键字</h3><ol>\n<li><p><code>goto</code> 是Java的一个保留字 , 但并未在语言中得到正式使用 ; Java 中没有goto</p>\n</li>\n<li><p><code>标签</code>: 是指后面跟一个冒号的标识符 , 例如 : label:</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 不建议使用\t</span>\nouter:<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">500</span> ; i++)&#123;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> ; j &lt; i/<span class=\"hljs-number\">2</span> ; j++)&#123;\n        <span class=\"hljs-keyword\">if</span>(i % j == <span class=\"hljs-number\">0</span>)&#123;\n            <span class=\"hljs-keyword\">continue</span> outer;\n        &#125;\n    &#125;\n&#125;</code></pre></li>\n</ol>\n"},{"title":"java基础五","date":"2022-03-20T09:05:00.000Z","_content":"\n# Java方法详解\n\n### 一. 什么是方法\n\n- 方法是语句的集合,他们在一起执行一个功能\n  - 方法是解决一类问题的步骤的有序集合\n  - 方法包含于类和对象中\n  - 方法在程序中创建其他地方引用\n- 设计方法的原则 : 方法的本意是功能块 , 就是实现某个功能的语句块集合 . 我们设计方法的时候最好保持方法的原子性 , **就是一个方法只完成一个功能,这样有利于以后的扩展**\n\n### 二. 方法的定义及调用\n\n1. 方法的定义 : **方法包含一个方法头和一个方法体** .\n\n   - **修饰符** : 定义该方法的访问类型 . \n\n   - **返回值类型** : 方法可能有返回值 .  此方法没有返回值时关键字是 `void` , 此方法有返回值时返回值类型是要返回值得类型 . \n\n   - **方法名** : 方法的实际名称 .\n\n   - **参数类型** ：当方法被调用时传递给方法的参数 , 方法既可以有参也可以无参 . \n\n     - **形式参数** : 在方法被调用时用于接受外界输入的数据 . \n     - **实参** : 调用方法时实际传给方法的数据 . \n\n   - **方法体** :包含具体语句 , 定义该方法的功能 .  \n\n   - 示例:\n\n     ```java\n     修饰符 返回值类型 方法名(参数类型 参数名称 , ....){\n         方法体\n         return 返回值;\n     }\n     ```\n\n   \n\n2. 方法的调用 : \n\n   - 调用方法 : 对象名.方法名(方法参数,方法参数,......) . \n\n   - 当方法返回一个值得时候\n\n     ```java\n     int i = max(30,40);\n     \n     public int max(int i , int j){\n         if(i==j){\n             return 0;\n         }\n     \tif(i>j){\n             return i;\n         }else {\n             return j;\n         }\n     }\n     ```\n\n   - 如果方法没有返回值\n\n     ```java\n     System.out.println(\"无参 !!\");\n     ```\n\n     \n\n### 三. 方法的重载\n\n1. 定义 : 重载就是在一个类中 , 有相同的函数名称 , 参数数量 , 类型不同 , 顺序不同 , 返回类型不同的函数.\n2. 方法的重载规则 : \n   - 方法名必须相同\n   - 参数列表不同\n     - 参数个数不同\n     - 参数类型不同\n     - 参数类型排序不同\n   - 方法的返回类型可以相同也可以不相同\n   - 只有返回类型不同不足以成为方法的重载\n\n### 四. 命令行传参\n\n在运行一个程序的时候传递给他消息 . 这是靠传递命令行参数 `main()`函数实现 . \n\n```java\npublic class Test{\n    public static void main(String args[]){\n        System.out.println(args.length);\n    }\n}\n```\n\n\n\n```\njavac Test.java\njava 报名.Test this is param\n3\n```\n\n\n\n### 五. 可变参数\n\n一个方法只能传递一个可变参数 , 他必须是方法的最后一个参数 . 任何普通参数必须在他之前声明 . \n\n```java\npublic void test(int... i){\n\t\n}\ntest(1,2,3,4,5);\ntest(new int[]{1,2,3,4,5})\n```\n\n\n\n### 六. 递归\n\n方法自己调用自己\n\n- 递归头 : 终止调用自身 . \n- 递归体 : 调用自身的条件 . \n\n```java\n// 示例\npublic int f(int n){\n    if(n==1){\n        return 1;\n    }else {\n        return n*f(n-1);\n    }\n}\n```\n\n**注意** : 能不用就不用递归 ;\n","source":"_posts/java/basic5.md","raw":"---\ntitle: java基础五\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:05:00\n---\n\n# Java方法详解\n\n### 一. 什么是方法\n\n- 方法是语句的集合,他们在一起执行一个功能\n  - 方法是解决一类问题的步骤的有序集合\n  - 方法包含于类和对象中\n  - 方法在程序中创建其他地方引用\n- 设计方法的原则 : 方法的本意是功能块 , 就是实现某个功能的语句块集合 . 我们设计方法的时候最好保持方法的原子性 , **就是一个方法只完成一个功能,这样有利于以后的扩展**\n\n### 二. 方法的定义及调用\n\n1. 方法的定义 : **方法包含一个方法头和一个方法体** .\n\n   - **修饰符** : 定义该方法的访问类型 . \n\n   - **返回值类型** : 方法可能有返回值 .  此方法没有返回值时关键字是 `void` , 此方法有返回值时返回值类型是要返回值得类型 . \n\n   - **方法名** : 方法的实际名称 .\n\n   - **参数类型** ：当方法被调用时传递给方法的参数 , 方法既可以有参也可以无参 . \n\n     - **形式参数** : 在方法被调用时用于接受外界输入的数据 . \n     - **实参** : 调用方法时实际传给方法的数据 . \n\n   - **方法体** :包含具体语句 , 定义该方法的功能 .  \n\n   - 示例:\n\n     ```java\n     修饰符 返回值类型 方法名(参数类型 参数名称 , ....){\n         方法体\n         return 返回值;\n     }\n     ```\n\n   \n\n2. 方法的调用 : \n\n   - 调用方法 : 对象名.方法名(方法参数,方法参数,......) . \n\n   - 当方法返回一个值得时候\n\n     ```java\n     int i = max(30,40);\n     \n     public int max(int i , int j){\n         if(i==j){\n             return 0;\n         }\n     \tif(i>j){\n             return i;\n         }else {\n             return j;\n         }\n     }\n     ```\n\n   - 如果方法没有返回值\n\n     ```java\n     System.out.println(\"无参 !!\");\n     ```\n\n     \n\n### 三. 方法的重载\n\n1. 定义 : 重载就是在一个类中 , 有相同的函数名称 , 参数数量 , 类型不同 , 顺序不同 , 返回类型不同的函数.\n2. 方法的重载规则 : \n   - 方法名必须相同\n   - 参数列表不同\n     - 参数个数不同\n     - 参数类型不同\n     - 参数类型排序不同\n   - 方法的返回类型可以相同也可以不相同\n   - 只有返回类型不同不足以成为方法的重载\n\n### 四. 命令行传参\n\n在运行一个程序的时候传递给他消息 . 这是靠传递命令行参数 `main()`函数实现 . \n\n```java\npublic class Test{\n    public static void main(String args[]){\n        System.out.println(args.length);\n    }\n}\n```\n\n\n\n```\njavac Test.java\njava 报名.Test this is param\n3\n```\n\n\n\n### 五. 可变参数\n\n一个方法只能传递一个可变参数 , 他必须是方法的最后一个参数 . 任何普通参数必须在他之前声明 . \n\n```java\npublic void test(int... i){\n\t\n}\ntest(1,2,3,4,5);\ntest(new int[]{1,2,3,4,5})\n```\n\n\n\n### 六. 递归\n\n方法自己调用自己\n\n- 递归头 : 终止调用自身 . \n- 递归体 : 调用自身的条件 . \n\n```java\n// 示例\npublic int f(int n){\n    if(n==1){\n        return 1;\n    }else {\n        return n*f(n-1);\n    }\n}\n```\n\n**注意** : 能不用就不用递归 ;\n","slug":"java/basic5","published":1,"updated":"2022-03-21T13:18:31.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samf3000sowsp2lqnfio1","content":"<h1 id=\"Java方法详解\"><a href=\"#Java方法详解\" class=\"headerlink\" title=\"Java方法详解\"></a>Java方法详解</h1><h3 id=\"一-什么是方法\"><a href=\"#一-什么是方法\" class=\"headerlink\" title=\"一. 什么是方法\"></a>一. 什么是方法</h3><ul>\n<li>方法是语句的集合,他们在一起执行一个功能<ul>\n<li>方法是解决一类问题的步骤的有序集合</li>\n<li>方法包含于类和对象中</li>\n<li>方法在程序中创建其他地方引用</li>\n</ul>\n</li>\n<li>设计方法的原则 : 方法的本意是功能块 , 就是实现某个功能的语句块集合 . 我们设计方法的时候最好保持方法的原子性 , <strong>就是一个方法只完成一个功能,这样有利于以后的扩展</strong></li>\n</ul>\n<h3 id=\"二-方法的定义及调用\"><a href=\"#二-方法的定义及调用\" class=\"headerlink\" title=\"二. 方法的定义及调用\"></a>二. 方法的定义及调用</h3><ol>\n<li><p>方法的定义 : <strong>方法包含一个方法头和一个方法体</strong> .</p>\n<ul>\n<li><p><strong>修饰符</strong> : 定义该方法的访问类型 . </p>\n</li>\n<li><p><strong>返回值类型</strong> : 方法可能有返回值 .  此方法没有返回值时关键字是 <code>void</code> , 此方法有返回值时返回值类型是要返回值得类型 . </p>\n</li>\n<li><p><strong>方法名</strong> : 方法的实际名称 .</p>\n</li>\n<li><p><strong>参数类型</strong> ：当方法被调用时传递给方法的参数 , 方法既可以有参也可以无参 . </p>\n<ul>\n<li><strong>形式参数</strong> : 在方法被调用时用于接受外界输入的数据 . </li>\n<li><strong>实参</strong> : 调用方法时实际传给方法的数据 . </li>\n</ul>\n</li>\n<li><p><strong>方法体</strong> :包含具体语句 , 定义该方法的功能 .  </p>\n</li>\n<li><p>示例:</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\">修饰符 返回值类型 方法名(参数类型 参数名称 , ....)&#123;\n    方法体\n    <span class=\"hljs-keyword\">return</span> 返回值;\n&#125;</code></pre></div></li>\n</ul>\n</li>\n<li><p>方法的调用 : </p>\n<ul>\n<li><p>调用方法 : 对象名.方法名(方法参数,方法参数,……) . </p>\n</li>\n<li><p>当方法返回一个值得时候</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> max(<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>);\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i , <span class=\"hljs-type\">int</span> j)</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(i==j)&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    &#125;\n\t<span class=\"hljs-keyword\">if</span>(i&gt;j)&#123;\n        <span class=\"hljs-keyword\">return</span> i;\n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> j;\n    &#125;\n&#125;</code></pre></div></li>\n<li><p>如果方法没有返回值</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-string\">&quot;无参 !!&quot;</span>);</code></pre></div></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三-方法的重载\"><a href=\"#三-方法的重载\" class=\"headerlink\" title=\"三. 方法的重载\"></a>三. 方法的重载</h3><ol>\n<li>定义 : 重载就是在一个类中 , 有相同的函数名称 , 参数数量 , 类型不同 , 顺序不同 , 返回类型不同的函数.</li>\n<li>方法的重载规则 : <ul>\n<li>方法名必须相同</li>\n<li>参数列表不同<ul>\n<li>参数个数不同</li>\n<li>参数类型不同</li>\n<li>参数类型排序不同</li>\n</ul>\n</li>\n<li>方法的返回类型可以相同也可以不相同</li>\n<li>只有返回类型不同不足以成为方法的重载</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四-命令行传参\"><a href=\"#四-命令行传参\" class=\"headerlink\" title=\"四. 命令行传参\"></a>四. 命令行传参</h3><p>在运行一个程序的时候传递给他消息 . 这是靠传递命令行参数 <code>main()</code>函数实现 . </p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span>&#123;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;\n        System.out.println(args.length);\n    &#125;\n&#125;</code></pre></div>\n\n\n\n<div class=\"code-wrapper\"><pre><code class=\"hljs kotlin\">javac Test.java\njava 报名.Test <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> param\n<span class=\"hljs-number\">3</span></code></pre></div>\n\n\n\n<h3 id=\"五-可变参数\"><a href=\"#五-可变参数\" class=\"headerlink\" title=\"五. 可变参数\"></a>五. 可变参数</h3><p>一个方法只能传递一个可变参数 , 他必须是方法的最后一个参数 . 任何普通参数必须在他之前声明 . </p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>... i)</span>&#123;\n\t\n&#125;\ntest(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);\ntest(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;)</code></pre></div>\n\n\n\n<h3 id=\"六-递归\"><a href=\"#六-递归\" class=\"headerlink\" title=\"六. 递归\"></a>六. 递归</h3><p>方法自己调用自己</p>\n<ul>\n<li>递归头 : 终止调用自身 . </li>\n<li>递归体 : 调用自身的条件 . </li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 示例</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> n*f(n-<span class=\"hljs-number\">1</span>);\n    &#125;\n&#125;</code></pre></div>\n\n<p><strong>注意</strong> : 能不用就不用递归 ;</p>\n","site":{"data":{}},"wordcount":1231,"excerpt":"","more":"<h1 id=\"Java方法详解\"><a href=\"#Java方法详解\" class=\"headerlink\" title=\"Java方法详解\"></a>Java方法详解</h1><h3 id=\"一-什么是方法\"><a href=\"#一-什么是方法\" class=\"headerlink\" title=\"一. 什么是方法\"></a>一. 什么是方法</h3><ul>\n<li>方法是语句的集合,他们在一起执行一个功能<ul>\n<li>方法是解决一类问题的步骤的有序集合</li>\n<li>方法包含于类和对象中</li>\n<li>方法在程序中创建其他地方引用</li>\n</ul>\n</li>\n<li>设计方法的原则 : 方法的本意是功能块 , 就是实现某个功能的语句块集合 . 我们设计方法的时候最好保持方法的原子性 , <strong>就是一个方法只完成一个功能,这样有利于以后的扩展</strong></li>\n</ul>\n<h3 id=\"二-方法的定义及调用\"><a href=\"#二-方法的定义及调用\" class=\"headerlink\" title=\"二. 方法的定义及调用\"></a>二. 方法的定义及调用</h3><ol>\n<li><p>方法的定义 : <strong>方法包含一个方法头和一个方法体</strong> .</p>\n<ul>\n<li><p><strong>修饰符</strong> : 定义该方法的访问类型 . </p>\n</li>\n<li><p><strong>返回值类型</strong> : 方法可能有返回值 .  此方法没有返回值时关键字是 <code>void</code> , 此方法有返回值时返回值类型是要返回值得类型 . </p>\n</li>\n<li><p><strong>方法名</strong> : 方法的实际名称 .</p>\n</li>\n<li><p><strong>参数类型</strong> ：当方法被调用时传递给方法的参数 , 方法既可以有参也可以无参 . </p>\n<ul>\n<li><strong>形式参数</strong> : 在方法被调用时用于接受外界输入的数据 . </li>\n<li><strong>实参</strong> : 调用方法时实际传给方法的数据 . </li>\n</ul>\n</li>\n<li><p><strong>方法体</strong> :包含具体语句 , 定义该方法的功能 .  </p>\n</li>\n<li><p>示例:</p>\n<pre><code class=\"hljs java\">修饰符 返回值类型 方法名(参数类型 参数名称 , ....)&#123;\n    方法体\n    <span class=\"hljs-keyword\">return</span> 返回值;\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p>方法的调用 : </p>\n<ul>\n<li><p>调用方法 : 对象名.方法名(方法参数,方法参数,……) . </p>\n</li>\n<li><p>当方法返回一个值得时候</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> max(<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>);\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i , <span class=\"hljs-type\">int</span> j)</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(i==j)&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    &#125;\n\t<span class=\"hljs-keyword\">if</span>(i&gt;j)&#123;\n        <span class=\"hljs-keyword\">return</span> i;\n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> j;\n    &#125;\n&#125;</code></pre></li>\n<li><p>如果方法没有返回值</p>\n<pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-string\">&quot;无参 !!&quot;</span>);</code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三-方法的重载\"><a href=\"#三-方法的重载\" class=\"headerlink\" title=\"三. 方法的重载\"></a>三. 方法的重载</h3><ol>\n<li>定义 : 重载就是在一个类中 , 有相同的函数名称 , 参数数量 , 类型不同 , 顺序不同 , 返回类型不同的函数.</li>\n<li>方法的重载规则 : <ul>\n<li>方法名必须相同</li>\n<li>参数列表不同<ul>\n<li>参数个数不同</li>\n<li>参数类型不同</li>\n<li>参数类型排序不同</li>\n</ul>\n</li>\n<li>方法的返回类型可以相同也可以不相同</li>\n<li>只有返回类型不同不足以成为方法的重载</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"四-命令行传参\"><a href=\"#四-命令行传参\" class=\"headerlink\" title=\"四. 命令行传参\"></a>四. 命令行传参</h3><p>在运行一个程序的时候传递给他消息 . 这是靠传递命令行参数 <code>main()</code>函数实现 . </p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span>&#123;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span>&#123;\n        System.out.println(args.length);\n    &#125;\n&#125;</code></pre>\n\n\n\n<pre><code class=\"hljs kotlin\">javac Test.java\njava 报名.Test <span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> param\n<span class=\"hljs-number\">3</span></code></pre>\n\n\n\n<h3 id=\"五-可变参数\"><a href=\"#五-可变参数\" class=\"headerlink\" title=\"五. 可变参数\"></a>五. 可变参数</h3><p>一个方法只能传递一个可变参数 , 他必须是方法的最后一个参数 . 任何普通参数必须在他之前声明 . </p>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>... i)</span>&#123;\n\t\n&#125;\ntest(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);\ntest(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;)</code></pre>\n\n\n\n<h3 id=\"六-递归\"><a href=\"#六-递归\" class=\"headerlink\" title=\"六. 递归\"></a>六. 递归</h3><p>方法自己调用自己</p>\n<ul>\n<li>递归头 : 终止调用自身 . </li>\n<li>递归体 : 调用自身的条件 . </li>\n</ul>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 示例</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">f</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;\n    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;<span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> n*f(n-<span class=\"hljs-number\">1</span>);\n    &#125;\n&#125;</code></pre>\n\n<p><strong>注意</strong> : 能不用就不用递归 ;</p>\n"},{"title":"java基础六","date":"2022-03-20T09:06:00.000Z","_content":"\n## 数组\n\n### 一. 数组的概述\n\n####　数组的定义\n\n数组是相同类型数据的有序集合 . 是相同类型的若干数据 , 按照一定的先后次序排列组合而成 . 其中每一个数据称作一个数组元素 , 每个数组元素可以通过一个下标来访问它 .\n\n#### 数组的四个基本特点\n\n- 其长度是确定的 . 数组一旦被创建 , 他的大小就是不可以改变的 .\n- 其元素必须是想同类型 , 不允许出现混合类型 .\n- 数组中元素可以是任意数据类型 , 包括基本数据类型和引用类型\n- 数组变量属引用类型 , 数组也可以看成是对象 , 数组中的每个元素相当于该对象成员的变量 . 数组本身就是对象 , java中对象实在堆中 , 因此数组无论保存原始类型还是其他对像类型 , **数组对象本身是在堆中 **. \n\n### 二. 数组的声明和创建\n\n1. 首先必须声明数组变量 , 才能在程序中使用数组 .\n\n```java\ndataType [] array;\ndataType array[];\n```\n\n2. java语言使用 `new` 操作符来创建数组 .\n\n```java\ndataType[] array = new dataType[arraySize];\n```\n\n3. 数组元素通过索引访问 , 数组索引从 `0` 开始\n4. 数组长度 `arrays.length`\n\n### 三. 数组使用\n\n#### 声明一个数组元素\n\n```java\n// 声明一个元素2\nint num[];\nint[] num;\n\n```\n\n#### 创建一个数组\n\n```java\nnum = new int[10]; // 创建一个空间为10 的数组\n```\n\n#### 赋值\n\n```java\nnum[0] = 1;// 给数组赋值\n```\n\n####  创建并赋值\n\n```java\nint[] i = {1,2,3,4,5,6,7,8,9,0};\n```\n\n#### 数组的默认初始化\n\n数组是引用类型 , 它的元素相当于类的实例变量 , 因此数组一经分配空间 , 其中每个元素也被按照实例变量同样的方式被隐式初始化 . \n\n#### for 循环\n\n```java\nint[] arrays = {1,2,3,4,5,6};\nfor(int i = 0 ; int < arrays.length ; i++){\n    System.out.println(arrays[i]);\n}\nfor(int array : arrays){\n    System.out.println(array);\n}\n```\n\n#### 数组做方法入参\n\n```java\nint[] arrays = {1,2,3,4,5,6};\nprintArrays(arrays);\npublic void printArrays(int[] arrays){\n    for(int array : arrays){\n    \tSystem.out.println(array);\n\t}\n}\n```\n\n#### 数组做返回值\n\n```java\nint[] arrays = new int[10];\narrays = valueArrays(arrays);\npublic int[] valueArrays(int[] array){\n    int[] arrays = new int[array.length];\n    for(int i = 0 ; int < arrays.length ; i++){\n    \tarrays[i] = i;\n\t}\n    return arrays;\n}\n```\n\n### 四. 多维数组\n\n多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组\n\n```java\n// 例\nString[][] str = new String[3][4];\n```\n\n#### 多维数组的动态初始化（以二维数组为例）\n\n```java\n// 格式 : type[][] typeName = new type[typeLength1][typeLength2];\n// type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数\n// 例\nint[][] a = new int[2][3];\n```\n\n#### 多维数组的引用（以二维数组为例)\n\n```java\n// 对二维数组中的每个元素，引用方式为 arrayName[index1][index2]\nnum[1][0];\n```\n\n### 五. Arrays 类\n\n`java.util.Arrays` 类能方便地操作数组，它提供的所有方法都是静态的。\n\n- 给数组赋值：通过 fill 方法。\n- 对数组排序：通过 sort 方法,按升序。\n- 比较数组：通过 equals 方法比较数组中元素值是否相等。\n- 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。\n\n| 序号 | 方法和说明                                                   |\n| :--- | :----------------------------------------------------------- |\n| 1    | **public static int binarySearch(Object[] a, Object key)** 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(*插入点*) - 1)。 |\n| 2    | **public static boolean equals(long[] a, long[] a2)** 如果两个指定的 long 型数组彼此*相等*，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |\n| 3    | **public static void fill(int[] a, int val)** 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |\n| 4    | **public static void sort(Object[] a)** 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |\n\n### 六. 稀疏数组\n\n当一个数组中大部分元素为**0**时 , 或者为统一数值时 , 可以通过稀疏数组来保存数据 . \n\n#### 处理方式\n\n- 记录数组一共有几行几列 , 有多少个不同值 .\n- 把具有不同值的元素和行列及值记录在一个小规模的数组中 , 从而缩小程序的规模 .\n\n```java\n public static void main(String[] args) {\n\n        /**\n         * 初始化二维数组\n         * <p>\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 1 0 0 0 0 0 0 0 0\n         *     0 0 0 0 2 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         * </p>\n         */\n        //初始化原数组\n        int[][] array = new int[11][11];\n        array[1][2] = 1;\n        array[2][4] = 2;\n        for(int[] row : array){\n            for(int item : row){\n                System.out.printf(\"%d\\t\",item);\n            }\n        }\n\n        System.out.println(\"---------> 二维数组转稀疏数组\");\n\n        /**\n         * 稀疏数组\n         * <p>\n         *     11 11 2\n         *     1  2  1\n         *     2  4  2\n         * </p>\n         */\n        //得到非0数据数\n        int sum = 0;\n        for (int i = 0;i<11;i++){\n            for(int j = 0;j<11;j++){\n                if(array[i][j] != 0){\n                    sum++;\n                }\n            }\n        }\n        //创建稀疏数组\n        int[][] sparseArray = new int[sum+1][3];\n        //给稀疏数组赋值\n        sparseArray[0][0] = 11;\n        sparseArray[0][1] = 11;\n        sparseArray[0][2] = sum;\n        //将非0的数放入稀疏数组\n        //count：标识第几个非0数\n        int count = 0;\n        for (int i = 0;i<11;i++){\n            for(int j = 0;j<11;j++){\n                if(array[i][j] != 0){\n                    count++;\n                    sparseArray[count][0] = i;\n                    sparseArray[count][1] = j;\n                    sparseArray[count][2] = array[i][j];\n                }\n            }\n        }\n        //遍历稀疏数组\n        for(int i = 0;i<sparseArray.length;i++){\n            System.out.printf(\"%d%d%d\\t\",sparseArray[i][0],sparseArray[i][1],sparseArray[i][2]);\n        }\n\n        System.out.println(\"----------->稀疏数组转回原始数组\");\n\n        /**\n         * 恢复的二维数组\n         * <p>\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 1 0 0 0 0 0 0 0 0\n         *     0 0 0 0 2 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         * </p>\n         */\n\n        int[][] oldArray = new int[sparseArray[0][0]][sparseArray[0][1]];\n        //将原来非0的数填充回去\n        for(int i = 1;i<=count;i++){\n          oldArray[sparseArray[i][0]][sparseArray[i][1]] = sparseArray[i][2];\n        }\n        //遍历刚转回的原始数组\n        for(int[] row : oldArray){\n            for(int item : row){\n                System.out.printf(\"%d\\t\",item);\n            }\n        }\n    }\n```\n\n","source":"_posts/java/basic6.md","raw":"---\ntitle: java基础六\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:06:00\n---\n\n## 数组\n\n### 一. 数组的概述\n\n####　数组的定义\n\n数组是相同类型数据的有序集合 . 是相同类型的若干数据 , 按照一定的先后次序排列组合而成 . 其中每一个数据称作一个数组元素 , 每个数组元素可以通过一个下标来访问它 .\n\n#### 数组的四个基本特点\n\n- 其长度是确定的 . 数组一旦被创建 , 他的大小就是不可以改变的 .\n- 其元素必须是想同类型 , 不允许出现混合类型 .\n- 数组中元素可以是任意数据类型 , 包括基本数据类型和引用类型\n- 数组变量属引用类型 , 数组也可以看成是对象 , 数组中的每个元素相当于该对象成员的变量 . 数组本身就是对象 , java中对象实在堆中 , 因此数组无论保存原始类型还是其他对像类型 , **数组对象本身是在堆中 **. \n\n### 二. 数组的声明和创建\n\n1. 首先必须声明数组变量 , 才能在程序中使用数组 .\n\n```java\ndataType [] array;\ndataType array[];\n```\n\n2. java语言使用 `new` 操作符来创建数组 .\n\n```java\ndataType[] array = new dataType[arraySize];\n```\n\n3. 数组元素通过索引访问 , 数组索引从 `0` 开始\n4. 数组长度 `arrays.length`\n\n### 三. 数组使用\n\n#### 声明一个数组元素\n\n```java\n// 声明一个元素2\nint num[];\nint[] num;\n\n```\n\n#### 创建一个数组\n\n```java\nnum = new int[10]; // 创建一个空间为10 的数组\n```\n\n#### 赋值\n\n```java\nnum[0] = 1;// 给数组赋值\n```\n\n####  创建并赋值\n\n```java\nint[] i = {1,2,3,4,5,6,7,8,9,0};\n```\n\n#### 数组的默认初始化\n\n数组是引用类型 , 它的元素相当于类的实例变量 , 因此数组一经分配空间 , 其中每个元素也被按照实例变量同样的方式被隐式初始化 . \n\n#### for 循环\n\n```java\nint[] arrays = {1,2,3,4,5,6};\nfor(int i = 0 ; int < arrays.length ; i++){\n    System.out.println(arrays[i]);\n}\nfor(int array : arrays){\n    System.out.println(array);\n}\n```\n\n#### 数组做方法入参\n\n```java\nint[] arrays = {1,2,3,4,5,6};\nprintArrays(arrays);\npublic void printArrays(int[] arrays){\n    for(int array : arrays){\n    \tSystem.out.println(array);\n\t}\n}\n```\n\n#### 数组做返回值\n\n```java\nint[] arrays = new int[10];\narrays = valueArrays(arrays);\npublic int[] valueArrays(int[] array){\n    int[] arrays = new int[array.length];\n    for(int i = 0 ; int < arrays.length ; i++){\n    \tarrays[i] = i;\n\t}\n    return arrays;\n}\n```\n\n### 四. 多维数组\n\n多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组\n\n```java\n// 例\nString[][] str = new String[3][4];\n```\n\n#### 多维数组的动态初始化（以二维数组为例）\n\n```java\n// 格式 : type[][] typeName = new type[typeLength1][typeLength2];\n// type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数\n// 例\nint[][] a = new int[2][3];\n```\n\n#### 多维数组的引用（以二维数组为例)\n\n```java\n// 对二维数组中的每个元素，引用方式为 arrayName[index1][index2]\nnum[1][0];\n```\n\n### 五. Arrays 类\n\n`java.util.Arrays` 类能方便地操作数组，它提供的所有方法都是静态的。\n\n- 给数组赋值：通过 fill 方法。\n- 对数组排序：通过 sort 方法,按升序。\n- 比较数组：通过 equals 方法比较数组中元素值是否相等。\n- 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。\n\n| 序号 | 方法和说明                                                   |\n| :--- | :----------------------------------------------------------- |\n| 1    | **public static int binarySearch(Object[] a, Object key)** 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(*插入点*) - 1)。 |\n| 2    | **public static boolean equals(long[] a, long[] a2)** 如果两个指定的 long 型数组彼此*相等*，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |\n| 3    | **public static void fill(int[] a, int val)** 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |\n| 4    | **public static void sort(Object[] a)** 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |\n\n### 六. 稀疏数组\n\n当一个数组中大部分元素为**0**时 , 或者为统一数值时 , 可以通过稀疏数组来保存数据 . \n\n#### 处理方式\n\n- 记录数组一共有几行几列 , 有多少个不同值 .\n- 把具有不同值的元素和行列及值记录在一个小规模的数组中 , 从而缩小程序的规模 .\n\n```java\n public static void main(String[] args) {\n\n        /**\n         * 初始化二维数组\n         * <p>\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 1 0 0 0 0 0 0 0 0\n         *     0 0 0 0 2 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         * </p>\n         */\n        //初始化原数组\n        int[][] array = new int[11][11];\n        array[1][2] = 1;\n        array[2][4] = 2;\n        for(int[] row : array){\n            for(int item : row){\n                System.out.printf(\"%d\\t\",item);\n            }\n        }\n\n        System.out.println(\"---------> 二维数组转稀疏数组\");\n\n        /**\n         * 稀疏数组\n         * <p>\n         *     11 11 2\n         *     1  2  1\n         *     2  4  2\n         * </p>\n         */\n        //得到非0数据数\n        int sum = 0;\n        for (int i = 0;i<11;i++){\n            for(int j = 0;j<11;j++){\n                if(array[i][j] != 0){\n                    sum++;\n                }\n            }\n        }\n        //创建稀疏数组\n        int[][] sparseArray = new int[sum+1][3];\n        //给稀疏数组赋值\n        sparseArray[0][0] = 11;\n        sparseArray[0][1] = 11;\n        sparseArray[0][2] = sum;\n        //将非0的数放入稀疏数组\n        //count：标识第几个非0数\n        int count = 0;\n        for (int i = 0;i<11;i++){\n            for(int j = 0;j<11;j++){\n                if(array[i][j] != 0){\n                    count++;\n                    sparseArray[count][0] = i;\n                    sparseArray[count][1] = j;\n                    sparseArray[count][2] = array[i][j];\n                }\n            }\n        }\n        //遍历稀疏数组\n        for(int i = 0;i<sparseArray.length;i++){\n            System.out.printf(\"%d%d%d\\t\",sparseArray[i][0],sparseArray[i][1],sparseArray[i][2]);\n        }\n\n        System.out.println(\"----------->稀疏数组转回原始数组\");\n\n        /**\n         * 恢复的二维数组\n         * <p>\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 1 0 0 0 0 0 0 0 0\n         *     0 0 0 0 2 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         *     0 0 0 0 0 0 0 0 0 0 0\n         * </p>\n         */\n\n        int[][] oldArray = new int[sparseArray[0][0]][sparseArray[0][1]];\n        //将原来非0的数填充回去\n        for(int i = 1;i<=count;i++){\n          oldArray[sparseArray[i][0]][sparseArray[i][1]] = sparseArray[i][2];\n        }\n        //遍历刚转回的原始数组\n        for(int[] row : oldArray){\n            for(int item : row){\n                System.out.printf(\"%d\\t\",item);\n            }\n        }\n    }\n```\n\n","slug":"java/basic6","published":1,"updated":"2022-03-21T13:20:26.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samf3000uowsp40kefx99","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"一-数组的概述\"><a href=\"#一-数组的概述\" class=\"headerlink\" title=\"一. 数组的概述\"></a>一. 数组的概述</h3><h4 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h4><p>数组是相同类型数据的有序集合 . 是相同类型的若干数据 , 按照一定的先后次序排列组合而成 . 其中每一个数据称作一个数组元素 , 每个数组元素可以通过一个下标来访问它 .</p>\n<h4 id=\"数组的四个基本特点\"><a href=\"#数组的四个基本特点\" class=\"headerlink\" title=\"数组的四个基本特点\"></a>数组的四个基本特点</h4><ul>\n<li>其长度是确定的 . 数组一旦被创建 , 他的大小就是不可以改变的 .</li>\n<li>其元素必须是想同类型 , 不允许出现混合类型 .</li>\n<li>数组中元素可以是任意数据类型 , 包括基本数据类型和引用类型</li>\n<li>数组变量属引用类型 , 数组也可以看成是对象 , 数组中的每个元素相当于该对象成员的变量 . 数组本身就是对象 , java中对象实在堆中 , 因此数组无论保存原始类型还是其他对像类型 , **数组对象本身是在堆中 **. </li>\n</ul>\n<h3 id=\"二-数组的声明和创建\"><a href=\"#二-数组的声明和创建\" class=\"headerlink\" title=\"二. 数组的声明和创建\"></a>二. 数组的声明和创建</h3><ol>\n<li>首先必须声明数组变量 , 才能在程序中使用数组 .</li>\n</ol>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\">dataType [] array;\ndataType array[];</code></pre></div>\n\n<ol start=\"2\">\n<li>java语言使用 <code>new</code> 操作符来创建数组 .</li>\n</ol>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\">dataType[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">dataType</span>[arraySize];</code></pre></div>\n\n<ol start=\"3\">\n<li>数组元素通过索引访问 , 数组索引从 <code>0</code> 开始</li>\n<li>数组长度 <code>arrays.length</code></li>\n</ol>\n<h3 id=\"三-数组使用\"><a href=\"#三-数组使用\" class=\"headerlink\" title=\"三. 数组使用\"></a>三. 数组使用</h3><h4 id=\"声明一个数组元素\"><a href=\"#声明一个数组元素\" class=\"headerlink\" title=\"声明一个数组元素\"></a>声明一个数组元素</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 声明一个元素2</span>\n<span class=\"hljs-type\">int</span> num[];\n<span class=\"hljs-type\">int</span>[] num;\n</code></pre></div>\n\n<h4 id=\"创建一个数组\"><a href=\"#创建一个数组\" class=\"headerlink\" title=\"创建一个数组\"></a>创建一个数组</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\">num = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>]; <span class=\"hljs-comment\">// 创建一个空间为10 的数组</span></code></pre></div>\n\n<h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\">num[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 给数组赋值</span></code></pre></div>\n\n<h4 id=\"创建并赋值\"><a href=\"#创建并赋值\" class=\"headerlink\" title=\"创建并赋值\"></a>创建并赋值</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] i = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>&#125;;</code></pre></div>\n\n<h4 id=\"数组的默认初始化\"><a href=\"#数组的默认初始化\" class=\"headerlink\" title=\"数组的默认初始化\"></a>数组的默认初始化</h4><p>数组是引用类型 , 它的元素相当于类的实例变量 , 因此数组一经分配空间 , 其中每个元素也被按照实例变量同样的方式被隐式初始化 . </p>\n<h4 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] arrays = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;;\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ; <span class=\"hljs-type\">int</span> &lt; arrays.length ; i++)&#123;\n    System.out.println(arrays[i]);\n&#125;\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> array : arrays)&#123;\n    System.out.println(array);\n&#125;</code></pre></div>\n\n<h4 id=\"数组做方法入参\"><a href=\"#数组做方法入参\" class=\"headerlink\" title=\"数组做方法入参\"></a>数组做方法入参</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] arrays = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;;\nprintArrays(arrays);\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArrays</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arrays)</span>&#123;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> array : arrays)&#123;\n    \tSystem.out.println(array);\n\t&#125;\n&#125;</code></pre></div>\n\n<h4 id=\"数组做返回值\"><a href=\"#数组做返回值\" class=\"headerlink\" title=\"数组做返回值\"></a>数组做返回值</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] arrays = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];\narrays = valueArrays(arrays);\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] valueArrays(<span class=\"hljs-type\">int</span>[] array)&#123;\n    <span class=\"hljs-type\">int</span>[] arrays = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[array.length];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ; <span class=\"hljs-type\">int</span> &lt; arrays.length ; i++)&#123;\n    \tarrays[i] = i;\n\t&#125;\n    <span class=\"hljs-keyword\">return</span> arrays;\n&#125;</code></pre></div>\n\n<h3 id=\"四-多维数组\"><a href=\"#四-多维数组\" class=\"headerlink\" title=\"四. 多维数组\"></a>四. 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 例</span>\nString[][] str = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">4</span>];</code></pre></div>\n\n<h4 id=\"多维数组的动态初始化（以二维数组为例）\"><a href=\"#多维数组的动态初始化（以二维数组为例）\" class=\"headerlink\" title=\"多维数组的动态初始化（以二维数组为例）\"></a>多维数组的动态初始化（以二维数组为例）</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 格式 : type[][] typeName = new type[typeLength1][typeLength2];</span>\n<span class=\"hljs-comment\">// type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数</span>\n<span class=\"hljs-comment\">// 例</span>\n<span class=\"hljs-type\">int</span>[][] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>];</code></pre></div>\n\n<h4 id=\"多维数组的引用（以二维数组为例\"><a href=\"#多维数组的引用（以二维数组为例\" class=\"headerlink\" title=\"多维数组的引用（以二维数组为例)\"></a>多维数组的引用（以二维数组为例)</h4><div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 对二维数组中的每个元素，引用方式为 arrayName[index1][index2]</span>\nnum[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];</code></pre></div>\n\n<h3 id=\"五-Arrays-类\"><a href=\"#五-Arrays-类\" class=\"headerlink\" title=\"五. Arrays 类\"></a>五. Arrays 类</h3><p><code>java.util.Arrays</code> 类能方便地操作数组，它提供的所有方法都是静态的。</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法和说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><strong>public static int binarySearch(Object[] a, Object key)</strong> 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><strong>public static boolean equals(long[] a, long[] a2)</strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><strong>public static void fill(int[] a, int val)</strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n</tbody></table>\n<h3 id=\"六-稀疏数组\"><a href=\"#六-稀疏数组\" class=\"headerlink\" title=\"六. 稀疏数组\"></a>六. 稀疏数组</h3><p>当一个数组中大部分元素为<strong>0</strong>时 , 或者为统一数值时 , 可以通过稀疏数组来保存数据 . </p>\n<h4 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h4><ul>\n<li>记录数组一共有几行几列 , 有多少个不同值 .</li>\n<li>把具有不同值的元素和行列及值记录在一个小规模的数组中 , 从而缩小程序的规模 .</li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;\n\n       <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">        * 初始化二维数组</span>\n<span class=\"hljs-comment\">        * &lt;p&gt;</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 1 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 2 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        * &lt;/p&gt;</span>\n<span class=\"hljs-comment\">        */</span>\n       <span class=\"hljs-comment\">//初始化原数组</span>\n       <span class=\"hljs-type\">int</span>[][] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">11</span>][<span class=\"hljs-number\">11</span>];\n       array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;\n       array[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">2</span>;\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span>[] row : array)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> item : row)&#123;\n               System.out.printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>,item);\n           &#125;\n       &#125;\n\n       System.out.println(<span class=\"hljs-string\">&quot;---------&gt; 二维数组转稀疏数组&quot;</span>);\n\n       <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">        * 稀疏数组</span>\n<span class=\"hljs-comment\">        * &lt;p&gt;</span>\n<span class=\"hljs-comment\">        *     11 11 2</span>\n<span class=\"hljs-comment\">        *     1  2  1</span>\n<span class=\"hljs-comment\">        *     2  4  2</span>\n<span class=\"hljs-comment\">        * &lt;/p&gt;</span>\n<span class=\"hljs-comment\">        */</span>\n       <span class=\"hljs-comment\">//得到非0数据数</span>\n       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">11</span>;i++)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">11</span>;j++)&#123;\n               <span class=\"hljs-keyword\">if</span>(array[i][j] != <span class=\"hljs-number\">0</span>)&#123;\n                   sum++;\n               &#125;\n           &#125;\n       &#125;\n       <span class=\"hljs-comment\">//创建稀疏数组</span>\n       <span class=\"hljs-type\">int</span>[][] sparseArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[sum+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">3</span>];\n       <span class=\"hljs-comment\">//给稀疏数组赋值</span>\n       sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">11</span>;\n       sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">11</span>;\n       sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = sum;\n       <span class=\"hljs-comment\">//将非0的数放入稀疏数组</span>\n       <span class=\"hljs-comment\">//count：标识第几个非0数</span>\n       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">11</span>;i++)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">11</span>;j++)&#123;\n               <span class=\"hljs-keyword\">if</span>(array[i][j] != <span class=\"hljs-number\">0</span>)&#123;\n                   count++;\n                   sparseArray[count][<span class=\"hljs-number\">0</span>] = i;\n                   sparseArray[count][<span class=\"hljs-number\">1</span>] = j;\n                   sparseArray[count][<span class=\"hljs-number\">2</span>] = array[i][j];\n               &#125;\n           &#125;\n       &#125;\n       <span class=\"hljs-comment\">//遍历稀疏数组</span>\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;sparseArray.length;i++)&#123;\n           System.out.printf(<span class=\"hljs-string\">&quot;%d%d%d\\t&quot;</span>,sparseArray[i][<span class=\"hljs-number\">0</span>],sparseArray[i][<span class=\"hljs-number\">1</span>],sparseArray[i][<span class=\"hljs-number\">2</span>]);\n       &#125;\n\n       System.out.println(<span class=\"hljs-string\">&quot;-----------&gt;稀疏数组转回原始数组&quot;</span>);\n\n       <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">        * 恢复的二维数组</span>\n<span class=\"hljs-comment\">        * &lt;p&gt;</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 1 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 2 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        * &lt;/p&gt;</span>\n<span class=\"hljs-comment\">        */</span>\n\n       <span class=\"hljs-type\">int</span>[][] oldArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]][sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]];\n       <span class=\"hljs-comment\">//将原来非0的数填充回去</span>\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;i&lt;=count;i++)&#123;\n         oldArray[sparseArray[i][<span class=\"hljs-number\">0</span>]][sparseArray[i][<span class=\"hljs-number\">1</span>]] = sparseArray[i][<span class=\"hljs-number\">2</span>];\n       &#125;\n       <span class=\"hljs-comment\">//遍历刚转回的原始数组</span>\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span>[] row : oldArray)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> item : row)&#123;\n               System.out.printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>,item);\n           &#125;\n       &#125;\n   &#125;</code></pre></div>\n\n","site":{"data":{}},"wordcount":3938,"excerpt":"","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"一-数组的概述\"><a href=\"#一-数组的概述\" class=\"headerlink\" title=\"一. 数组的概述\"></a>一. 数组的概述</h3><h4 id=\"数组的定义\"><a href=\"#数组的定义\" class=\"headerlink\" title=\"数组的定义\"></a>数组的定义</h4><p>数组是相同类型数据的有序集合 . 是相同类型的若干数据 , 按照一定的先后次序排列组合而成 . 其中每一个数据称作一个数组元素 , 每个数组元素可以通过一个下标来访问它 .</p>\n<h4 id=\"数组的四个基本特点\"><a href=\"#数组的四个基本特点\" class=\"headerlink\" title=\"数组的四个基本特点\"></a>数组的四个基本特点</h4><ul>\n<li>其长度是确定的 . 数组一旦被创建 , 他的大小就是不可以改变的 .</li>\n<li>其元素必须是想同类型 , 不允许出现混合类型 .</li>\n<li>数组中元素可以是任意数据类型 , 包括基本数据类型和引用类型</li>\n<li>数组变量属引用类型 , 数组也可以看成是对象 , 数组中的每个元素相当于该对象成员的变量 . 数组本身就是对象 , java中对象实在堆中 , 因此数组无论保存原始类型还是其他对像类型 , **数组对象本身是在堆中 **. </li>\n</ul>\n<h3 id=\"二-数组的声明和创建\"><a href=\"#二-数组的声明和创建\" class=\"headerlink\" title=\"二. 数组的声明和创建\"></a>二. 数组的声明和创建</h3><ol>\n<li>首先必须声明数组变量 , 才能在程序中使用数组 .</li>\n</ol>\n<pre><code class=\"hljs java\">dataType [] array;\ndataType array[];</code></pre>\n\n<ol start=\"2\">\n<li>java语言使用 <code>new</code> 操作符来创建数组 .</li>\n</ol>\n<pre><code class=\"hljs java\">dataType[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">dataType</span>[arraySize];</code></pre>\n\n<ol start=\"3\">\n<li>数组元素通过索引访问 , 数组索引从 <code>0</code> 开始</li>\n<li>数组长度 <code>arrays.length</code></li>\n</ol>\n<h3 id=\"三-数组使用\"><a href=\"#三-数组使用\" class=\"headerlink\" title=\"三. 数组使用\"></a>三. 数组使用</h3><h4 id=\"声明一个数组元素\"><a href=\"#声明一个数组元素\" class=\"headerlink\" title=\"声明一个数组元素\"></a>声明一个数组元素</h4><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 声明一个元素2</span>\n<span class=\"hljs-type\">int</span> num[];\n<span class=\"hljs-type\">int</span>[] num;\n</code></pre>\n\n<h4 id=\"创建一个数组\"><a href=\"#创建一个数组\" class=\"headerlink\" title=\"创建一个数组\"></a>创建一个数组</h4><pre><code class=\"hljs java\">num = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>]; <span class=\"hljs-comment\">// 创建一个空间为10 的数组</span></code></pre>\n\n<h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><pre><code class=\"hljs java\">num[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 给数组赋值</span></code></pre>\n\n<h4 id=\"创建并赋值\"><a href=\"#创建并赋值\" class=\"headerlink\" title=\"创建并赋值\"></a>创建并赋值</h4><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] i = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>&#125;;</code></pre>\n\n<h4 id=\"数组的默认初始化\"><a href=\"#数组的默认初始化\" class=\"headerlink\" title=\"数组的默认初始化\"></a>数组的默认初始化</h4><p>数组是引用类型 , 它的元素相当于类的实例变量 , 因此数组一经分配空间 , 其中每个元素也被按照实例变量同样的方式被隐式初始化 . </p>\n<h4 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h4><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] arrays = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;;\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ; <span class=\"hljs-type\">int</span> &lt; arrays.length ; i++)&#123;\n    System.out.println(arrays[i]);\n&#125;\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> array : arrays)&#123;\n    System.out.println(array);\n&#125;</code></pre>\n\n<h4 id=\"数组做方法入参\"><a href=\"#数组做方法入参\" class=\"headerlink\" title=\"数组做方法入参\"></a>数组做方法入参</h4><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] arrays = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>&#125;;\nprintArrays(arrays);\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArrays</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arrays)</span>&#123;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> array : arrays)&#123;\n    \tSystem.out.println(array);\n\t&#125;\n&#125;</code></pre>\n\n<h4 id=\"数组做返回值\"><a href=\"#数组做返回值\" class=\"headerlink\" title=\"数组做返回值\"></a>数组做返回值</h4><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>[] arrays = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];\narrays = valueArrays(arrays);\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] valueArrays(<span class=\"hljs-type\">int</span>[] array)&#123;\n    <span class=\"hljs-type\">int</span>[] arrays = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[array.length];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> ; <span class=\"hljs-type\">int</span> &lt; arrays.length ; i++)&#123;\n    \tarrays[i] = i;\n\t&#125;\n    <span class=\"hljs-keyword\">return</span> arrays;\n&#125;</code></pre>\n\n<h3 id=\"四-多维数组\"><a href=\"#四-多维数组\" class=\"headerlink\" title=\"四. 多维数组\"></a>四. 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组</p>\n<pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 例</span>\nString[][] str = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">4</span>];</code></pre>\n\n<h4 id=\"多维数组的动态初始化（以二维数组为例）\"><a href=\"#多维数组的动态初始化（以二维数组为例）\" class=\"headerlink\" title=\"多维数组的动态初始化（以二维数组为例）\"></a>多维数组的动态初始化（以二维数组为例）</h4><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 格式 : type[][] typeName = new type[typeLength1][typeLength2];</span>\n<span class=\"hljs-comment\">// type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，typeLength1 为行数，typeLength2 为列数</span>\n<span class=\"hljs-comment\">// 例</span>\n<span class=\"hljs-type\">int</span>[][] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>];</code></pre>\n\n<h4 id=\"多维数组的引用（以二维数组为例\"><a href=\"#多维数组的引用（以二维数组为例\" class=\"headerlink\" title=\"多维数组的引用（以二维数组为例)\"></a>多维数组的引用（以二维数组为例)</h4><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 对二维数组中的每个元素，引用方式为 arrayName[index1][index2]</span>\nnum[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];</code></pre>\n\n<h3 id=\"五-Arrays-类\"><a href=\"#五-Arrays-类\" class=\"headerlink\" title=\"五. Arrays 类\"></a>五. Arrays 类</h3><p><code>java.util.Arrays</code> 类能方便地操作数组，它提供的所有方法都是静态的。</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法和说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\"><strong>public static int binarySearch(Object[] a, Object key)</strong> 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\"><strong>public static boolean equals(long[] a, long[] a2)</strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\"><strong>public static void fill(int[] a, int val)</strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n</tbody></table>\n<h3 id=\"六-稀疏数组\"><a href=\"#六-稀疏数组\" class=\"headerlink\" title=\"六. 稀疏数组\"></a>六. 稀疏数组</h3><p>当一个数组中大部分元素为<strong>0</strong>时 , 或者为统一数值时 , 可以通过稀疏数组来保存数据 . </p>\n<h4 id=\"处理方式\"><a href=\"#处理方式\" class=\"headerlink\" title=\"处理方式\"></a>处理方式</h4><ul>\n<li>记录数组一共有几行几列 , 有多少个不同值 .</li>\n<li>把具有不同值的元素和行列及值记录在一个小规模的数组中 , 从而缩小程序的规模 .</li>\n</ul>\n<pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;\n\n       <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">        * 初始化二维数组</span>\n<span class=\"hljs-comment\">        * &lt;p&gt;</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 1 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 2 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        * &lt;/p&gt;</span>\n<span class=\"hljs-comment\">        */</span>\n       <span class=\"hljs-comment\">//初始化原数组</span>\n       <span class=\"hljs-type\">int</span>[][] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">11</span>][<span class=\"hljs-number\">11</span>];\n       array[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;\n       array[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">2</span>;\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span>[] row : array)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> item : row)&#123;\n               System.out.printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>,item);\n           &#125;\n       &#125;\n\n       System.out.println(<span class=\"hljs-string\">&quot;---------&gt; 二维数组转稀疏数组&quot;</span>);\n\n       <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">        * 稀疏数组</span>\n<span class=\"hljs-comment\">        * &lt;p&gt;</span>\n<span class=\"hljs-comment\">        *     11 11 2</span>\n<span class=\"hljs-comment\">        *     1  2  1</span>\n<span class=\"hljs-comment\">        *     2  4  2</span>\n<span class=\"hljs-comment\">        * &lt;/p&gt;</span>\n<span class=\"hljs-comment\">        */</span>\n       <span class=\"hljs-comment\">//得到非0数据数</span>\n       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">11</span>;i++)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">11</span>;j++)&#123;\n               <span class=\"hljs-keyword\">if</span>(array[i][j] != <span class=\"hljs-number\">0</span>)&#123;\n                   sum++;\n               &#125;\n           &#125;\n       &#125;\n       <span class=\"hljs-comment\">//创建稀疏数组</span>\n       <span class=\"hljs-type\">int</span>[][] sparseArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[sum+<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">3</span>];\n       <span class=\"hljs-comment\">//给稀疏数组赋值</span>\n       sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">11</span>;\n       sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">11</span>;\n       sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = sum;\n       <span class=\"hljs-comment\">//将非0的数放入稀疏数组</span>\n       <span class=\"hljs-comment\">//count：标识第几个非0数</span>\n       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">11</span>;i++)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">11</span>;j++)&#123;\n               <span class=\"hljs-keyword\">if</span>(array[i][j] != <span class=\"hljs-number\">0</span>)&#123;\n                   count++;\n                   sparseArray[count][<span class=\"hljs-number\">0</span>] = i;\n                   sparseArray[count][<span class=\"hljs-number\">1</span>] = j;\n                   sparseArray[count][<span class=\"hljs-number\">2</span>] = array[i][j];\n               &#125;\n           &#125;\n       &#125;\n       <span class=\"hljs-comment\">//遍历稀疏数组</span>\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i&lt;sparseArray.length;i++)&#123;\n           System.out.printf(<span class=\"hljs-string\">&quot;%d%d%d\\t&quot;</span>,sparseArray[i][<span class=\"hljs-number\">0</span>],sparseArray[i][<span class=\"hljs-number\">1</span>],sparseArray[i][<span class=\"hljs-number\">2</span>]);\n       &#125;\n\n       System.out.println(<span class=\"hljs-string\">&quot;-----------&gt;稀疏数组转回原始数组&quot;</span>);\n\n       <span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">        * 恢复的二维数组</span>\n<span class=\"hljs-comment\">        * &lt;p&gt;</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 1 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 2 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        *     0 0 0 0 0 0 0 0 0 0 0</span>\n<span class=\"hljs-comment\">        * &lt;/p&gt;</span>\n<span class=\"hljs-comment\">        */</span>\n\n       <span class=\"hljs-type\">int</span>[][] oldArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]][sparseArray[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]];\n       <span class=\"hljs-comment\">//将原来非0的数填充回去</span>\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;i&lt;=count;i++)&#123;\n         oldArray[sparseArray[i][<span class=\"hljs-number\">0</span>]][sparseArray[i][<span class=\"hljs-number\">1</span>]] = sparseArray[i][<span class=\"hljs-number\">2</span>];\n       &#125;\n       <span class=\"hljs-comment\">//遍历刚转回的原始数组</span>\n       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span>[] row : oldArray)&#123;\n           <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> item : row)&#123;\n               System.out.printf(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>,item);\n           &#125;\n       &#125;\n   &#125;</code></pre>\n\n"},{"title":"java基础七","date":"2022-03-20T09:07:00.000Z","_content":"\n## 排序\n","source":"_posts/java/basic7.md","raw":"---\ntitle: java基础七\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:07:00\n---\n\n## 排序\n","slug":"java/basic7","published":1,"updated":"2022-03-21T13:19:28.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samf5000xowsp82lpg97x","content":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2>","site":{"data":{}},"wordcount":2,"excerpt":"","more":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2>"},{"title":"java基础八","date":"2022-03-20T09:08:00.000Z","_content":"\n## 面向对象\n\n### 概念\n\n### 对象的创建\n\n### 面向对象的三大特征\n\n### 抽象类和接口\n\n### 内部类及OOP实战\n","source":"_posts/java/basic8.md","raw":"---\ntitle: java基础八\ncategories: \n - [Java,Java基础]\ntags: \n - Java基础\ndate: 2022-03-20 17:08:00\n---\n\n## 面向对象\n\n### 概念\n\n### 对象的创建\n\n### 面向对象的三大特征\n\n### 抽象类和接口\n\n### 内部类及OOP实战\n","slug":"java/basic8","published":1,"updated":"2022-03-21T13:19:22.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl10samfg002aowsp27pzc235","content":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h3 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h3><h3 id=\"面向对象的三大特征\"><a href=\"#面向对象的三大特征\" class=\"headerlink\" title=\"面向对象的三大特征\"></a>面向对象的三大特征</h3><h3 id=\"抽象类和接口\"><a href=\"#抽象类和接口\" class=\"headerlink\" title=\"抽象类和接口\"></a>抽象类和接口</h3><h3 id=\"内部类及OOP实战\"><a href=\"#内部类及OOP实战\" class=\"headerlink\" title=\"内部类及OOP实战\"></a>内部类及OOP实战</h3>","site":{"data":{}},"wordcount":35,"excerpt":"","more":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h3 id=\"对象的创建\"><a href=\"#对象的创建\" class=\"headerlink\" title=\"对象的创建\"></a>对象的创建</h3><h3 id=\"面向对象的三大特征\"><a href=\"#面向对象的三大特征\" class=\"headerlink\" title=\"面向对象的三大特征\"></a>面向对象的三大特征</h3><h3 id=\"抽象类和接口\"><a href=\"#抽象类和接口\" class=\"headerlink\" title=\"抽象类和接口\"></a>抽象类和接口</h3><h3 id=\"内部类及OOP实战\"><a href=\"#内部类及OOP实战\" class=\"headerlink\" title=\"内部类及OOP实战\"></a>内部类及OOP实战</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl10sameg0001owsp8b12hx6n","category_id":"cl10samem0003owsp74q57whx","_id":"cl10samew000eowsp24xm3l7t"},{"post_id":"cl10samek0002owsp2vsj6u0g","category_id":"cl10samem0003owsp74q57whx","_id":"cl10samf0000kowsperyv2vqs"},{"post_id":"cl10samep0005owspd3njgnvp","category_id":"cl10samem0003owsp74q57whx","_id":"cl10samf2000powspep6dbndw"},{"post_id":"cl10sameu000bowspeau2ftp0","category_id":"cl10samez000jowsp66bl6r0s","_id":"cl10samf60010owspbp9873az"},{"post_id":"cl10samer0007owspbbig2jt9","category_id":"cl10samez000jowsp66bl6r0s","_id":"cl10samfa001iowspc3dg77sf"},{"post_id":"cl10samer0007owspbbig2jt9","category_id":"cl10samf8001aowsp1hpqhjmp","_id":"cl10samfa001jowsp3ghm2jqg"},{"post_id":"cl10samev000cowspba45hi04","category_id":"cl10samez000jowsp66bl6r0s","_id":"cl10samfc001powsp2em44h3a"},{"post_id":"cl10samev000cowspba45hi04","category_id":"cl10samf8001aowsp1hpqhjmp","_id":"cl10samfc001qowsp5a3h7g3o"},{"post_id":"cl10samex000howspcm8b5r7c","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfc001sowspe7y1dv3x"},{"post_id":"cl10samex000howspcm8b5r7c","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samfd001towsp0aik595c"},{"post_id":"cl10samez000iowsp1bspex6a","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfd001vowsp5jza7u6l"},{"post_id":"cl10samez000iowsp1bspex6a","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samfd001wowsp8jf03r23"},{"post_id":"cl10samf0000nowspcq77a9c6","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfd001yowspdud183rx"},{"post_id":"cl10samf0000nowspcq77a9c6","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samfe001zowsp75iv769y"},{"post_id":"cl10samf1000oowsp502z12xz","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfe0021owsp390me9di"},{"post_id":"cl10samf1000oowsp502z12xz","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samfe0022owsp05n0gifp"},{"post_id":"cl10samf3000sowsp2lqnfio1","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfe0024owspe00i2004"},{"post_id":"cl10samf3000sowsp2lqnfio1","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samfe0025owspf3uyd3ux"},{"post_id":"cl10samf3000uowsp40kefx99","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfe0026owsp5ff53c1r"},{"post_id":"cl10samf3000uowsp40kefx99","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samff0027owsp8nvn4odo"},{"post_id":"cl10samf5000xowsp82lpg97x","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samff0028owspbj7oe630"},{"post_id":"cl10samf5000xowsp82lpg97x","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samff0029owspb75sgg0c"},{"post_id":"cl10samfg002aowsp27pzc235","category_id":"cl10samf6000zowsp5spxaymc","_id":"cl10samfg002cowsp64qx6guy"},{"post_id":"cl10samfg002aowsp27pzc235","category_id":"cl10samfb001nowsp71ekdeh1","_id":"cl10samfg002dowspb4oahunn"},{"post_id":"cl10samep0005owspd3njgnvp","category_id":"cl11re56000031kspf5kmg39t","_id":"cl11re56100041ksp4ridghpe"},{"post_id":"cl10sameg0001owsp8b12hx6n","category_id":"cl11re56000031kspf5kmg39t","_id":"cl11re7vg00051kspbeq469pr"}],"PostTag":[{"post_id":"cl10sameg0001owsp8b12hx6n","tag_id":"cl10sameo0004owspgeso3n1i","_id":"cl10sameu000aowsp86ea4vgs"},{"post_id":"cl10samek0002owsp2vsj6u0g","tag_id":"cl10sameo0004owspgeso3n1i","_id":"cl10samex000gowsp5pbk8llb"},{"post_id":"cl10samep0005owspd3njgnvp","tag_id":"cl10sameo0004owspgeso3n1i","_id":"cl10samf0000mowsp0k2ua3pc"},{"post_id":"cl10samer0007owspbbig2jt9","tag_id":"cl10samf0000lowspe8wr57dy","_id":"cl10samf3000towsp3jc666y7"},{"post_id":"cl10samev000cowspba45hi04","tag_id":"cl10samf0000lowspe8wr57dy","_id":"cl10samf5000yowspga8aadyt"},{"post_id":"cl10samf5000xowsp82lpg97x","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samf60012owsp3w0f97ad"},{"post_id":"cl10samex000howspcm8b5r7c","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samf70013owsp0uik50iw"},{"post_id":"cl10samez000iowsp1bspex6a","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samf70016owsp24vg1xc2"},{"post_id":"cl10samf0000nowspcq77a9c6","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samf80019owsphusk66zh"},{"post_id":"cl10samf1000oowsp502z12xz","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samf9001cowspdanm7gby"},{"post_id":"cl10samf3000sowsp2lqnfio1","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samfa001fowspd45753ty"},{"post_id":"cl10samf3000uowsp40kefx99","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samfa001howsp5pm49sug"},{"post_id":"cl10samfg002aowsp27pzc235","tag_id":"cl10samf4000wowspdhdwajx1","_id":"cl10samfg002bowsp1o7401sh"}],"Tag":[{"name":"Hexo","_id":"cl10sameo0004owspgeso3n1i"},{"name":"离散数学","_id":"cl10samf0000lowspe8wr57dy"},{"name":"Java基础","_id":"cl10samf4000wowspdhdwajx1"}]}}